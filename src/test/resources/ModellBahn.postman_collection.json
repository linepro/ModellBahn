{
	"info": {
		"_postman_id": "03029c6a-d450-49c8-94b3-b3fee076553e",
		"name": "ModellBahn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Start Up",
			"item": [
				{
					"name": "Probe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Waiting for startup\");\r",
									"\r",
									"var health = pm.variables.replaceIn(\"{{management}}/health\");\r",
									"\r",
									"var retries = pm.variables.get(\"startRetries\");\r",
									"var delay = pm.variables.get(\"startDelay\");\r",
									"\r",
									"function probe(retries, delay) {\r",
									"    if (retries > 0) {\r",
									"        console.log(\"Probing: \" + retries);\r",
									"        setTimeout(delay);\r",
									"        return pm.sendRequest(health, (err, response) => {\r",
									"            if (response.code == 200) {\r",
									"                console.log(\"Started!\");\r",
									"                return true;\r",
									"            } else {\r",
									"                probe(--retries, delay);\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        console.log(\"Failed!\");\r",
									"        return false;\r",
									"    }\r",
									"}\r",
									"\r",
									"var started = probe(retries, delay);\r",
									"console.log(started);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Don't wrap in pm.test for fail hard...\r",
									"pm.response.to.have.status(200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/health",
							"host": [
								"{{management}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{authPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{authUser}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Management (Open)",
			"item": [
				{
					"name": "Actuator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Actuator\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/",
							"host": [
								"{{management}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Audit Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Audit Events\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/auditevents",
							"host": [
								"{{management}}"
							],
							"path": [
								"auditevents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Beans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Beans\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/beans",
							"host": [
								"{{management}}"
							],
							"path": [
								"beans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Caches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Caches\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/caches",
							"host": [
								"{{management}}"
							],
							"path": [
								"caches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Config Props",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Config Props\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/configprops",
							"host": [
								"{{management}}"
							],
							"path": [
								"configprops"
							]
						}
					},
					"response": []
				},
				{
					"name": "Env",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Env\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/env",
							"host": [
								"{{management}}"
							],
							"path": [
								"env"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flyway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Flyway\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/flyway",
							"host": [
								"{{management}}"
							],
							"path": [
								"flyway"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(1500));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/health",
							"host": [
								"{{management}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "HTTP Trace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Trace\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/httptrace",
							"host": [
								"{{management}}"
							],
							"path": [
								"httptrace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Info\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/info",
							"host": [
								"{{management}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Log File\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/logfile",
							"host": [
								"{{management}}"
							],
							"path": [
								"logfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Loggers\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/loggers",
							"host": [
								"{{management}}"
							],
							"path": [
								"loggers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Mappings\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/mappings",
							"host": [
								"{{management}}"
							],
							"path": [
								"mappings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metrics\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/metrics",
							"host": [
								"{{management}}"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scheduled Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Scheduled Tasks\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/scheduledtasks",
							"host": [
								"{{management}}"
							],
							"path": [
								"scheduledtasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Thread Dump",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thread Dump\", () => pm.response.to.have.status(401));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/threaddump",
							"host": [
								"{{management}}"
							],
							"path": [
								"threaddump"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Management (Auth)",
			"item": [
				{
					"name": "Actuator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Actuator\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/",
							"host": [
								"{{management}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Audit Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Audit Events\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/auditevents",
							"host": [
								"{{management}}"
							],
							"path": [
								"auditevents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Beans",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Beans\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/beans",
							"host": [
								"{{management}}"
							],
							"path": [
								"beans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Caches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Caches\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/caches",
							"host": [
								"{{management}}"
							],
							"path": [
								"caches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Config Props",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Config Props\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/configprops",
							"host": [
								"{{management}}"
							],
							"path": [
								"configprops"
							]
						}
					},
					"response": []
				},
				{
					"name": "Env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Env\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/env",
							"host": [
								"{{management}}"
							],
							"path": [
								"env"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flyway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Flyway\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/flyway",
							"host": [
								"{{management}}"
							],
							"path": [
								"flyway"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(1500));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/health",
							"host": [
								"{{management}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "HTTP Trace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Trace\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/httptrace",
							"host": [
								"{{management}}"
							],
							"path": [
								"httptrace"
							]
						}
					},
					"response": []
				},
				{
					"name": "Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Info\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/info",
							"host": [
								"{{management}}"
							],
							"path": [
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Log File\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/logfile",
							"host": [
								"{{management}}"
							],
							"path": [
								"logfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Loggers\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/loggers",
							"host": [
								"{{management}}"
							],
							"path": [
								"loggers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mappings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Mappings\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/mappings",
							"host": [
								"{{management}}"
							],
							"path": [
								"mappings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metrics\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/metrics",
							"host": [
								"{{management}}"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scheduled Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Scheduled Tasks\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/scheduledtasks",
							"host": [
								"{{management}}"
							],
							"path": [
								"scheduledtasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Thread Dump",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thread Dump\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{management}}/threaddump",
							"host": [
								"{{management}}"
							],
							"path": [
								"threaddump"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{authPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{authUser}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Enums",
			"item": [
				{
					"name": "Adress Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(6));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/adressTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"adressTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderungs Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(7));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/anderungsTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"anderungsTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/decoderStatus",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"decoderStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "Konfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(4));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/konfiguration",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"konfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Land",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(6));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/land",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"land"
							]
						}
					},
					"response": []
				},
				{
					"name": "Leistungsubertragung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(5));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/leistungsubertragung",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"leistungsubertragung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(4));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stecker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(11));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/stecker",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"stecker"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wahrung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    //pm.test(\"tooltip\", () => pm.expect(a.tooltip).to.exist);\r",
									"    //pm.test(\"decimals\", () => pm.expect(a.decimals).to.exist);\r",
									"    pm.test(\"symbol\", () => pm.expect(a.symbol).to.exist);\r",
									"});\r",
									"pm.test(\"enums\", () => pm.expect(jsonData.length).to.eql(6));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/enums/wahrung",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"wahrung"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Achsfolg",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}"
						},
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Antrieb",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Aufbau",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bahnverwaltung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Epoch",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gattung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hersteller",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landAdd\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonAdd\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landUpdate\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonUpdate\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kupplung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Licht",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Massstab",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Motor Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Protokoll",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sondermodell",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Spurweite",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Steuerung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Zug Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kategorie",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"unterKategorien\", () => pm.expect(a.unterKategorien).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(a._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach(function(k) { \r",
									"    var self = root + \"/\" + k.name;\r",
									"    pm.test(\"name: \" + k.name, () => pm.expect(k.name).to.be.oneOf([\"AUSGESTALTUNG\",\"BELEUCHTUNG\"]));\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(k.bezeichnung).to.exist);\r",
									"    k.unterKategorien.forEach(function(u){\r",
									"        pm.expect(u.kategorie).to.eql(k.name);\r",
									"        pm.expect(u.name).to.exist;\r",
									"        pm.expect(u.bezeichnung).to.exist;\r",
									"        pm.expect(u.deleted).to.be.false;\r",
									"        pm.expect(u._links.parent[0].href).to.eql(self);\r",
									"        pm.expect(u._links.update[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"        pm.expect(u._links.delete[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"    });\r",
									"    pm.test(\"deleted\", () => pm.expect(k.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(k._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(k._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(k._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(k._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(k._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(k._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"root = pm.variables.replaceIn(\"{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG\");\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG",
							"host": [
								"{{api}}"
							],
							"path": [
								"unterKategorien"
							],
							"query": [
								{
									"key": "kategorien",
									"value": "AUSGESTALTUNG,BELEUCHTUNG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(undefined));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"unterAdd\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vorbild",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"gattung\", () => pm.expect(a.gattung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungAdd}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieAdd}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieAdd}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungAdd}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebAdd}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgAdd}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungAdd}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungUpdate}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieUpdate}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieUpdate}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungUpdate}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebUpdate}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgUpdate}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungUpdate}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Decoder Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"    pm.test(\"_links.adress\", () => pm.expect(a._links.adress[0].href).to.eql(self+\"/adressen\"));\r",
									"    pm.test(\"_links.cv\", () => pm.expect(a._links.cv[0].href).to.eql(self+\"/cvs\"));\r",
									"    pm.test(\"_links.funktion\", () => pm.expect(a._links.funktion[0].href).to.eql(self+\"/funktionen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxAdd\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollAdd\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeAdd\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(true));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationAdd\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerAdd\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adressen\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cvs\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktionen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": {{gerausch}},\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adressen\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cvs\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktionen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"adIndex\", new Number(pm.variables.get(\"adIndexAdd\")));\r",
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypAdd\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanAdd\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adressen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypUpdate\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanUpdate\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adressen",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cv\", new Number(pm.variables.get(\"cvAdd\")));\r",
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinAdd\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxAdd\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinUpdate\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxUpdate\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cvs",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheAdd\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionAdd\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(true));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktionen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheUpdate\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionUpdate\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(false));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktionen",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxUpdate\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollUpdate\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeUpdate\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(false));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationUpdate\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerUpdate\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adressen\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cvs\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktionen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": false,\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adressen\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cvs\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktionen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adressen\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cvs\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktionen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adressen/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adressen",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete CV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cvs/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cvs",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktionen/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktionen",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Produkt",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.grossansicht\", () => pm.expect(a._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"    pm.test(\"_links.explosionszeichnung\", () => pm.expect(a._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"    pm.test(\"_links.teil\", () => pm.expect(a._links.teil[0].href).to.eql(self + \"/teilen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieAdd\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieAdd\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabAdd\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteAdd\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochAdd\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungAdd\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungAdd\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgAdd\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellAdd\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauAdd\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtAdd\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungAdd\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\"))));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderHersteller\": \"{{decoderHersteller}}\",\n    \"decoderBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.test(\"response\", () => pm.response.to.have.status(202)));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Grossansicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.test(\"response\", () => pm.response.to.have.status(202)));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "{{language}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"grossansicht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "explosionszeichnung",
									"type": "file",
									"src": "{{explosionszeichnungFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"teilHersteller\", pm.variables.get(\"teilHerstellerAdd\"));\r",
									"pm.environment.set(\"teilBestellNr\", pm.variables.get(\"teilBestellNrAdd\"));\r",
									"pm.environment.set(\"teilBezeichnung\", pm.variables.get(\"teilBezeichnungAdd\"));\r",
									"pm.environment.set(\"teilKategorie\", pm.variables.get(\"teilKategorieAdd\"));\r",
									"pm.environment.set(\"teilUnterKategorie\", pm.variables.get(\"teilUnterKategorieAdd\"));\r",
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"teilHersteller\": \"{{teilHersteller}}\",\n    \"teilBestellNr\": \"{{teilBestellNr}}\",\n    \"bezeichnung\": \"{{teilBezeichnung}}\",\n    \"kategorie\": \"{{teilKategorie}}\",\n    \"unterKategorie\": \"{{teilUnterKategorie}}\",\n    \"anzahl\": {{teilAnzahl}},\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}?anzahl={{teilAnzahl}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							],
							"query": [
								{
									"key": "anzahl",
									"value": "{{teilAnzahl}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerUpdate\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderTypHersteller\": \"{{decoderHersteller}}\",\n    \"decoderTypBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Grossansicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"grossansicht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Decoder",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.decoderId;\r",
									"    var add = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"decoderId: \" + a.decoderId, () => pm.expect(a.decoderId).to.exist);\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"status\", () => pm.expect(a.status).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(add));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hersteller\", \"ESU\");\r",
									"pm.environment.set(\"bestellNr\", \"62400\");\r",
									"pm.environment.set(\"bezeichnung\", \"LokSound M4\");\r",
									"pm.environment.set(\"iMax\", new Number(\"1.1\"));\r",
									"pm.environment.set(\"protokoll\", \"MFX\");\r",
									"pm.environment.set(\"fahrstufe\", new Number(\"28\"));\r",
									"pm.environment.set(\"sound\", new Boolean(\"true\"));\r",
									"pm.environment.set(\"konfiguration\", \"CV\");\r",
									"pm.environment.set(\"stecker\", \"NEM652\");\r",
									"pm.environment.set(\"status\",\"FREI\");\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"anleitungen\", pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\"));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(pm.variables.get(\"anleitungen\")));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(1));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(\"Primary\"));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(1));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(\"DIGITAL\"));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(1));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(1));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adressen/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(1));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(\"Adresse\"));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(1));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(80));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(3));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cvs/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cvs/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cvs/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cvs/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cvs/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cvs/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cvs/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cvs/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cvs/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cvs/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cvs/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cvs/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cvs/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cvs/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cvs/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cvs/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cvs/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cvs/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cvs/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cvs/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cvs/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(\"F0\"));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(\"Funktion 0\"));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktionen/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktionen/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktionen/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktionen/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktionen/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktionen/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktionen/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktionen/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktionen/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktionen/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktionen/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktionen/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktionen/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktionen/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktionen/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktionen/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"decoderId\": \"{{decoderId}}\",\r\n    \"hersteller\": \"{{decoderHersteller}}\",\r\n    \"bestellNr\": \"{{decoderBestellNr}}\",\r\n    \"bezeichnung\": \"{{bezeichnung}}\",\r\n    \"protokoll\": \"{{protokoll}}\",\r\n    \"fahrstufe\": \"{{fahrstufe}}\",\r\n    \"kaufdatum\": \"{{kaufdatum}}\",\r\n    \"wahrung\": \"{{wahrung}}\",\r\n    \"preis\": {{preis}},\r\n    \"anmerkung\": \"{{anmerkung}}\",\r\n    \"status\": \"{{status}}\",\r\n\t\"deleted\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoder/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"adIndex\", 1);\r",
									"pm.environment.set(\"adBezeichnung\", \"Primary\");\r",
									"pm.environment.set(\"adSpan\", 1);\r",
									"pm.environment.set(\"adAdressTyp\", \"DIGITAL\");\r",
									"pm.environment.set(\"adWerkseinstellung\", 1);\r",
									"pm.environment.set(\"adAdress\", 30);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/adressen/{{adIndex}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adress\", () => pm.expect(jsonData.adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/adressen/{{adIndex}}?adress={{adAdress}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"adressen",
								"{{adIndex}}"
							],
							"query": [
								{
									"key": "adress",
									"value": "{{adAdress}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cvCv\", 1);\r",
									"pm.environment.set(\"cvBezeichnung\", \"Adresse\");\r",
									"pm.environment.set(\"cvMinimal\", 1);\r",
									"pm.environment.set(\"cvMaximal\", 80);\r",
									"pm.environment.set(\"cvWerkseinstellung\", 3);\r",
									"pm.environment.set(\"cvWert\", 45);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/cvs/{{cvCv}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"wert\", () => pm.expect(jsonData.wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/cvs/{{cvCv}}?wert={{cvWert}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"cvs",
								"{{cvCv}}"
							],
							"query": [
								{
									"key": "wert",
									"value": "{{cvWert}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"fnReihe\", 1);\r",
									"pm.environment.set(\"fnFunktion\", \"F0\");\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/funktionen/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(false));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/funktionen/{{fnReihe}}/{{fnFunktion}}?bezeichnung={{fnBezeichnung}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"funktionen",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							],
							"query": [
								{
									"key": "bezeichnung",
									"value": "{{fnBezeichnung}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"protokoll\", \"DCC\");\r",
									"pm.environment.set(\"fahrstufe\", 28);\r",
									"pm.environment.set(\"status\", \"BASTLER\");\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(pm.variables.get(\"anleitungen\")));pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adressen/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cvs/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cvs/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cvs/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cvs/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cvs/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cvs/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cvs/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cvs/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cvs/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cvs/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cvs/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cvs/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cvs/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cvs/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cvs/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cvs/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cvs/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cvs/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cvs/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cvs/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cvs/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktionen/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktionen/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktionen/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktionen/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktionen/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktionen/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktionen/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktionen/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktionen/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktionen/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktionen/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktionen/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktionen/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktionen/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktionen/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktionen/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"decoderId\": \"{{decoderId}}\",\n    \"hersteller\": \"{{decoderHersteller}}\",\n    \"bestellNr\": \"{{decoderBestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": \"{{fahrstufe}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"status\": \"{{status}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(pm.variables.get(\"anleitungen\")));pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adressen/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cvs/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cvs/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cvs/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cvs/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cvs/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cvs/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cvs/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cvs/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cvs/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cvs/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cvs/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cvs/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cvs/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cvs/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cvs/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cvs/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cvs/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cvs/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cvs/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cvs/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cvs/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktionen/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktionen/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktionen/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktionen/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktionen/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktionen/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktionen/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktionen/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktionen/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktionen/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktionen/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktionen/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktionen/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktionen/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktionen/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktionen/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Artikel",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.artikelId;\r",
									"    pm.test(\"artikelId: \" + a.artikelId, () => pm.expect(a.artikelId).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"anderungen\", () => pm.expect(a.anderungen).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.grossansicht\", () => pm.expect(a._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"    pm.test(\"_links.anderung\", () => pm.expect(a._links.anderung[0].href).to.eql(self + \"/anderungen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNrAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"unterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"lange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"massstab\", \"H0\");\r",
									"pm.environment.set(\"spurweite\", \"H0\");\r",
									"pm.environment.set(\"epoch\", \"III\");\r",
									"pm.environment.set(\"bahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"gattung\", \"BR89.0\");\r",
									"pm.environment.set(\"betreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"achsfolg\", \"CH2T\");\r",
									"pm.environment.set(\"aufbau\", \"LK\");\r",
									"pm.environment.set(\"licht\", \"L1V\");\r",
									"pm.environment.set(\"kupplung\", \"RELEX\");\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\"));\r",
									"pm.environment.set(\"grossansicht\", pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\"));\r",
									"pm.environment.set(\"status\", \"GEKAUFT\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"artikelId\", jsonData.artikelId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": false\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Grossansicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"grossansicht\", pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/grossansicht.jpg\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "{{language}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grossansicht",
									"type": "file",
									"src": "{{imageFile}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/grossansicht",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"grossansicht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"UMGEBAUT\");\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStatus\", \"GEKAUFT\");\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"anderungId\", jsonData.anderungId);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"REPARIERT\");\r",
									"pm.environment.set(\"anBezeichnung\",  pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerUpdate\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNr\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"//pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"//pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"//pm.environment.set(\"lange\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"//pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"//pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"//pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"//pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"//pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"//pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"//pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"//pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"//pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"status\", \"BASTELN\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"artikelId\": \"{{artikelId}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Grossansicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(pm.variables.get(\"grossansicht\")));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"grossansicht\", pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "{{language}}"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/grossansicht",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"grossansicht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Zug",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.consist\", () => pm.expect(a._links.consist[0].href).to.eql(self+\"/fahrzeugen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"zug\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.consist\", () => pm.expect(jsonData._links.consist[0].href).to.eql(self+\"/fahrzeugen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00001\");\r",
									"pm.environment.set(\"cnPosition\", 1);\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"3000\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BR 89.0\");\r",
									"pm.environment.set(\"cnKategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"cnUnterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BR89.0\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");\r",
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{cnHersteller}}/{{cnBestellNr}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"cnPosition\", jsonData.position);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/fahrzeugen/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/fahrzeugen?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"fahrzeugen"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00002\");\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"4007\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BI\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BI\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"29 758 Stg\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");\r",
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{cnHersteller}}/{{cnBestellNr}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/fahrzeugen/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(pm.variables.get(\"abbildung\"))));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/fahrzeugen/{{cnPosition}}?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"fahrzeugen",
								"{{cnPosition}}"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypUpdate\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/fahrzeugen/{{cnPosition}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"fahrzeugen[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"fahrzeugen[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"fahrzeugen[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"fahrzeugen[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"fahrzeugen[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"fahrzeugen[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"fahrzeugen[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"fahrzeugen[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"fahrzeugen[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"fahrzeugen[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"fahrzeugen[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.exist);\r",
									"pm.test(\"fahrzeugen[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"fahrzeugen[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"fahrzeugen[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"fahrzeugen[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/fahrzeugen/{{cnPosition}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"fahrzeugen[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"fahrzeugen[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"fahrzeugen[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"fahrzeugen[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"fahrzeugen[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"fahrzeugen[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"fahrzeugen[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"fahrzeugen[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"fahrzeugen[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"fahrzeugen[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"fahrzeugen[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"fahrzeugen[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"fahrzeugen[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"fahrzeugen[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"fahrzeugen[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/fahrzeugen/1",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"fahrzeugen",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Open Api",
			"item": [
				{
					"name": "Get Docs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(2500));\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"openapi\", () => pm.expect(jsonData.openapi).to.eql( \"3.0.1\"));\r",
									"pm.test(\"info\", () => {\r",
									"    pm.expect(jsonData.info.title).to.eql(\"ModellBahn API\");\r",
									"\tpm.expect(jsonData.info.description).to.eql(\"ModellBahn datastore\");\r",
									"\tpm.expect(jsonData.info.license.name).to.eql(\"MIT License\");\r",
									"\tpm.expect(jsonData.info.license.url).to.eql(\"http://www.opensource.org/licenses/mit-license.php\");\r",
									"\tpm.expect(jsonData.info.version).to.eql(\"1.0.0\");\r",
									"\t});\r",
									"pm.test(\"externalDocs\", () => {\r",
									"\tpm.expect(jsonData.externalDocs.description).to.eql(\"ModellBahn datastore\");\r",
									"\tpm.expect(jsonData.externalDocs.url).to.eql(\"https://github.com/linepro/ModellBahn/docs\");\r",
									"    });\r",
									"pm.test(\"servers\", () => {\r",
									"\tpm.expect(jsonData.servers[0].url).to.eql(pm.variables.replaceIn(\"{{server}}/ModellBahn/v3/a\"));\r",
									"\tpm.expect(jsonData.servers[0].description).to.eql(\"Generated server url\");\r",
									"\t});\r",
									"pm.test(\"paths\", () => {\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/achsfolg\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/achsfolg/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/antrieb\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/antrieb/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/anderungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/anderungen/{anderungId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/bahnverwaltung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/bahnverwaltung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/funktionen/{reihe}/{funktion}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/adressen/{index}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/cvs/{cv}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/anleitungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/cvs/{cv}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/funktionen/{reihe}/{funktion}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/adressen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/cvs\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/funktionen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/adressen/{index}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/status\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/leistungsubertragung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/adressenTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/decoder\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/konfiguration\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/anderungsTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/stecker\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/epoch\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/epoch/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/gattung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/gattung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/hersteller\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/hersteller/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/unterKategorien\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{kategorie}/unterKategorien/{unterKategorie}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{kategorie}/unterKategorien\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/massstab\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/massstab/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/motorTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/motorTyp/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/anleitungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/explosionszeichnung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/teilen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/teilen/{teilHersteller}/{teilBestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/protokoll\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/protokoll/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/sondermodell\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/sondermodell/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/spurweite\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/spurweite/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/steuerung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/steuerung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}/fahrzeugen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}/fahrzeugen/{position}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zugTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zugTyp/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/data/{dataType}\")).to.be.true;\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{root}}/v3/api-docs.json",
							"host": [
								"{{root}}"
							],
							"path": [
								"v3",
								"api-docs.json"
							]
						},
						"description": "http://LINEPRO2.home:8086/ModellBahn/api/swagger/swagger."
					},
					"response": []
				}
			]
		},
		{
			"name": "Export",
			"item": [
				{
					"name": "Achsfolg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Achsfolg\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Antrieb\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Aufbau\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bahnverwaltung\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,land,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Epoch\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Gattung\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Hersteller\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,land,url,telefon,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){5}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Kupplung\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Licht\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Massstab\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Motor Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Motor Typ\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Protokoll\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sondermodell\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Spurweite\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Steuerung\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Zug Typ\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unter Kategorie\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"kategorie,name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vorbild\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,gattung,bezeichnung,kategorie,unterKategorie,bahnverwaltung,hersteller,bauzeit,anzahl,betreibsnummer,antrieb,achsfolg,anfahrzugkraft,leistung,dienstgewicht,geschwindigkeit,lange,ausserdienst,dmTreibrad,dmLaufradVorn,dmLaufradHinten,zylinder,dmZylinder,kolbenhub,kesseluberdruck,rostflache,uberhitzerflache,wasservorrat,verdampfung,fahrmotoren,motorbauart,leistungsubertragung,reichweite,kapazitat,klasse,sitzplatzeKL1,sitzplatzeKL2,sitzplatzeKL3,sitzplatzeKL4,aufbau,triebkopf,mittelwagen,drehgestellBauart,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){44}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,bezeichnung,iMax,protokoll,fahrstufe,gerausch,konfiguration,stecker,anleitungen,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){10}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ Adress\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,index,bezeichnung,span,adressTyp,werkseinstellung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ Cv\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,cv,bezeichnung,minimal,maximal,werkseinstellung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ Funktion\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,reihe,funktion,bezeichnung,programmable,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){6}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Produkt\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,bezeichnung,kategorie,unterKategorie,lange,massstab,spurweite,epoch,bahnverwaltung,gattung,betreibsnummer,bauzeit,achsfolg,sondermodell,aufbau,licht,kupplung,steuerung,decoderHersteller,decoderBestellNr,motorTyp,anmerkung,anleitungen,explosionszeichnung,abbildung,grossansicht,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){27}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Produkt Teil\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,teilHersteller,teilBestellNr,bezeichnung,kategorie,unterKategorie,anzahl,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){8}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/teil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"teil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,hersteller,bestellNr,bezeichnung,iMax,protokoll,fahrstufe,gerausch,konfiguration,stecker,kaufdatum,wahrung,preis,anmerkung,status,anleitungen,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){16}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Adress\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,index,bezeichnung,span,adressTyp,werkseinstellung,adress,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Cv\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,cv,bezeichnung,minimal,maximal,werkseinstellung,wert,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Funktion\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,reihe,funktion,bezeichnung,programmable,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){5}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Artikel\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"artikelId,hersteller,bestellNr,bezeichnung,kategorie,unterKategorie,lange,massstab,spurweite,epoch,bahnverwaltung,gattung,betreibsnummer,achsfolg,sondermodell,aufbau,licht,kupplung,steuerung,decoder,motorTyp,kaufdatum,wahrung,preis,stuck,verbleibende,anmerkung,beladung,status,abbildung,grossansicht,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){31}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Anderung\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"artikelId,anderungId,anderungsDatum,anderungsTyp,bezeichnung,stuck,anmerkung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Zug\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,zugTyp,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Zug Consist\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"zug,position,artikelId,hersteller,bestellNr,bezeichnung,lange,bahnverwaltung,gattung,betreibsnummer,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){11}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/consist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"consist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Achsfolg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Achsfolg\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Antrieb\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Aufbau\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bahnverwaltung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{bahnverwaltungCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Epoch\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Gattung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Hersteller\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{herstellerCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Kupplung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Licht\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Motor Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Motor Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Protokoll\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sondermodell\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Spurweite\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Steuerung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Zug Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unter Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{unterKategorieCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Vorbild\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{vorbildCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ Adress\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypAdressCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ Cv\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypCvCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Typ Funktion\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypFunktionCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Produkt\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{produktCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Produkt Teil\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{teilCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/teil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"teil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Adress\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderAdressCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Cv\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderCvCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Decoder Funktion\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderFunktionCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Artikel\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{artikelCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Anderung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{anderungCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Zug\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{zugCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Zug Consist\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{consistCsv}}"
								}
							]
						},
						"url": {
							"raw": "{{api}}/data/consist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"consist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/user\");\r",
									"var register = pm.variables.replaceIn(\"{{api}}/register\");\r",
									"var forgot = pm.variables.replaceIn(\"{{api}}/forgot\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.data.forEach(function(u) { \r",
									"    var self = root + \"/\" + u.name;\r",
									"    pm.test(\"name: \" + u.name, () => pm.expect(u.name).to.exist);\r",
									"    pm.test(\"eMail\", () => pm.expect(u.eMail).to.exist);\r",
									"    pm.test(\"locale\", () => pm.expect(u.locale).to.exist);\r",
									"    pm.test(\"enabled\", () => pm.expect(u.enabled).to.exist);\r",
									"    pm.test(\"search\", () => pm.expect(u._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"register\", () => pm.expect(u._links.register[0].href).to.eql(register));\r",
									"    pm.test(\"forgot\", () => pm.expect(u._links.forgot[0].href).to.eql(forgot));\r",
									"    pm.test(\"self\", () => pm.expect(u._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"password\", () => pm.expect(u._links.password[0].href).to.eql(self));\r",
									"    pm.test(\"update\", () => pm.expect(u._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"delete\", () => pm.expect(u._links.delete[0].href).to.eql(self));\r",
									"});\r",
									"pm.test(\"self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.data.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"user\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
									"pm.environment.set(\"eMail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.environment.set(\"firstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.environment.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.environment.set(\"locale\", pm.variables.replaceIn(\"{{$randomLocale}}\"));\r",
									"pm.environment.set(\"password\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var cleanUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/clean\");\r",
									"pm.sendRequest({\r",
									"    url: cleanUrl,\r",
									"    method: 'PATCH',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"clear inbox: \" + err, () => false);\r",
									"        }\r",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(2000));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(201));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Eine Bestätigungs-E-Mail wurde an {{eMail}} gesendet. Bitte klicken Sie auf den Link, um die Anmeldung abzuschließen.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{user}}\",\r\n\t\"eMail\": \"{{eMail}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n\t\"lastName\": \"{{lastName}}\",\r\n    \"locale\": \"{{locale}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const regex = /(token=)([^\"]+)/;\r",
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var messagesUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages\");\r",
									"pm.sendRequest({\r",
									"    url: messagesUrl,\r",
									"    method: 'GET',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"messages: \" + err, () => false);\r",
									"        }\r",
									"        response.json().forEach(m => {\r",
									"            if (m.to_email == pm.variables.get(\"eMail\")) {\r",
									"                var bodyUrl = pm.variables.get(\"mailhost\") + m.html_path;\r",
									"                pm.sendRequest({\r",
									"                    url: bodyUrl,\r",
									"                    method: 'GET',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"body: \" + err, () => false);\r",
									"                    }\r",
									"                    var text = response.text();\r",
									"                    var token = text.match(regex)[2];\r",
									"                    console.log(token);\r",
									"                    pm.environment.set(\"token\", token);\r",
									"                });\r",
									"                var messageUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages/\") + m.id;\r",
									"                pm.sendRequest({\r",
									"                    url: messageUrl,\r",
									"                    method: 'DELTE',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"delete: \" + err, () => false);\r",
									"                    }\r",
									"                });\r",
									"            };\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Sie haben die Anmeldung abgeschlossen. Melden Sie sich an, um fortzufahren.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/confirm?token={{token}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var cleanUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/clean\");\r",
									"pm.sendRequest({\r",
									"    url: cleanUrl,\r",
									"    method: 'PATCH',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"clear inbox: \" + err, () => false);\r",
									"        }\r",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(2000));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Eine E-Mail zum Zurücksetzen des Passworts wurde an {{eMail}} gesendet. Bitte klicken Sie auf den Link, um Ihr Passwort zu ändern.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/forgot?eMail={{eMail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"forgot"
							],
							"query": [
								{
									"key": "eMail",
									"value": "{{eMail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"password\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"const regex = /(token=)([^\"]+)/;\r",
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var messagesUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages\");\r",
									"pm.sendRequest({\r",
									"    url: messagesUrl,\r",
									"    method: 'GET',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"messages: \" + err, () => false);\r",
									"        }\r",
									"        response.json().forEach(m => {\r",
									"            if (m.to_email == pm.variables.get(\"eMail\")) {\r",
									"                var bodyUrl = pm.variables.get(\"mailhost\") + m.html_path;\r",
									"                pm.sendRequest({\r",
									"                    url: bodyUrl,\r",
									"                    method: 'GET',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"body: \" + err, () => false);\r",
									"                    }\r",
									"                    var text = response.text();\r",
									"                    var token = text.match(regex)[2];\r",
									"                    console.log(token);\r",
									"                    pm.environment.set(\"token\", token);\r",
									"                });\r",
									"                var messageUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages/\") + m.id;\r",
									"                pm.sendRequest({\r",
									"                    url: messageUrl,\r",
									"                    method: 'DELTE',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"delete: \" + err, () => false);\r",
									"                    }\r",
									"                });\r",
									"            };\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Das Passwort für {{eMail}} wurde geändert.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/reset?token={{token}}&password={{password}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"reset"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"newPassword\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(2000));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Das Passwort für {{eMail}} wurde geändert.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{api}}/user/{{user}}?password={{newPassword}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							],
							"query": [
								{
									"key": "password",
									"value": "{{newPassword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"eMail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.environment.set(\"firstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.environment.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.environment.set(\"locale\", pm.variables.replaceIn(\"{{$randomLocale}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/user\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/user/{{user}}\");\r",
									"var register = pm.variables.replaceIn(\"{{api}}/register\");\r",
									"var forgot = pm.variables.replaceIn(\"{{api}}/forgot\");\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"user\")));\r",
									"pm.test(\"eMail\", () => pm.expect(jsonData.eMail).to.eql(pm.variables.get(\"eMail\")));\r",
									"pm.test(\"firstName\", () => pm.expect(jsonData.firstName).to.eql(pm.variables.get(\"firstName\")));\r",
									"pm.test(\"lastName\", () => pm.expect(jsonData.lastName).to.eql(pm.variables.get(\"lastName\")));\r",
									"pm.test(\"locale\", () => pm.expect(jsonData.locale).to.eql(pm.variables.get(\"locale\")));\r",
									"pm.test(\"enabled\", () => pm.expect(jsonData.enabled).to.be.true);\r",
									"pm.test(\"search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"password\", () => pm.expect(jsonData._links.password[0].href).to.eql(self));\r",
									"pm.test(\"update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"register\", () => pm.expect(jsonData._links.register[0].href).to.eql(register));\r",
									"pm.test(\"forgot\", () => pm.expect(jsonData._links.forgot[0].href).to.eql(forgot));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{newPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"eMail\": \"{{eMail}}\",\n    \"firstName\": \"{{firstName}}\",\n\t\"lastName\": \"{{lastName}}\",\n    \"locale\": \"{{locale}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/user/{{user}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"duration\", () => pm.expect(pm.response.responseTime).to.be.below(250));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/user\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/user/{{user}}\");\r",
									"var register = pm.variables.replaceIn(\"{{api}}/register\");\r",
									"var forgot = pm.variables.replaceIn(\"{{api}}/forgot\");\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"user\")));\r",
									"pm.test(\"eMail\", () => pm.expect(jsonData.eMail).to.eql(pm.variables.get(\"eMail\")));\r",
									"pm.test(\"firstName\", () => pm.expect(jsonData.firstName).to.eql(pm.variables.get(\"firstName\")));\r",
									"pm.test(\"lastName\", () => pm.expect(jsonData.lastName).to.eql(pm.variables.get(\"lastName\")));\r",
									"pm.test(\"locale\", () => pm.expect(jsonData.locale).to.eql(pm.variables.get(\"locale\")));\r",
									"pm.test(\"enabled\", () => pm.expect(jsonData.enabled).to.be.true);\r",
									"pm.test(\"search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"password\", () => pm.expect(jsonData._links.password[0].href).to.eql(self));\r",
									"pm.test(\"update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"register\", () => pm.expect(jsonData._links.register[0].href).to.eql(register));\r",
									"pm.test(\"forgot\", () => pm.expect(jsonData._links.forgot[0].href).to.eql(forgot));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{newPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/user/{{user}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{newPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "{{language}}"
							}
						],
						"url": {
							"raw": "{{api}}/user/{{user}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shutdown",
			"item": [
				{
					"name": "Shutdown",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Don't wrap in pm.test for fail hard...\r",
									"pm.response.to.have.status(200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{management}}/shutdown",
							"host": [
								"{{management}}"
							],
							"path": [
								"shutdown"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{authPassword}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{authUser}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{basePassword}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{baseUser}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "proto",
			"value": "https://"
		},
		{
			"key": "host",
			"value": "127.0.0.1",
			"disabled": true
		},
		{
			"key": "port",
			"value": ":8086"
		},
		{
			"key": "server",
			"value": "{{proto}}{{host}}{{port}}"
		},
		{
			"key": "root",
			"value": "{{server}}/ModellBahn"
		},
		{
			"key": "api",
			"value": "{{root}}/api"
		},
		{
			"key": "mgmtPort",
			"value": ":8087"
		},
		{
			"key": "management",
			"value": "{{proto}}{{host}}{{mgmtPort}}/management"
		},
		{
			"key": "startRetries",
			"value": "10"
		},
		{
			"key": "startDelay",
			"value": "5000"
		},
		{
			"key": "language",
			"value": "de"
		},
		{
			"key": "testFiles",
			"value": ""
		},
		{
			"key": "achsfolgAdd",
			"value": "1C1H2T"
		},
		{
			"key": "achsfolgUpdate",
			"value": "COCO"
		},
		{
			"key": "adIndexAdd",
			"value": "1"
		},
		{
			"key": "adIndexUpdate",
			"value": "1"
		},
		{
			"key": "adSpanAdd",
			"value": "2"
		},
		{
			"key": "adSpanUpdate",
			"value": "16"
		},
		{
			"key": "adTypAdd",
			"value": "DIGITAL"
		},
		{
			"key": "adTypUpdate",
			"value": "DELTA"
		},
		{
			"key": "adAdd",
			"value": "10"
		},
		{
			"key": "adUpdate",
			"value": "80"
		},
		{
			"key": "anderungAdd",
			"value": "1"
		},
		{
			"key": "anderungUpdate",
			"value": "1"
		},
		{
			"key": "antriebAdd",
			"value": "DAMPF"
		},
		{
			"key": "antriebUpdate",
			"value": "ELEKTRO"
		},
		{
			"key": "artikelAdd",
			"value": "00001"
		},
		{
			"key": "artikelUpdate",
			"value": "00001"
		},
		{
			"key": "aufbauAdd",
			"value": "LK"
		},
		{
			"key": "aufbauUpdate",
			"value": "LK"
		},
		{
			"key": "bestellNrAdd",
			"value": "3000"
		},
		{
			"key": "bestellNrUpdate",
			"value": "3003"
		},
		{
			"key": "bahnverwaltungAdd",
			"value": "DB"
		},
		{
			"key": "bahnverwaltungUpdate",
			"value": "DBAG"
		},
		{
			"key": "cvAdd",
			"value": "8"
		},
		{
			"key": "cvUpdate",
			"value": "120"
		},
		{
			"key": "cvMaxAdd",
			"value": "63"
		},
		{
			"key": "cvMaxUpdate",
			"value": "80"
		},
		{
			"key": "cvMinAdd",
			"value": "0"
		},
		{
			"key": "cvMinUpdate",
			"value": "1"
		},
		{
			"key": "cvValueAdd",
			"value": "30"
		},
		{
			"key": "cvValueUpdate",
			"value": "50"
		},
		{
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"key": "decoderHerstellerAdd",
			"value": "ESU"
		},
		{
			"key": "decoderHerstellerUpdate",
			"value": "ESU"
		},
		{
			"key": "decoderBestellNrAdd",
			"value": "62400"
		},
		{
			"key": "decoderBestellNrUpdate",
			"value": "62499"
		},
		{
			"key": "decoderBezeichnungAdd",
			"value": "LokSound M4"
		},
		{
			"key": "epochAdd",
			"value": "IV"
		},
		{
			"key": "epochUpdate",
			"value": "IV"
		},
		{
			"key": "fahrstufeAdd",
			"value": "27"
		},
		{
			"key": "fahrstufeUpdate",
			"value": "128"
		},
		{
			"key": "fnFuntionAdd",
			"value": "F0"
		},
		{
			"key": "fnFuntionUpdate",
			"value": "F0"
		},
		{
			"key": "fnReiheAdd",
			"value": "1"
		},
		{
			"key": "fnReiheUpdate",
			"value": "1"
		},
		{
			"key": "gattungAdd",
			"value": "BR89.0"
		},
		{
			"key": "gattungUpdate",
			"value": "BR89.0"
		},
		{
			"key": "herstellerAdd",
			"value": "MARKLIN"
		},
		{
			"key": "herstellerUpdate",
			"value": "MARKLIN"
		},
		{
			"key": "iMaxAdd",
			"value": "1.5"
		},
		{
			"key": "iMaxUpdate",
			"value": "2.0"
		},
		{
			"key": "kategorieAdd",
			"value": "LOKOMOTIV"
		},
		{
			"key": "kategorieUpdate",
			"value": "AUSGESTALTUNG"
		},
		{
			"key": "kupplungAdd",
			"value": "RELEX"
		},
		{
			"key": "kupplungUpdate",
			"value": "RELEX"
		},
		{
			"key": "konfigurationAdd",
			"value": "CV"
		},
		{
			"key": "konfigurationUpdate",
			"value": "STECKER"
		},
		{
			"key": "leistungsubertragungAdd",
			"value": "MECHANISH"
		},
		{
			"key": "leistungsubertragungUpdate",
			"value": "ELEKTRISH"
		},
		{
			"key": "lichtAdd",
			"value": "L1V"
		},
		{
			"key": "lichtUpdate",
			"value": "L1V"
		},
		{
			"key": "massstabAdd",
			"value": "H0"
		},
		{
			"key": "massstabUpdate",
			"value": "H0"
		},
		{
			"key": "motorTypAdd",
			"value": "CSINUS"
		},
		{
			"key": "motorTypUpdate",
			"value": "CSINUS"
		},
		{
			"key": "protokollAdd",
			"value": "MFX"
		},
		{
			"key": "protokollUpdate",
			"value": "DELTA"
		},
		{
			"key": "sondermodellAdd",
			"value": "MM"
		},
		{
			"key": "sondermodellUpdate",
			"value": "MM"
		},
		{
			"key": "spurweiteAdd",
			"value": "H0"
		},
		{
			"key": "spurweiteUpdate",
			"value": "H0"
		},
		{
			"key": "steckerAdd",
			"value": "NEM651"
		},
		{
			"key": "steckerUpdate",
			"value": "NEM652"
		},
		{
			"key": "steuerungAdd",
			"value": "DIGITAL"
		},
		{
			"key": "steuerungUpdate",
			"value": "DIGITAL"
		},
		{
			"key": "teilHerstellerAdd",
			"value": "MARKLIN"
		},
		{
			"key": "teilBestellNrAdd",
			"value": "600300"
		},
		{
			"key": "teilKategorieAdd",
			"value": "ERSATZTEIL"
		},
		{
			"key": "teilUnterKategorieAdd",
			"value": "BURSTEN"
		},
		{
			"key": "unterKategorieAdd",
			"value": "DAMPF"
		},
		{
			"key": "unterKategorieUpdate",
			"value": "HECKEN"
		},
		{
			"key": "teilBezeichnungAdd",
			"value": "Bürsten"
		},
		{
			"key": "vorbildAdd",
			"value": "HECKEN"
		},
		{
			"key": "vorbildUpdate",
			"value": "HECKEN"
		},
		{
			"key": "zugAdd",
			"value": "BAVARIA"
		},
		{
			"key": "zugUpdate",
			"value": "BAVARIA"
		},
		{
			"key": "zugTypAdd",
			"value": "TEE"
		},
		{
			"key": "zugTypUpdate",
			"value": "TEE"
		},
		{
			"key": "imageFile",
			"value": "{{testFiles}}3000.jpg"
		},
		{
			"key": "anleitungFile",
			"value": "{{testFiles}}3000_betrieb.pdf"
		},
		{
			"key": "explosionszeichnungFile",
			"value": "{{testFiles}}3000_explo.pdf"
		},
		{
			"key": "xlFile",
			"value": "{{testFiles}}3000xl.jpg"
		},
		{
			"key": "landAdd",
			"value": "DE"
		},
		{
			"key": "landUpdate",
			"value": "NL"
		},
		{
			"key": "telefonAdd",
			"value": "+497161608222"
		},
		{
			"key": "telefonUpdate",
			"value": "030 2341347"
		},
		{
			"key": "abbildungCsv",
			"value": "{{testFiles}}abbildungCsv.csv"
		},
		{
			"key": "anderungCsv",
			"value": "{{testFiles}}anderungCsv.csv"
		},
		{
			"key": "artikelCsv",
			"value": "{{testFiles}}artikelCsv.csv"
		},
		{
			"key": "bahnverwaltungCsv",
			"value": "{{testFiles}}bahnverwaltungCsv.csv"
		},
		{
			"key": "consistCsv",
			"value": "{{testFiles}}consistCsv.csv"
		},
		{
			"key": "decoderCsv",
			"value": "{{testFiles}}decoderCsv.csv"
		},
		{
			"key": "decoderAdressCsv",
			"value": "{{testFiles}}decoderAdressCsv.csv"
		},
		{
			"key": "decoderCvCsv",
			"value": "{{testFiles}}decoderCvCsv.csv"
		},
		{
			"key": "decoderFunktionCsv",
			"value": "{{testFiles}}decoderFunktionCsv.csv"
		},
		{
			"key": "decoderTypCsv",
			"value": "{{testFiles}}decoderTypCsv.csv"
		},
		{
			"key": "decoderTypAdressCsv",
			"value": "{{testFiles}}decoderTypAdressCsv.csv"
		},
		{
			"key": "decoderTypCvCsv",
			"value": "{{testFiles}}decoderTypCvCsv.csv"
		},
		{
			"key": "decoderTypFunktionCsv",
			"value": "{{testFiles}}decoderTypFunktionCsv.csv"
		},
		{
			"key": "herstellerCsv",
			"value": "{{testFiles}}herstellerCsv.csv"
		},
		{
			"key": "namedCsv",
			"value": "{{testFiles}}namedCsv.csv"
		},
		{
			"key": "produktCsv",
			"value": "{{testFiles}}produktCsv.csv"
		},
		{
			"key": "teilCsv",
			"value": "{{testFiles}}teilCsv.csv"
		},
		{
			"key": "unterKategorieCsv",
			"value": "{{testFiles}}unterKategorieCsv.csv"
		},
		{
			"key": "vorbildCsv",
			"value": "{{testFiles}}vorbildCsv.csv"
		},
		{
			"key": "zugCsv",
			"value": "{{testFiles}}zugCsv.csv"
		}
	]
}