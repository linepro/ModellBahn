{
	"info": {
		"_postman_id": "4045950e-285b-4e96-b90d-4db82413e5e8",
		"name": "ModellBahn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Enums",
			"item": [
				{
					"name": "Adress Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89265004-d0b7-4307-bc1a-fabb24b5d42b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/adressTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"adressTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderungs Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfe94c82-abc3-49f0-add4-834bc7b39328",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/anderungsTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"anderungsTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce8348f8-072a-40fa-bc38-18574a31452b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Konfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2721e6e-e66f-4622-8920-63469d9eead2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/konfiguration",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"konfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "leistungsubertragung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cd9bebd-775c-47c7-b562-a5c21f2d5f72",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/leistungsubertragung",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"leistungsubertragung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73d9a574-a232-46d6-ad28-3ae29670f877",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stecker",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2408c1-4dae-4abe-92ca-95530b90b4d5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/stecker",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"stecker"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Achsfolg",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25dd66e0-b178-4c7a-8a4a-6e6b6060566c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.achsfolg.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.achsfolg.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.achsfolg.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da2bffe7-2361-4c7b-956b-7cfd6db3dfc4",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "79ea5a73-969f-412e-aba7-dee5fe6f3c49",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "939f8e90-a3cd-4c55-8673-e70e5e26ca87",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "532911d5-d3c2-45be-822f-acfe02e9f4d0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7554603f-c6fb-452e-bdd4-03173076ca60",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d866c579-36cc-4fb2-8f56-a9abdd5a1aff",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Antrieb",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e981ee3-dd41-46c4-9c65-599eea1ad717",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.antrieb.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.antrieb.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.antrieb.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87ae0d2e-0ef2-413e-8f36-ffe708b901e9",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e3715b5-bdaf-4da4-9f4e-b708b867ff7c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "638f193c-3a7b-4038-a9ed-7efaebd80a60",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9be72e6-7038-4277-8fae-3f67216cb8e8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31adae8d-fe4a-49c7-992f-0f1df20ae5e3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76109343-c911-44c9-bfc0-12b9f4ed5dae",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Aufbau",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36d75bcd-5a76-4f7d-965e-d1b6544974ae",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.aufbau.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.aufbau.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.aufbau.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9edafea2-f5bb-424b-8638-5ed764dbbdcd",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9a1d5de-6d0c-4986-a85e-d7d4d2ffff3e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86c7da99-30c1-4d79-a64e-6bb40ded4882",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6d27c96-97e8-435e-9130-7352a29aee47",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d070f96f-8ec0-4152-be19-35bd50730238",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e300a511-67ef-4f82-bb7c-b51e3fff7958",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ed0bfaf-b34b-4254-b151-87dfaac41fbe",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98e7fdb6-d5ec-4cc7-97a4-36b439253300",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bahnverwaltung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f8e570e-fe37-435a-9ced-60312416a171",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.bahnverwaltung.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.bahnverwaltung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.bahnverwaltung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d72ba568-29eb-4dd1-8a3d-db56182583b4",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6aa5603d-8c09-47d5-b5d6-e7ab26e17e6a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7231c21-927d-49f6-9f15-f187eecb5bb4",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8495ced-ca64-49a4-97f6-ea13cb8abef5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0bb16ce-2d15-4c3d-afbf-c429e824521b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b8aa962-967c-4448-a72e-f094b3a47f03",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Epoch",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd1fc2a4-b5e2-4cac-9804-9b7516c7bae8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.epoch.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.epoch.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.epoch.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb429d3c-0ca4-4445-af9b-54ff95166f08",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "909d22c5-7212-4ed2-a3bf-11b2f7de4601",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6717eac-1f33-46e0-98eb-2831f53b509c",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "333a1f57-2427-4aeb-b00c-a73de260f8c8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b84e808f-b06c-4961-8fad-e20c69009298",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7275c92b-b7dd-47c2-995e-a7b38d895ab6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Gattung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9734323-afae-42b0-b093-7c7d98c494c1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.gattung.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.gattung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.gattung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6f32d4a-eb0b-41b6-804f-0e618e59472b",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "82d7a2f5-f10d-4038-8563-ef934d7e0b8b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e92a0973-3255-42e2-add9-c981a82fdf72",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d33a0c67-637a-4c28-9b0f-d5368a2a7c7d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cc445b9-b375-458e-a339-c96f2835aeb2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d28c47c8-0527-4850-93d8-baf874776cbb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Hersteller",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4e532a3-9e2b-4696-b3b4-45e33adb71e9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.hersteller.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.hersteller.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.hersteller.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6505892-ee7a-43e1-8d9e-cc0166af0344",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landAdd\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonAdd\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5b90ee4-8f23-4ea7-a8d2-d024b6cc4f1e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b0144f17-bcb1-4bbd-b1bc-6f40ebe32aff",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landUpdate\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonUpdate\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc018301-d0c0-42c6-94dc-7b6bd29bde0e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d748e2b-e904-4952-8013-de7c35762fa8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b75fb13b-54b3-40ee-ab36-35cabcf7886f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Kupplung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0a8e564-df8e-4086-a985-a900da3bb151",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kupplung.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kupplung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kupplung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d571ce3-18ef-46c8-91f7-05b49e5cab98",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9dab7462-afb2-43c2-a356-3d50c85511cf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "569a239e-1cc3-4940-9346-aaf0217ea356",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "647838b8-82bd-4ce4-aa2a-e1c3e0ddf5d7",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7fb6b15-a51a-4b5b-8ae6-5eaeb457272f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3c8eb85-9587-4551-a333-b5b4249f9a12",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47f69203-869d-4cf4-9eda-91baf8d02c73",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f77fa161-11e3-4998-85d2-4b24f92d8f41",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Licht",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "263fbb9a-e227-4903-b535-a6924399d5ac",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.licht.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.licht.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.licht.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cab660ac-46a8-459e-b3de-385731766790",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0f5d43fb-9382-4e9a-94b8-1be885834249",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72bb46fd-5589-4dcf-8e02-16f1131ef24e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00bfa5a5-1d11-4794-a744-f8ae3de40515",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bede05a-6b12-4d0e-acd3-98a6a0e03c72",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3309905-4aeb-4caa-b645-dbfee88cc6f8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a84412ee-4165-4025-9200-571c82382a6b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2d936df-567e-48f2-835a-9cf4da34dcc3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Massstab",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5016f6df-823c-47f4-9316-237d8ce167a6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.massstab.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.massstab.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.massstab.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d83d10ee-a3f0-4a1d-80c5-5299c76e9dbd",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0e44bf51-b6fb-4262-85a5-2187902a8d23",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9adfa72f-ab68-4fe9-a519-f9f34b1771cb",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf3b6c11-9694-4568-ba43-80bdb0fe3ee4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1e9deef-3c8b-4209-b710-74078e06b3e2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4492397f-b40c-41a4-aa99-e4e5239fa85c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Motor Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52ad88a8-208a-451d-b0f8-ae0593ee4e39",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.motorTyp.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.motorTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.motorTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aea38f11-208a-40fb-bd0f-17ca86dc03db",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "65a12a7a-bbe3-44c2-a482-cf186fdb2183",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6a287b8-46ca-4aab-bc11-5457d3425827",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f63c9c4f-2c11-4907-b8db-06f5db6a5e40",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33125ce2-3ef6-4874-ba9c-9a0825d44bb3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50dc3446-51c2-4497-91c9-510abf0dd010",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Protokoll",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77ab290b-cd69-4ed0-8a2c-7f8d0b2ab666",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.protokoll.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.protokoll.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.protokoll.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dac160be-abcf-4332-b7e1-2801266d015e",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8c2c4bbc-56cf-485c-b0d1-350f12806ea0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5220d817-988e-45c8-94f9-0a15b29a1ca5",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef44c5fa-9914-482c-a793-08d27f6ade51",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86b73b39-0727-44ea-9105-7f59f044c735",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7f326e4-a4ce-4bb4-baa5-d33e69988718",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sondermodell",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f7a0d38-caa1-4f27-bc67-79cd4ee276c9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.sondermodell.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.sondermodell.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.sondermodell.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "97618d4e-ef59-48fe-9f33-663a6290bc39",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d4a4fa19-6429-4613-9785-2013637b085d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e0c96448-c9d8-4dcc-b16d-47df04f4f75b",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa04be2a-1fb3-493e-9cd8-f431fe7787d3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf43147c-5966-44d1-8989-04c01cda8aaa",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5089088-8608-44af-a084-68b9d2685df1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Spurweite",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "567373a6-edcb-4e63-b383-90c56893f83e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.spurweite.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.spurweite.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.spurweite.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "71726233-0117-489d-a136-738849bc3287",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa76f953-78f3-4c49-bba0-3e9f84efd4c4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2d52744-ac11-4072-8f14-ad47fe10772c",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c260887a-fa08-44ac-981c-5db5559fc075",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06c26897-1998-4937-a9fa-217842e3e980",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebf9464b-3b9a-4201-abb2-44dbf8b68412",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Steuerung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e916350f-f934-4099-ab41-f55287a0ac7e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.steuerung.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.steuerung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.steuerung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "878ec40c-884d-4b2c-8d83-65d03a5a6f6b",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e4f52da8-e8c6-41ba-8670-b8dc20a30e96",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce5321b6-2050-4301-aaf6-cb7a9cea8da6",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a486a7a8-c7cc-43a3-8974-7d8008fed7ce",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b269788f-29d3-4b96-8c85-15ade715ac45",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "668a468a-de63-4540-a1e2-d5ef886ee2c1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zug Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3276e45-08e4-404d-8690-85367bcf74b3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.zugTyp.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.zugTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.zugTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68cc6026-e31c-4459-8624-eb669ecccd80",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ec44bb8-b9a2-49e9-8f38-41d172ba5176",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f2c29fe-e2f3-4a12-b359-8859be0bdda9",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "295ad6ad-b5ac-4f22-a3dd-7fdcdf6ec771",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33eb3a07-1f63-4171-92f3-adf8df7cc3d2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b632780-e8bb-40ce-9fa0-e951b4a15c7e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Kategorie",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfaf08fb-7ca3-4c90-a3bb-97fd7f83e727",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kategorie.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"unterKategorien\", () => pm.expect(a.unterKategorien).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(a._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0392176e-04a8-4eb4-a69b-28e3decd0199",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kategorie.forEach(function(k) { \r",
									"    var self = root + \"/\" + k.name;\r",
									"    pm.test(\"name: \" + k.name, () => pm.expect(k.name).to.be.oneOf([\"AUSGESTALTUNG\",\"BELEUCHTUNG\"]));\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(k.bezeichnung).to.exist);\r",
									"    k.unterKategorien.forEach(function(u){\r",
									"        pm.expect(u.kategorie).to.eql(k.name);\r",
									"        pm.expect(u.name).to.exist;\r",
									"        pm.expect(u.bezeichnung).to.exist;\r",
									"        pm.expect(u.deleted).to.be.false;\r",
									"        pm.expect(u._links.parent[0].href).to.eql(self);\r",
									"        pm.expect(u._links.update[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"        pm.expect(u._links.delete[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"    });\r",
									"    pm.test(\"deleted\", () => pm.expect(k.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(k._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(k._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(k._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(k._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(k._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(k._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"root = pm.variables.replaceIn(\"{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG\");\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG",
							"host": [
								"{{api}}"
							],
							"path": [
								"unterKategorien"
							],
							"query": [
								{
									"key": "kategorien",
									"value": "AUSGESTALTUNG,BELEUCHTUNG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93b37877-fb87-4942-b75d-f95cb4cbc263",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14a4f552-290b-4c70-8506-aa645c013f6a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(undefined));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7df204ce-f694-489c-ae4d-fff870b53849",
								"exec": [
									"pm.environment.set(\"unterAdd\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a00d282-157c-4c0b-9108-c19fb528bf30",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd91d104-a672-407d-bf57-f544b918e958",
								"exec": [
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cfe1538-3992-45e7-b9e0-6b4b18adcbd4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef1dafed-8007-466c-b9c4-2396ad598081",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c04e1690-ff83-4744-9af8-73eb807b2f8f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90d44bba-0294-4a65-8816-1bec5b6d08d7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3390a895-18ae-40e3-9376-8f61e3826173",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c9b2fcd-dac8-455f-b8e9-11309ac4eed3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Vorbild",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "218ed3ae-ca9f-427e-8696-b1aacba33936",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.vorbild.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"gattung\", () => pm.expect(a.gattung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.vorbild.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.vorbild.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be1b06c8-f851-4f1f-9c21-990bc5452b7a",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungAdd}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieAdd}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieAdd}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungAdd}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebAdd}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgAdd}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungAdd}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3245bc8-eb99-4c9a-9171-a1ecd5e2a7e9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09dab14a-4164-4e61-9d34-f86f14e69574",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b26e533a-6805-4140-ba24-b9141119c2e5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4f53b77-02b8-4c66-916b-d219a60a2b6f",
								"exec": [
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungUpdate}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieUpdate}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieUpdate}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungUpdate}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebUpdate}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgUpdate}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungUpdate}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f001f68-6995-4237-aa43-fe160bef3bf3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "daffaa3f-045c-4055-96a5-d83144946fb3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f44bc86a-7f73-4d96-a05b-b354fec835bb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Decoder Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5169616c-f65b-41c9-8df7-d38fdc89158c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.decoderTyp.forEach((a) => { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"    pm.test(\"_links.adress\", () => pm.expect(a._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"    pm.test(\"_links.cv\", () => pm.expect(a._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"    pm.test(\"_links.funktion\", () => pm.expect(a._links.funktion[0].href).to.eql(self+\"/funktion\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.decoderTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.decoderTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49682200-6579-4cbd-a9ef-b7f4b7ea20b3",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxAdd\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollAdd\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeAdd\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(true));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationAdd\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerAdd\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7fa878b5-8947-46d1-b6f9-86863ab5e5e9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": {{gerausch}},\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdeb0a49-183b-4070-a5dd-e173eec590bb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbc16176-1e43-459d-8eaa-2e25a1e934b0",
								"exec": [
									"pm.environment.set(\"adIndex\", new Number(pm.variables.get(\"adIndexAdd\")));\r",
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypAdd\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanAdd\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "357c7529-44fc-487c-8b13-070300ab540a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "02e851dd-d0f8-47f4-a659-5b6a54b17f5e",
								"exec": [
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypUpdate\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanUpdate\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b67f69c8-93be-4dd6-a3e7-a1f28e3dd0ac",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65872791-adfd-48e3-a8ed-1614cdb8d475",
								"exec": [
									"pm.environment.set(\"cv\", new Number(pm.variables.get(\"cvAdd\")));\r",
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinAdd\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxAdd\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "280f7dec-c259-4a2a-aad3-8085216f9b51",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "13d96bd6-e520-4e08-8989-aaa9178af066",
								"exec": [
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinUpdate\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxUpdate\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4fe9147-9313-4d7d-ae17-ab0e534a9704",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9c8e220-4cfe-433e-940b-e6350052829d",
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheAdd\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionAdd\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(true));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acbc8b4c-236a-4cd1-b7ea-ddd4512e149a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "455f4e40-1d62-4683-9ee8-a380d0e51a46",
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheUpdate\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionUpdate\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(false));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc6033f5-f563-4f53-8d0f-d0c4c92c4ba3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b50281a7-01d9-405f-90a4-cbe3b9e790ad",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxUpdate\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollUpdate\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeUpdate\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(false));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationUpdate\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerUpdate\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0cdfd7e9-64eb-4422-b8df-72779391194d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": false,\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eadc4a01-e44d-47f5-81d2-404bb7d7bc71",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0408dc8-a566-4123-b705-840ab27d647f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4006224-7463-412b-b580-e5eb6bf422d7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete CV",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c1eaec8-8d4b-49fd-9641-afd655d92676",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c870d96-78ce-4c34-9ac9-209f5dafe176",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d6eee11-1013-4f8c-8112-663c24b01430",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Produkt",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35613d0f-a4b0-4fcf-a4c9-f67e17c4a73f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.produkt.forEach((a) => { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.grossansicht\", () => pm.expect(a._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"    pm.test(\"_links.explosionszeichnung\", () => pm.expect(a._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"    pm.test(\"_links.teil\", () => pm.expect(a._links.teil[0].href).to.eql(self + \"/teilen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.produkt.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.produkt.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3421044-7251-4c98-9766-bf25fd7e4617",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieAdd\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieAdd\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabAdd\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteAdd\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochAdd\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungAdd\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungAdd\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgAdd\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellAdd\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauAdd\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtAdd\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungAdd\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31c577e4-37a6-462c-ad69-be81c4492bc8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\"))));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderHersteller\": \"{{decoderHersteller}}\",\n    \"decoderBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2198c65-0b67-4892-92d7-8ed396d6d1de",
								"exec": [
									"pm.test(\"response\", () => pm.test(\"response\", () => pm.response.to.have.status(202)));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Grossansicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d781d6a8-4a7e-47e7-a97c-98228f812d25",
								"exec": [
									"pm.test(\"response\", () => pm.test(\"response\", () => pm.response.to.have.status(202)));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "{{language}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"grossansicht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "662c1768-1848-4c94-b8f7-5e3cb881a4ad",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60056f96-0374-424c-8366-3ccc76c511c6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "explosionszeichnung",
									"type": "file",
									"src": "{{explosionszeichnungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57ae168f-f977-4f34-b61d-9a8e9ccde0f3",
								"exec": [
									"pm.environment.set(\"teilHersteller\", pm.variables.get(\"teilHerstellerAdd\"));\r",
									"pm.environment.set(\"teilBestellNr\", pm.variables.get(\"teilBestellNrAdd\"));\r",
									"pm.environment.set(\"teilBezeichnung\", pm.variables.get(\"teilBezeichnungAdd\"));\r",
									"pm.environment.set(\"teilKategorie\", pm.variables.get(\"teilKategorieAdd\"));\r",
									"pm.environment.set(\"teilUnterKategorie\", pm.variables.get(\"teilUnterKategorieAdd\"));\r",
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "26c1c930-8bf3-4072-bb1b-b399a98f012d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"teilHersteller\": \"{{teilHersteller}}\",\n    \"teilBestellNr\": \"{{teilBestellNr}}\",\n    \"bezeichnung\": \"{{teilBezeichnung}}\",\n    \"kategorie\": \"{{teilKategorie}}\",\n    \"unterKategorie\": \"{{teilUnterKategorie}}\",\n    \"anzahl\": {{teilAnzahl}},\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43cb8b9a-c352-43c5-94e7-1420df3ffd99",
								"exec": [
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccd7d8a0-c6e5-4750-b7cd-daaded6ab02d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}?anzahl={{teilAnzahl}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							],
							"query": [
								{
									"key": "anzahl",
									"value": "{{teilAnzahl}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a26a04ff-a97a-42b4-9fac-4ba272fae5ee",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerUpdate\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8459d02-de2d-4f68-88b4-70b00a2ff52e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderTypHersteller\": \"{{decoderHersteller}}\",\n    \"decoderTypBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f36c2c1-a95b-4f03-8d03-b8c77a4a5f71",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "365485bc-fc7e-4e42-908d-97511ed4c99e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "476a67b6-62ad-4e4e-825f-45625afe6c66",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var grossansicht = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(grossansicht));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Grossansicht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1096568-6dc1-4645-9d2d-842e4805cfae",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/grossansicht",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"grossansicht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f83d971b-4f72-459b-be52-eaec2839cbaa",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f1c8698-9d0a-4992-acdf-32c78793a4ba",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"grossansicht\", () => pm.expect(jsonData.grossansicht).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.grossansicht\", () => pm.expect(jsonData._links.grossansicht[0].href).to.eql(self + \"/grossansicht\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01167018-ccd0-49fb-a620-c62ffb58f5af",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Decoder",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c31695b2-e4dd-4c36-968d-5d53dc801777",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.decoder.forEach((a) => { \r",
									"    var self = root + \"/\" + a.decoderId;\r",
									"    var add = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"decoderId: \" + a.decoderId, () => pm.expect(a.decoderId).to.exist);\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"status\", () => pm.expect(a.status).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(add));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.decoder.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.decoder.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e7c2825-4fa9-4cef-b79c-2afd44a8f3f8",
								"exec": [
									"pm.environment.set(\"hersteller\", \"ESU\");\r",
									"pm.environment.set(\"bestellNr\", \"62400\");\r",
									"pm.environment.set(\"bezeichnung\", \"LokSound M4\");\r",
									"pm.environment.set(\"iMax\", new Number(\"1.1\"));\r",
									"pm.environment.set(\"protokoll\", \"MFX\");\r",
									"pm.environment.set(\"fahrstufe\", new Number(\"28\"));\r",
									"pm.environment.set(\"sound\", new Boolean(\"true\"));\r",
									"pm.environment.set(\"konfiguration\", \"CV\");\r",
									"pm.environment.set(\"stecker\", \"NEM652\");\r",
									"pm.environment.set(\"status\",\"FREI\");\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"anleitungen\", pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\"));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "788fdf9d-2ef1-481e-8bee-94735621a989",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(pm.variables.get(\"anleitungen\")));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(1));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(\"Primary\"));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(1));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(\"DIGITAL\"));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(1));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(1));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(1));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(\"Adresse\"));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(1));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(80));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(3));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(\"F0\"));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(\"Funktion 0\"));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"decoderId\": \"{{decoderId}}\",\r\n    \"hersteller\": \"{{decoderHersteller}}\",\r\n    \"bestellNr\": \"{{decoderBestellNr}}\",\r\n    \"bezeichnung\": \"{{bezeichnung}}\",\r\n    \"protokoll\": \"{{protokoll}}\",\r\n    \"fahrstufe\": \"{{fahrstufe}}\",\r\n    \"kaufdatum\": \"{{kaufdatum}}\",\r\n    \"wahrung\": \"{{wahrung}}\",\r\n    \"preis\": {{preis}},\r\n    \"anmerkung\": \"{{anmerkung}}\",\r\n    \"status\": \"{{status}}\",\r\n\t\"deleted\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoder/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b76d5dd-effa-4ff8-a8c8-0af6237c36e2",
								"exec": [
									"pm.environment.set(\"adIndex\", 1);\r",
									"pm.environment.set(\"adBezeichnung\", \"Primary\");\r",
									"pm.environment.set(\"adSpan\", 1);\r",
									"pm.environment.set(\"adAdressTyp\", \"DIGITAL\");\r",
									"pm.environment.set(\"adWerkseinstellung\", 1);\r",
									"pm.environment.set(\"adAdress\", 30);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "72a55cbc-eeef-4ab3-9950-84e45fb93f15",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/adress/{{adIndex}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adress\", () => pm.expect(jsonData.adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/adress/{{adIndex}}?adress={{adAdress}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"adress",
								"{{adIndex}}"
							],
							"query": [
								{
									"key": "adress",
									"value": "{{adAdress}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "152d0377-381a-4dba-9de8-69a0e859cf84",
								"exec": [
									"pm.environment.set(\"cvCv\", 1);\r",
									"pm.environment.set(\"cvBezeichnung\", \"Adresse\");\r",
									"pm.environment.set(\"cvMinimal\", 1);\r",
									"pm.environment.set(\"cvMaximal\", 80);\r",
									"pm.environment.set(\"cvWerkseinstellung\", 3);\r",
									"pm.environment.set(\"cvWert\", 45);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e7e5dab-ca27-4758-b4ee-1a46a1785a72",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/cv/{{cvCv}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"wert\", () => pm.expect(jsonData.wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/cv/{{cvCv}}?wert={{cvWert}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"cv",
								"{{cvCv}}"
							],
							"query": [
								{
									"key": "wert",
									"value": "{{cvWert}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bba34a96-4a1b-49ad-81db-213338c42c15",
								"exec": [
									"pm.environment.set(\"fnReihe\", 1);\r",
									"pm.environment.set(\"fnFunktion\", \"F0\");\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45dfa453-0664-4c2c-a493-d66bed7fab38",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(false));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/funktion/{{fnReihe}}/{{fnFunktion}}?bezeichnung={{fnBezeichnung}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							],
							"query": [
								{
									"key": "bezeichnung",
									"value": "{{fnBezeichnung}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "639a2cf8-7339-4b46-8d93-e1105e2f96bb",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"protokoll\", \"DCC\");\r",
									"pm.environment.set(\"fahrstufe\", 28);\r",
									"pm.environment.set(\"status\", \"BASTLER\");\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c91304e-0162-48f1-a3e4-aca7f877963f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(pm.variables.get(\"anleitungen\")));pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"decoderId\": \"{{decoderId}}\",\n    \"hersteller\": \"{{decoderHersteller}}\",\n    \"bestellNr\": \"{{decoderBestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": \"{{fahrstufe}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"status\": \"{{status}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6acaed58-9ef6-480c-963f-795f0bf2a6ce",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(pm.variables.get(\"anleitungen\")));pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc2e3aba-d2a6-49ba-9637-e5510ecc2686",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Artikel",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44565246-7213-4382-a13d-c5fb66683225",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.artikel.forEach((a) => { \r",
									"    var self = root + \"/\" + a.artikelId;\r",
									"    pm.test(\"artikelId: \" + a.artikelId, () => pm.expect(a.artikelId).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"anderungen\", () => pm.expect(a.anderungen).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.anderung\", () => pm.expect(a._links.anderung[0].href).to.eql(self + \"/anderungen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.artikel.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.artikel.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7ca9c03-5710-42ff-bc0d-0228ca08b24f",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNrAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"unterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"lange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"massstab\", \"H0\");\r",
									"pm.environment.set(\"spurweite\", \"H0\");\r",
									"pm.environment.set(\"epoch\", \"III\");\r",
									"pm.environment.set(\"bahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"gattung\", \"BR89.0\");\r",
									"pm.environment.set(\"betreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"achsfolg\", \"CH2T\");\r",
									"pm.environment.set(\"aufbau\", \"LK\");\r",
									"pm.environment.set(\"licht\", \"L1V\");\r",
									"pm.environment.set(\"kupplung\", \"RELEX\");\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\"));\r",
									"pm.environment.set(\"status\", \"GEKAUFT\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6af62cca-21b4-43d0-9996-4dc72368cc3f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"artikelId\", jsonData.artikelId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": false\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d76cab2-942c-4731-8993-454df8afbdb4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "41a1df06-2a07-4c9f-a091-3eda0e254c33",
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"UMGEBAUT\");\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStatus\", \"GEKAUFT\");\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0416661-1a4a-443b-9703-75f17a611e9a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"anderungId\", jsonData.anderungId);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c01861fe-24e3-446c-b677-80aec0c307c5",
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"REPARIERT\");\r",
									"pm.environment.set(\"anBezeichnung\",  pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d50e2a0-6b4f-4743-a15f-943e860df684",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39067aaa-6cba-4954-b658-88ba6dbc8972",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerUpdate\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNr\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"//pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"//pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"//pm.environment.set(\"lange\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"//pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"//pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"//pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"//pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"//pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"//pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"//pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"//pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"//pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"status\", \"BASTELN\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3747755b-fca4-4310-82a6-089a3c9b00ca",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"artikelId\": \"{{artikelId}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cf13979-8030-47e0-b55e-8b4bb7ab2dd4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "003dd303-76b3-4c71-90ce-27aed4724f1f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b8e1f8f-30df-4aec-b20f-88fade33216e",
								"exec": [
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cde0e0b-f93e-46e1-8be8-56746dd31749",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceb4eca6-4067-47ac-9a9b-49263d9cf393",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zug",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e3817ab-de3e-4f62-a0e8-ebf059c0d097",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.zug.forEach((a) => { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name: \" + a.name, () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.consist\", () => pm.expect(a._links.consist[0].href).to.eql(self+\"/consist\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.zug.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.zug.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ac4e1ee-db15-4eb1-8177-e3c04f3766cf",
								"exec": [
									"pm.environment.set(\"zug\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5aefe477-c74f-402b-bb01-0c9c56ad15af",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.consist\", () => pm.expect(jsonData._links.consist[0].href).to.eql(self+\"/consist\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "237369bc-c1b5-4fd2-a4ae-fad361ad508f",
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00001\");\r",
									"pm.environment.set(\"cnPosition\", 1);\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"3000\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BR 89.0\");\r",
									"pm.environment.set(\"cnKategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"cnUnterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BR89.0\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");\r",
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{cnHersteller}}/{{cnBestellNr}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5475e83f-9158-4851-836c-19ad0ffeddcf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"cnPosition\", jsonData.position);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(\"abbildung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "737403e8-af3e-4403-a061-961cb865381c",
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00002\");\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"4007\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BI\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BI\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"29 758 Stg\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");\r",
									"pm.environment.set(\"abbildung\", pm.variables.replaceIn(\"{{server}}/produkt/{{cnHersteller}}/{{cnBestellNr}}/abbildung.jpg\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bfc23de5-7e54-47b5-b3a5-af8785647b8c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(pm.variables.get(\"abbildung\"))));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist/{{cnPosition}}?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist",
								"{{cnPosition}}"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fdd3cdbd-1484-47ff-ac98-fa864216d5b0",
								"exec": [
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypUpdate\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5596b42-5899-4419-9d4b-ec915c0d7433",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"consist[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"consist[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"consist[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"consist[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"consist[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"consist[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"consist[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"consist[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"consist[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"consist[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"consist[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.exist);\r",
									"pm.test(\"consist[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"consist[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"consist[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"consist[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36fcf662-d21e-49df-936c-751eca643e2b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"consist[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"consist[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"consist[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"consist[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"consist[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"consist[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"consist[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"consist[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"consist[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"consist[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"consist[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"consist[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"consist[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"consist[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"consist[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39f75f01-2d08-4a98-8d62-3205dcf58d46",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist/1",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09523eba-4e3d-4d06-8763-9b529d5e7450",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Open Api",
			"item": [
				{
					"name": "Get Docs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fc3d2af-3515-44b7-9a0a-2daec9adca64",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"openapi\", () => pm.expect(jsonData.openapi).to.eql( \"3.0.1\"));\r",
									"pm.test(\"info\", () => {\r",
									"    pm.expect(jsonData.info.title).to.eql(\"ModellBahn API\");\r",
									"\tpm.expect(jsonData.info.description).to.eql(\"ModellBahn datastore\");\r",
									"\tpm.expect(jsonData.info.license.name).to.eql(\"MIT License\");\r",
									"\tpm.expect(jsonData.info.license.url).to.eql(\"http://www.opensource.org/licenses/mit-license.php\");\r",
									"\tpm.expect(jsonData.info.version).to.eql(\"1.0.0\");\r",
									"\t});\r",
									"pm.test(\"externalDocs\", () => {\r",
									"\tpm.expect(jsonData.externalDocs.description).to.eql(\"ModellBahn datastore\");\r",
									"\tpm.expect(jsonData.externalDocs.url).to.eql(\"https://github.com/linepro/ModellBahn/docs\");\r",
									"    });\r",
									"pm.test(\"servers\", () => {\r",
									"\tpm.expect(jsonData.servers[0].url).to.eql(pm.variables.replaceIn(\"{{server}}/ModellBahn/v3/a\"));\r",
									"\tpm.expect(jsonData.servers[0].description).to.eql(\"Generated server url\");\r",
									"\t});\r",
									"pm.test(\"paths\", () => {\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/achsfolg\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/achsfolg/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/antrieb\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/antrieb/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/anderungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/anderungen/{anderungId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/bahnverwaltung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/bahnverwaltung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/funktion/{reihe}/{funktion}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/adress/{index}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/cv/{cv}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/anleitungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/cv/{cv}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/funktion/{reihe}/{funktion}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/adress\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/cv\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/funktion\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/adress/{index}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/status\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/leistungsubertragung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/adressTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/decoder\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/konfiguration\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/anderungsTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/stecker\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/epoch\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/epoch/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/gattung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/gattung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/hersteller\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/hersteller/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/unterKategorien\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{kategorie}/unterKategorien/{unterKategorie}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{kategorie}/unterKategorien\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/massstab\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/massstab/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/motorTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/motorTyp/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/anleitungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/explosionszeichnung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/teilen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/teilen/{teilHersteller}/{teilBestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/protokoll\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/protokoll/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/sondermodell\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/sondermodell/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/spurweite\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/spurweite/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/steuerung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/steuerung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}/consist\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}/consist/{position}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zugTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zugTyp/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/data/{dataType}\")).to.be.true;\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{root}}/v3/api-docs.json",
							"host": [
								"{{root}}"
							],
							"path": [
								"v3",
								"api-docs.json"
							]
						},
						"description": "http://LINEPRO2.home:8086/ModellBahn/api/swagger/swagger."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Export",
			"item": [
				{
					"name": "Achsfolg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de48922a-6af5-42c3-88fb-0e0d36a70d9a",
								"exec": [
									"pm.test(\"Achsfolg\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ca6958d-60c0-433f-a917-82fc595898ed",
								"exec": [
									"pm.test(\"Antrieb\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02c420ad-24af-4a8c-94da-d8b9adde3bff",
								"exec": [
									"pm.test(\"Aufbau\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8411b2fe-a9d9-44c5-9d8a-db6a5a7b6bc0",
								"exec": [
									"pm.test(\"Bahnverwaltung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,land,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3efd114-1a83-4ec1-b76d-c4dce1cfd9ce",
								"exec": [
									"pm.test(\"Epoch\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e1a8ad7-e709-4ce0-bf24-34d4935bbf6e",
								"exec": [
									"pm.test(\"Gattung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0634cf2a-307f-457e-88c1-4636aed8c77d",
								"exec": [
									"pm.test(\"Hersteller\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,land,url,telefon,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){5}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "018f722b-9d38-4364-b438-8eba88936213",
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1faa6fee-8c5e-4fa0-b723-95d80b9ce819",
								"exec": [
									"pm.test(\"Kupplung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbf58a07-1a96-4bc9-aeb6-fa6fe8fbfc94",
								"exec": [
									"pm.test(\"Licht\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97844e8a-d55c-4406-8ead-5255389a0e0c",
								"exec": [
									"pm.test(\"Massstab\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Motor Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c560bf33-dfe1-4160-82c6-d0ecaeb12627",
								"exec": [
									"pm.test(\"Motor Typ\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78e5dcd-d464-4eca-9cf4-05fd394b3d2a",
								"exec": [
									"pm.test(\"Protokoll\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d68abf15-fac7-4347-bde5-b0fa8324eb31",
								"exec": [
									"pm.test(\"Sondermodell\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43492500-5a69-4319-a8fd-17a635c4f791",
								"exec": [
									"pm.test(\"Spurweite\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "259429a3-a363-4127-ba45-f9ee210cfdfb",
								"exec": [
									"pm.test(\"Steuerung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "994b99dd-b808-4701-bd7e-c001b11c51e7",
								"exec": [
									"pm.test(\"Zug Typ\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa4ede09-990b-4d65-8900-6baf891834f9",
								"exec": [
									"pm.test(\"Unter Kategorie\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"kategorie,name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d22d66ec-dc98-4f9d-adaa-52b908b3b5c3",
								"exec": [
									"pm.test(\"Vorbild\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,gattung,bezeichnung,kategorie,unterKategorie,bahnverwaltung,hersteller,bauzeit,anzahl,betreibsnummer,antrieb,achsfolg,anfahrzugkraft,leistung,dienstgewicht,geschwindigkeit,lange,ausserdienst,dmTreibrad,dmLaufradVorn,dmLaufradHinten,zylinder,dmZylinder,kolbenhub,kesseluberdruck,rostflache,uberhitzerflache,wasservorrat,verdampfung,fahrmotoren,motorbauart,leistungsubertragung,reichweite,kapazitat,klasse,sitzplatzeKL1,sitzplatzeKL2,sitzplatzeKL3,sitzplatzeKL4,aufbau,triebkopf,mittelwagen,drehgestellBauart,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){44}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17600c51-844d-4a36-9067-4af9110de7dc",
								"exec": [
									"pm.test(\"Decoder Typ\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,bezeichnung,iMax,protokoll,fahrstufe,gerausch,konfiguration,stecker,anleitungen,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){10}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6600c0c6-3e1d-444b-9f4d-8aab61304673",
								"exec": [
									"pm.test(\"Decoder Typ Adress\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,index,bezeichnung,span,adressTyp,werkseinstellung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f851d99-dc59-49f7-a5b8-13fb76f04786",
								"exec": [
									"pm.test(\"Decoder Typ Cv\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,cv,bezeichnung,minimal,maximal,werkseinstellung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a9d5df2-bd90-409e-9163-9451b4ae645a",
								"exec": [
									"pm.test(\"Decoder Typ Funktion\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,reihe,funktion,bezeichnung,programmable,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){6}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b397cf8-800d-4782-8e30-a9d868617b8a",
								"exec": [
									"pm.test(\"Produkt\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,bezeichnung,kategorie,unterKategorie,lange,massstab,spurweite,epoch,bahnverwaltung,gattung,betreibsnummer,bauzeit,achsfolg,sondermodell,aufbau,licht,kupplung,steuerung,decoderHersteller,decoderBestellNr,motorTyp,anmerkung,anleitungen,explosionszeichnung,abbildung,grossansicht,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){27}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58eb9e53-3895-4be0-a551-e5d0d6a63fcc",
								"exec": [
									"pm.test(\"Produkt Teil\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,teilHersteller,teilBestellNr,bezeichnung,kategorie,unterKategorie,anzahl,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){8}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/teil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"teil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "827722e8-8be6-4de8-868c-bc5a59429410",
								"exec": [
									"pm.test(\"Decoder\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,hersteller,bestellNr,bezeichnung,iMax,protokoll,fahrstufe,gerausch,konfiguration,stecker,kaufdatum,wahrung,preis,anmerkung,status,anleitungen,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){16}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f789f209-44a5-4c89-8774-1fbc39a1e07e",
								"exec": [
									"pm.test(\"Decoder Adress\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,index,bezeichnung,span,adressTyp,werkseinstellung,adress,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af7d816c-1e32-4f7d-bae8-d14349d22ff2",
								"exec": [
									"pm.test(\"Decoder Cv\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,cv,bezeichnung,minimal,maximal,werkseinstellung,wert,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09191ae2-274e-4d71-b731-8fd9a3df0e8b",
								"exec": [
									"pm.test(\"Decoder Funktion\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,reihe,funktion,bezeichnung,programmable,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){5}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f62e6935-21df-41e1-8683-de1d80453e1a",
								"exec": [
									"pm.test(\"Artikel\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"artikelId,hersteller,bestellNr,bezeichnung,kategorie,unterKategorie,lange,massstab,spurweite,epoch,bahnverwaltung,gattung,betreibsnummer,achsfolg,sondermodell,aufbau,licht,kupplung,steuerung,decoder,motorTyp,kaufdatum,wahrung,preis,stuck,verbleibende,anmerkung,beladung,status,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){30}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c4da27b-c74e-42b9-9c9e-49982fbdcbbb",
								"exec": [
									"pm.test(\"Anderung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"artikelId,anderungId,anderungsDatum,anderungsTyp,bezeichnung,stuck,anmerkung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02e3c084-a8c2-4287-8b37-c524f03b7634",
								"exec": [
									"pm.test(\"Zug\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,zugTyp,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abe6e43d-7191-4d04-8c9a-36278e794bd6",
								"exec": [
									"pm.test(\"Zug Consist\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"zug,position,artikelId,hersteller,bestellNr,bezeichnung,lange,bahnverwaltung,gattung,betreibsnummer,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"data.forEach(r => pm.test(\"Data: \" + r, () =>  pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){11}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/consist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"consist"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Achsfolg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b190f37-cb5b-40c1-b495-6c54eab76de3",
								"exec": [
									"pm.test(\"Achsfolg\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c22dac93-de22-4e2b-9947-b270b38f5069",
								"exec": [
									"pm.test(\"Antrieb\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf67327f-cdc8-4629-b2af-f087d76f3381",
								"exec": [
									"pm.test(\"Aufbau\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "672e66c5-62c5-4e57-a413-6b9b68ff44ea",
								"exec": [
									"pm.test(\"Bahnverwaltung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{bahnverwaltungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbd67f3d-fc32-49d5-9934-e0e58656ed3a",
								"exec": [
									"pm.test(\"Epoch\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfba16d9-352d-4165-a34c-5d910875cc2e",
								"exec": [
									"pm.test(\"Gattung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a976cf9-16db-467b-b2ae-175b62dc5d99",
								"exec": [
									"pm.test(\"Hersteller\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{herstellerCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f8dde36-1277-49a4-9d33-54dba5d70dbb",
								"exec": [
									"pm.test(\"Kupplung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd2c6c0a-eba6-4c3c-a292-92afc0786c94",
								"exec": [
									"pm.test(\"Licht\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e0fe893-712d-4706-a6df-c4e7ea600204",
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d8def96-848e-49bf-a69a-8d4f8329a737",
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Motor Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9026d37-1636-4e92-b336-fa135802b2b5",
								"exec": [
									"pm.test(\"Motor Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a12bfa20-cf8b-4ba6-999b-fd256286a5e9",
								"exec": [
									"pm.test(\"Protokoll\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c0ef06f-5a60-4da1-afa7-08609aaabb45",
								"exec": [
									"pm.test(\"Sondermodell\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9779508a-4f92-4b76-93dd-0a78ceef6abf",
								"exec": [
									"pm.test(\"Spurweite\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d852b4d3-9847-4370-99ee-670d06c62e84",
								"exec": [
									"pm.test(\"Steuerung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f645129f-5072-4e46-a60d-952010d07a93",
								"exec": [
									"pm.test(\"Zug Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2052c2ac-47de-4ac8-9468-705289025b89",
								"exec": [
									"pm.test(\"Unter Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{unterKategorieCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43156dd1-be7c-473c-96d6-3575a71ae161",
								"exec": [
									"pm.test(\"Vorbild\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{vorbildCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76b29650-ddbd-4ac6-9950-de4aae2e1230",
								"exec": [
									"pm.test(\"Decoder Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70f72b1c-ff34-4eb4-8265-bf394d840718",
								"exec": [
									"pm.test(\"Decoder Typ Adress\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypAdressCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec669b99-eafb-4daf-a8bd-2c76f11e6266",
								"exec": [
									"pm.test(\"Decoder Typ Cv\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypCvCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca9213cb-1411-4e07-abd3-7d45f1eb4f49",
								"exec": [
									"pm.test(\"Decoder Typ Funktion\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypFunktionCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e58d6944-1d7a-4025-abc5-5235a1075f77",
								"exec": [
									"pm.test(\"Produkt\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{produktCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b3167bb-2064-4ee8-bab0-a21145b58156",
								"exec": [
									"pm.test(\"Produkt Teil\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{teilCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/teil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"teil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71637061-aee6-4e9c-ad56-f30567c30d41",
								"exec": [
									"pm.test(\"Decoder\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d012fc65-77b6-40b5-ac05-c1a608e36da2",
								"exec": [
									"pm.test(\"Decoder Adress\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderAdressCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc9c7ff2-2535-4bd6-8f46-3bb6c24bb2a8",
								"exec": [
									"pm.test(\"Decoder Cv\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderCvCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d000df2-b2d8-437c-9aae-a1860d37296e",
								"exec": [
									"pm.test(\"Decoder Funktion\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderFunktionCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "697434f4-1e75-4e44-9c46-c427e10604ca",
								"exec": [
									"pm.test(\"Artikel\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{artikelCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7a7596a-ecd5-40ca-84c9-c260d7eb0019",
								"exec": [
									"pm.test(\"Anderung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{anderungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28bb66ae-f7dd-4434-950e-dd2ba74148b5",
								"exec": [
									"pm.test(\"Zug\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{zugCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e88bae16-a30d-4e92-b71d-3db004a75419",
								"exec": [
									"pm.test(\"Zug Consist\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{consistCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/consist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"consist"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83cb714e-cdc9-4a47-8cab-5d77cf41680a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/user\");\r",
									"var register = pm.variables.replaceIn(\"{{api}}/register\");\r",
									"var forgot = pm.variables.replaceIn(\"{{api}}/forgot\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.user.forEach(function(u) { \r",
									"    var self = root + \"/\" + u.name;\r",
									"    pm.test(\"name: \" + u.name, () => pm.expect(u.name).to.exist);\r",
									"    pm.test(\"eMail\", () => pm.expect(u.eMail).to.exist);\r",
									"    pm.test(\"locale\", () => pm.expect(u.locale).to.exist);\r",
									"    pm.test(\"enabled\", () => pm.expect(u.enabled).to.exist);\r",
									"    pm.test(\"search\", () => pm.expect(u._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"register\", () => pm.expect(u._links.register[0].href).to.eql(register));\r",
									"    pm.test(\"forgot\", () => pm.expect(u._links.forgot[0].href).to.eql(forgot));\r",
									"    pm.test(\"self\", () => pm.expect(u._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"password\", () => pm.expect(u._links.password[0].href).to.eql(self));\r",
									"    pm.test(\"update\", () => pm.expect(u._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"delete\", () => pm.expect(u._links.delete[0].href).to.eql(self));\r",
									"});\r",
									"pm.test(\"self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.user.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.user.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/user",
							"host": [
								"{{api}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ad3498-cfa2-42d2-912a-338d1030c9b3",
								"exec": [
									"pm.environment.set(\"user\", pm.variables.replaceIn(\"{{$randomUserName}}\"));\r",
									"pm.environment.set(\"eMail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.environment.set(\"firstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.environment.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.environment.set(\"locale\", pm.variables.replaceIn(\"{{$randomLocale}}\"));\r",
									"pm.environment.set(\"password\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var cleanUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/clean\");\r",
									"pm.sendRequest({\r",
									"    url: cleanUrl,\r",
									"    method: 'PATCH',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"clear inbox: \" + err, () => false);\r",
									"        }\r",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e59f0769-7c44-462d-9b17-5f18ba676422",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(201));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Eine Bestätigungs-E-Mail wurde an {{eMail}} gesendet. Bitte klicken Sie auf den Link, um die Anmeldung abzuschließen.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"{{user}}\",\r\n\t\"eMail\": \"{{eMail}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n\t\"lastName\": \"{{lastName}}\",\r\n    \"locale\": \"{{locale}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bea3f1c9-5906-4761-8045-3506dfb82727",
								"exec": [
									"const regex = /(token=)([^\"]+)/;\r",
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var messagesUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages\");\r",
									"pm.sendRequest({\r",
									"    url: messagesUrl,\r",
									"    method: 'GET',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"messages: \" + err, () => false);\r",
									"        }\r",
									"        response.json().forEach(m => {\r",
									"            if (m.to_email == pm.variables.get(\"eMail\")) {\r",
									"                var bodyUrl = pm.variables.get(\"mailhost\") + m.html_path;\r",
									"                pm.sendRequest({\r",
									"                    url: bodyUrl,\r",
									"                    method: 'GET',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"body: \" + err, () => false);\r",
									"                    }\r",
									"                    var text = response.text();\r",
									"                    var token = text.match(regex)[2];\r",
									"                    console.log(token);\r",
									"                    pm.environment.set(\"token\", token);\r",
									"                });\r",
									"                var messageUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages/\") + m.id;\r",
									"                pm.sendRequest({\r",
									"                    url: messageUrl,\r",
									"                    method: 'DELTE',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"delete: \" + err, () => false);\r",
									"                    }\r",
									"                });\r",
									"            };\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37708fae-6b26-47ef-a6e9-d811a9776742",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Sie haben die Anmeldung abgeschlossen. Melden Sie sich an, um fortzufahren.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/confirm?token={{token}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"confirm"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dee5d915-15a0-48f9-9ca7-f68432ffd3ab",
								"exec": [
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var cleanUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/clean\");\r",
									"pm.sendRequest({\r",
									"    url: cleanUrl,\r",
									"    method: 'PATCH',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"clear inbox: \" + err, () => false);\r",
									"        }\r",
									"    });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a56c6d60-17a3-4a20-8a53-a600832338e1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Eine E-Mail zum Zurücksetzen des Passworts wurde an {{eMail}} gesendet. Bitte klicken Sie auf den Link, um Ihr Passwort zu ändern.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/forgot?eMail={{eMail}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"forgot"
							],
							"query": [
								{
									"key": "eMail",
									"value": "{{eMail}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78118e9e-4759-404c-9303-a5823827edf0",
								"exec": [
									"pm.environment.set(\"password\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"const regex = /(token=)([^\"]+)/;\r",
									"var apiKey = pm.variables.get(\"mail_key\");\r",
									"var header = {\r",
									"    'Api-Token': apiKey,\r",
									"    'Content-Type': 'application/json'\r",
									"};\r",
									"var messagesUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages\");\r",
									"pm.sendRequest({\r",
									"    url: messagesUrl,\r",
									"    method: 'GET',\r",
									"    header: header\r",
									"    }, (err, response) => {\r",
									"        if (err) {\r",
									"            pm.test(\"messages: \" + err, () => false);\r",
									"        }\r",
									"        response.json().forEach(m => {\r",
									"            if (m.to_email == pm.variables.get(\"eMail\")) {\r",
									"                var bodyUrl = pm.variables.get(\"mailhost\") + m.html_path;\r",
									"                pm.sendRequest({\r",
									"                    url: bodyUrl,\r",
									"                    method: 'GET',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"body: \" + err, () => false);\r",
									"                    }\r",
									"                    var text = response.text();\r",
									"                    var token = text.match(regex)[2];\r",
									"                    console.log(token);\r",
									"                    pm.environment.set(\"token\", token);\r",
									"                });\r",
									"                var messageUrl = pm.variables.replaceIn(\"{{mailhost}}/api/v1/inboxes/{{inbox}}/messages/\") + m.id;\r",
									"                pm.sendRequest({\r",
									"                    url: messageUrl,\r",
									"                    method: 'DELTE',\r",
									"                    header: header\r",
									"                }, (err, response) => {\r",
									"                    if (err) {\r",
									"                        pm.test(\"delete: \" + err, () => false);\r",
									"                    }\r",
									"                });\r",
									"            };\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9bed6-d705-483d-bf33-21debe69975a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Das Passwort für {{eMail}} wurde geändert.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/reset?token={{token}}&password={{password}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"reset"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00150030-6df3-46ba-bd2b-3c33a6b45c6c",
								"exec": [
									"pm.environment.set(\"newPassword\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b211302-38dc-4626-a3c1-1a795ffb8c18",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var message = pm.response.json();\r",
									"pm.test(\"timestamp\", () => pm.expect(message.timestamp).to.be.gt(0));\r",
									"pm.test(\"status\", () => pm.expect(message.status).to.eql(202));\r",
									"pm.test(\"message\", () => pm.expect(message.message).to.eql(pm.variables.replaceIn(\"Das Passwort für {{eMail}} wurde geändert.\")));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{api}}/user/{{user}}?password={{newPassword}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							],
							"query": [
								{
									"key": "password",
									"value": "{{newPassword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "461e5495-7fd0-4486-8bac-51867793317b",
								"exec": [
									"pm.environment.set(\"eMail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.environment.set(\"firstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.environment.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.environment.set(\"locale\", pm.variables.replaceIn(\"{{$randomLocale}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9a101df-4763-4262-8e78-15a56a4cb7f7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/user\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/user/{{user}}\");\r",
									"var register = pm.variables.replaceIn(\"{{api}}/register\");\r",
									"var forgot = pm.variables.replaceIn(\"{{api}}/forgot\");\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"user\")));\r",
									"pm.test(\"eMail\", () => pm.expect(jsonData.eMail).to.eql(pm.variables.get(\"eMail\")));\r",
									"pm.test(\"firstName\", () => pm.expect(jsonData.firstName).to.eql(pm.variables.get(\"firstName\")));\r",
									"pm.test(\"lastName\", () => pm.expect(jsonData.lastName).to.eql(pm.variables.get(\"lastName\")));\r",
									"pm.test(\"locale\", () => pm.expect(jsonData.locale).to.eql(pm.variables.get(\"locale\")));\r",
									"pm.test(\"enabled\", () => pm.expect(jsonData.enabled).to.be.true);\r",
									"pm.test(\"search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"password\", () => pm.expect(jsonData._links.password[0].href).to.eql(self));\r",
									"pm.test(\"update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"register\", () => pm.expect(jsonData._links.register[0].href).to.eql(register));\r",
									"pm.test(\"forgot\", () => pm.expect(jsonData._links.forgot[0].href).to.eql(forgot));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{newPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"eMail\": \"{{eMail}}\",\n    \"firstName\": \"{{firstName}}\",\n\t\"lastName\": \"{{lastName}}\",\n    \"locale\": \"{{locale}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/user/{{user}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5e96d6d-571e-4cbf-a550-4826ca31a4c1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/user\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/user/{{user}}\");\r",
									"var register = pm.variables.replaceIn(\"{{api}}/register\");\r",
									"var forgot = pm.variables.replaceIn(\"{{api}}/forgot\");\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"name: \" + jsonData.name, () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"user\")));\r",
									"pm.test(\"eMail\", () => pm.expect(jsonData.eMail).to.eql(pm.variables.get(\"eMail\")));\r",
									"pm.test(\"firstName\", () => pm.expect(jsonData.firstName).to.eql(pm.variables.get(\"firstName\")));\r",
									"pm.test(\"lastName\", () => pm.expect(jsonData.lastName).to.eql(pm.variables.get(\"lastName\")));\r",
									"pm.test(\"locale\", () => pm.expect(jsonData.locale).to.eql(pm.variables.get(\"locale\")));\r",
									"pm.test(\"enabled\", () => pm.expect(jsonData.enabled).to.be.true);\r",
									"pm.test(\"search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"password\", () => pm.expect(jsonData._links.password[0].href).to.eql(self));\r",
									"pm.test(\"update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"register\", () => pm.expect(jsonData._links.register[0].href).to.eql(register));\r",
									"pm.test(\"forgot\", () => pm.expect(jsonData._links.forgot[0].href).to.eql(forgot));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{newPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/user/{{user}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cb4f393-1806-4858-a9f8-8f5e96091d95",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{newPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "{{language}}"
							}
						],
						"url": {
							"raw": "{{api}}/user/{{user}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"user",
								"{{user}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{authPassword}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{authUser}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f79ae480-0aba-4cba-9bfa-979fa72cac38",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "54365930-5ffc-479c-af51-cb9b27da8e77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "bd2c594c-b11f-4451-b2bb-228350cc7e3a",
			"key": "host",
			"value": "127.0.0.1",
			"disabled": true
		},
		{
			"id": "5b01b0dd-0437-494b-914c-3eab099a7b65",
			"key": "port",
			"value": ":8086"
		},
		{
			"id": "05f0b41a-212a-438f-84e0-7a44bf435d7f",
			"key": "server",
			"value": "https://{{host}}{{port}}"
		},
		{
			"id": "0930ca4f-be70-40e9-8cd8-d8d25d84b45a",
			"key": "root",
			"value": "{{server}}/ModellBahn"
		},
		{
			"id": "7142a945-b164-45c8-b362-f185ab0e8c39",
			"key": "api",
			"value": "{{root}}/api"
		},
		{
			"id": "6085e790-db8d-4666-b5fc-445d93bf7540",
			"key": "language",
			"value": "de"
		},
		{
			"id": "8c34fc02-ee82-4d6c-8020-f1395a69fe60",
			"key": "achsfolgAdd",
			"value": "1C1H2T"
		},
		{
			"id": "8a984617-d189-4411-bfb2-c5e28e43a76f",
			"key": "achsfolgUpdate",
			"value": "COCO"
		},
		{
			"id": "e5b9b2fe-fcd4-464a-8b22-df0365171804",
			"key": "adIndexAdd",
			"value": "1"
		},
		{
			"id": "a0d770f8-bf64-461f-8619-d6629ef85ccb",
			"key": "adIndexUpdate",
			"value": "1"
		},
		{
			"id": "2616dc65-b2dd-483b-943c-dfa1c933bf6d",
			"key": "adSpanAdd",
			"value": "2"
		},
		{
			"id": "64075190-f184-4bc1-9c22-a4259609bd21",
			"key": "adSpanUpdate",
			"value": "16"
		},
		{
			"id": "5cdaf1f2-77dc-4204-9d14-3530b77806af",
			"key": "adTypAdd",
			"value": "DIGITAL"
		},
		{
			"id": "27cad273-41a6-4593-9811-2ed51ba6162f",
			"key": "adTypUpdate",
			"value": "DELTA"
		},
		{
			"id": "c3bcc15a-7bd7-4409-bba1-4eb178800917",
			"key": "adAdd",
			"value": "10"
		},
		{
			"id": "0664e83a-3877-4ac8-b8bc-c984240a35f1",
			"key": "adUpdate",
			"value": "80"
		},
		{
			"id": "b219dca8-dc14-4357-99fe-2f0bc98be4b3",
			"key": "anderungAdd",
			"value": "1"
		},
		{
			"id": "23fe9881-5b7f-4ace-9658-e0e4daa057a9",
			"key": "anderungUpdate",
			"value": "1"
		},
		{
			"id": "accd330e-5e95-473e-b13b-5ecc4da2c82c",
			"key": "antriebAdd",
			"value": "DAMPF"
		},
		{
			"id": "48b79bdf-5771-4c51-bde7-e35d589c9548",
			"key": "antriebUpdate",
			"value": "ELEKTRO"
		},
		{
			"id": "6b49e5f9-a77c-4147-bde8-cde3bf5f8a82",
			"key": "artikelAdd",
			"value": "00001"
		},
		{
			"id": "32bd8150-f3b0-4d09-93cb-ff60c579bdd2",
			"key": "artikelUpdate",
			"value": "00001"
		},
		{
			"id": "1964ba68-8287-4b9e-b301-fdfbd780fc0d",
			"key": "aufbauAdd",
			"value": "LK"
		},
		{
			"id": "b4d4b89c-d570-4d64-8d88-be84abb94ebb",
			"key": "aufbauUpdate",
			"value": "LK"
		},
		{
			"id": "31883b35-85fa-4c3e-a96d-75c1afa95eb0",
			"key": "bestellNrAdd",
			"value": "3000"
		},
		{
			"id": "84f352db-89d3-45bb-a0ce-1c2f635dd384",
			"key": "bestellNrUpdate",
			"value": "3003"
		},
		{
			"id": "541ef303-937b-4e07-b5fc-2c22381ab854",
			"key": "bahnverwaltungAdd",
			"value": "DB"
		},
		{
			"id": "ee3fde60-d9c2-4724-8545-5114b67e6ef3",
			"key": "bahnverwaltungUpdate",
			"value": "DBAG"
		},
		{
			"id": "0dfa4b16-06cd-4f2b-8fd7-ade1669e6fc7",
			"key": "cvAdd",
			"value": "8"
		},
		{
			"id": "82b08ec8-9dd2-4e4f-8a22-8da5fe34b7f4",
			"key": "cvUpdate",
			"value": "120"
		},
		{
			"id": "cce1e153-6c9c-474c-beae-b811c769d2b2",
			"key": "cvMaxAdd",
			"value": "63"
		},
		{
			"id": "6c41069c-0a35-4b2d-a0d1-518cc30d84a5",
			"key": "cvMaxUpdate",
			"value": "80"
		},
		{
			"id": "ff5592fb-14d4-478d-912c-6338b568c82e",
			"key": "cvMinAdd",
			"value": "0"
		},
		{
			"id": "38f598b6-8fc8-4f13-ba78-483c41bc10cf",
			"key": "cvMinUpdate",
			"value": "1"
		},
		{
			"id": "cfd6b6c3-051b-4592-880d-98e82f8533a4",
			"key": "cvValueAdd",
			"value": "30"
		},
		{
			"id": "ab128c40-bb23-43b6-b768-9bcb329ac8ab",
			"key": "cvValueUpdate",
			"value": "50"
		},
		{
			"id": "30183cb7-5d67-4e69-b4d9-194810d496f2",
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"id": "b6f0cb5c-6daf-48ff-aa19-51d8bb544d18",
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"id": "826a2900-7ebd-4cc4-8f00-5fca7b521ac4",
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"id": "2466090e-5f83-4632-bc86-7830d7e3ef54",
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"id": "cd17bd95-44c6-47f4-9291-5c297ef988c4",
			"key": "decoderHerstellerAdd",
			"value": "ESU"
		},
		{
			"id": "5de2eb21-17a2-44d2-933e-52f8e2b82320",
			"key": "decoderHerstellerUpdate",
			"value": "ESU"
		},
		{
			"id": "571718fc-d530-4582-9c04-77dbeeb426ef",
			"key": "decoderBestellNrAdd",
			"value": "62400"
		},
		{
			"id": "4d93b9a2-ae4f-44bc-90be-a5b3804ca758",
			"key": "decoderBestellNrUpdate",
			"value": "62499"
		},
		{
			"id": "a073a645-fb21-4b89-96e1-0493ea9fd5e3",
			"key": "decoderBezeichnungAdd",
			"value": "LokSound M4"
		},
		{
			"id": "7fea55e6-d629-43d8-9a77-83238ef751c5",
			"key": "epochAdd",
			"value": "IV"
		},
		{
			"id": "4fe8f596-9c2d-449d-bcc8-a820c07d9ab5",
			"key": "epochUpdate",
			"value": "IV"
		},
		{
			"id": "f298873b-3a50-4d92-9be3-0b6310dcdf93",
			"key": "fahrstufeAdd",
			"value": "27"
		},
		{
			"id": "5e984534-fc44-41a7-a978-ae6de07efa9c",
			"key": "fahrstufeUpdate",
			"value": "128"
		},
		{
			"id": "57a79a8a-037c-4bc6-96a6-d78379451d7c",
			"key": "fnFuntionAdd",
			"value": "F0"
		},
		{
			"id": "8b2683fe-55a7-4c64-906f-f7640a7b1901",
			"key": "fnFuntionUpdate",
			"value": "F0"
		},
		{
			"id": "b124987f-7ddb-4d46-bb79-fad69367758e",
			"key": "fnReiheAdd",
			"value": "1"
		},
		{
			"id": "224adb41-5218-4cbb-9263-940760b0b906",
			"key": "fnReiheUpdate",
			"value": "1"
		},
		{
			"id": "c8232a81-0f80-4122-a542-dbbec815a00f",
			"key": "gattungAdd",
			"value": "BR89.0"
		},
		{
			"id": "cd901fa8-57ed-4b23-bad6-d8934abb8408",
			"key": "gattungUpdate",
			"value": "BR89.0"
		},
		{
			"id": "f068cc92-b8f5-407a-901c-d2c021c6d108",
			"key": "herstellerAdd",
			"value": "MARKLIN"
		},
		{
			"id": "1093f9f5-9664-4e76-b08e-9dab88b5223f",
			"key": "herstellerUpdate",
			"value": "MARKLIN"
		},
		{
			"id": "08c43532-78ea-4e77-aa7e-ed7aed6aacf2",
			"key": "iMaxAdd",
			"value": "1.5"
		},
		{
			"id": "a8b8478e-7d94-4dcc-b998-317dc29c7d2f",
			"key": "iMaxUpdate",
			"value": "2.0"
		},
		{
			"id": "51f14d5f-bf34-488c-b870-7d571a62f547",
			"key": "kategorieAdd",
			"value": "LOKOMOTIV"
		},
		{
			"id": "4a89fde3-13de-4257-8c48-9e598d0bf0c7",
			"key": "kategorieUpdate",
			"value": "AUSGESTALTUNG"
		},
		{
			"id": "2318b045-3214-43a8-9cc0-e6cbcf508e37",
			"key": "kupplungAdd",
			"value": "RELEX"
		},
		{
			"id": "d5cdeb85-ad3e-4bf0-9b71-801ec7338d81",
			"key": "kupplungUpdate",
			"value": "RELEX"
		},
		{
			"id": "7cf673d5-1369-49e1-8aed-34c286c5bc23",
			"key": "konfigurationAdd",
			"value": "CV"
		},
		{
			"id": "52db17b5-5e1c-43cd-8395-c0ec4110c08b",
			"key": "konfigurationUpdate",
			"value": "STECKER"
		},
		{
			"id": "d0e9aa6a-fc67-4526-be96-2197b18518d3",
			"key": "leistungsubertragungAdd",
			"value": "MECHANISH"
		},
		{
			"id": "d8bbfa34-337a-46c8-ad44-5f92917a65e2",
			"key": "leistungsubertragungUpdate",
			"value": "ELEKTRISH"
		},
		{
			"id": "1a13eb36-a286-4ac9-a870-fcafc7f041d8",
			"key": "lichtAdd",
			"value": "L1V"
		},
		{
			"id": "70d31543-d3a0-4346-87f8-163f80d88146",
			"key": "lichtUpdate",
			"value": "L1V"
		},
		{
			"id": "d9304373-b5d0-48d1-9abf-7e6cba0de016",
			"key": "massstabAdd",
			"value": "H0"
		},
		{
			"id": "0d312ebf-e0cd-4117-b2f3-8e7b51565d03",
			"key": "massstabUpdate",
			"value": "H0"
		},
		{
			"id": "deb6fbe6-c40d-4c5e-8a2a-57060a57d029",
			"key": "motorTypAdd",
			"value": "CSINUS"
		},
		{
			"id": "e8098728-bd93-49f6-8b92-270cd3b8dbd2",
			"key": "motorTypUpdate",
			"value": "CSINUS"
		},
		{
			"id": "48e0865a-4b59-47cb-aaa0-2778b02fbbc4",
			"key": "protokollAdd",
			"value": "MFX"
		},
		{
			"id": "4a60e60d-ae97-4066-a6b4-91c3cf3de911",
			"key": "protokollUpdate",
			"value": "DELTA"
		},
		{
			"id": "e709374d-02f4-41f7-bde9-fc5ca69211a1",
			"key": "sondermodellAdd",
			"value": "MM"
		},
		{
			"id": "15a69d27-73aa-41e0-96c9-1eaca51237dc",
			"key": "sondermodellUpdate",
			"value": "MM"
		},
		{
			"id": "ed79c17f-528f-4746-94c1-bf79c6a5ab2a",
			"key": "spurweiteAdd",
			"value": "H0"
		},
		{
			"id": "f4067770-f129-4dea-b0a1-1c7697ee50b5",
			"key": "spurweiteUpdate",
			"value": "H0"
		},
		{
			"id": "0bd6d227-76b0-4bb4-bb8e-480bf9cbda2f",
			"key": "steckerAdd",
			"value": "NEM651"
		},
		{
			"id": "d20eae1c-9ec4-4554-8255-d0351216aa58",
			"key": "steckerUpdate",
			"value": "NEM652"
		},
		{
			"id": "90f302b7-396f-4a85-8ca6-0cd9d6766742",
			"key": "steuerungAdd",
			"value": "DIGITAL"
		},
		{
			"id": "ec154422-e986-41cf-b017-4148df85f16e",
			"key": "steuerungUpdate",
			"value": "DIGITAL"
		},
		{
			"id": "fe9eef33-a72a-4123-8b9c-1fc2904725cc",
			"key": "teilHerstellerAdd",
			"value": "MARKLIN"
		},
		{
			"id": "ea541e13-4510-4c85-9122-22a138e50bae",
			"key": "teilBestellNrAdd",
			"value": "600300"
		},
		{
			"id": "2f84e78c-9c4a-4f57-b63f-f2f8b6ea311f",
			"key": "teilKategorieAdd",
			"value": "ERSATZTEIL"
		},
		{
			"id": "f7692057-3c73-4e13-b35f-41d07cc239b3",
			"key": "teilUnterKategorieAdd",
			"value": "BURSTEN"
		},
		{
			"id": "c23631af-1388-4112-a124-ea38352e0a9f",
			"key": "unterKategorieAdd",
			"value": "DAMPF"
		},
		{
			"id": "701f7153-5d9d-4c8e-8faa-119cd068cd26",
			"key": "unterKategorieUpdate",
			"value": "HECKEN"
		},
		{
			"id": "cefaeb68-25c5-45fb-bd9c-851f7d53013b",
			"key": "teilBezeichnungAdd",
			"value": "Bürsten"
		},
		{
			"id": "d4616199-4ae9-438a-9180-23e97e2fc142",
			"key": "vorbildAdd",
			"value": "HECKEN"
		},
		{
			"id": "2241e205-1886-4dc4-96b8-496efe6cdd1d",
			"key": "vorbildUpdate",
			"value": "HECKEN"
		},
		{
			"id": "f227c68a-7f9e-4e9e-9af6-1515db6454e6",
			"key": "zugAdd",
			"value": "BAVARIA"
		},
		{
			"id": "3d7e8a60-c481-41c3-bdd0-d829bd1dbb04",
			"key": "zugUpdate",
			"value": "BAVARIA"
		},
		{
			"id": "eca809cd-f5f0-49f3-a7df-2002d1642039",
			"key": "zugTypAdd",
			"value": "TEE"
		},
		{
			"id": "958671ea-6c87-444d-a842-1dd377bb2b9f",
			"key": "zugTypUpdate",
			"value": "TEE"
		},
		{
			"id": "c45c27c5-d63f-46fc-843c-6cd22623300a",
			"key": "imageFile",
			"value": "3000.jpg"
		},
		{
			"id": "5ff30977-fdc8-4b5d-9c54-bcf8abd033db",
			"key": "anleitungFile",
			"value": "3000_betrieb.pdf"
		},
		{
			"id": "64e448dd-de2a-4421-889b-a899a1b681c7",
			"key": "explosionszeichnungFile",
			"value": "3000_explo.pdf"
		},
		{
			"id": "b45a549f-b11b-46a1-88df-ccc7256b7e90",
			"key": "xlFile",
			"value": "3000.jpg"
		},
		{
			"id": "0b72c746-5f9c-40f3-892f-9c4f19ba3081",
			"key": "landAdd",
			"value": "DE"
		},
		{
			"id": "82c64e6c-a8a8-43dc-9055-2ac9763bfa1a",
			"key": "landUpdate",
			"value": "NL"
		},
		{
			"id": "f77c1174-57cf-47cf-9edd-809225c62a73",
			"key": "telefonAdd",
			"value": "+497161608222"
		},
		{
			"id": "ebd4fc7a-f0bf-44d1-bb8c-ddd89add0afb",
			"key": "telefonUpdate",
			"value": "030 2341347"
		},
		{
			"id": "05c75864-4fa1-48dd-8bdd-e09f28375fe3",
			"key": "abbildungCsv",
			"value": "abbildungCsv.csv"
		},
		{
			"id": "dac5de3e-7221-43d3-b1a9-0135e0b2d526",
			"key": "anderungCsv",
			"value": "anderungCsv.csv"
		},
		{
			"id": "58d2be01-3035-4112-9362-3673265712b7",
			"key": "artikelCsv",
			"value": "artikelCsv.csv"
		},
		{
			"id": "8b24382c-e22d-4364-be9a-d44733815a2b",
			"key": "bahnverwaltungCsv",
			"value": "bahnverwaltungCsv.csv"
		},
		{
			"id": "0ad2d5bb-7598-4504-957a-a2460e6f155e",
			"key": "consistCsv",
			"value": "consistCsv.csv"
		},
		{
			"id": "5858bca3-8396-4b05-a0f4-15a22ac6c21f",
			"key": "decoderCsv",
			"value": "decoderCsv.csv"
		},
		{
			"id": "36a1d212-e9c2-4437-bf8b-1874b25be99b",
			"key": "decoderAdressCsv",
			"value": "decoderAdressCsv.csv"
		},
		{
			"id": "9af65877-7e6b-43fe-bc46-af5e1e13f1a2",
			"key": "decoderCvCsv",
			"value": "decoderCvCsv.csv"
		},
		{
			"id": "801c1c40-0700-4008-a2a8-a9b78bb06cdd",
			"key": "decoderFunktionCsv",
			"value": "decoderFunktionCsv.csv"
		},
		{
			"id": "a43a4087-daf9-4272-b58e-e475158543c3",
			"key": "decoderTypCsv",
			"value": "decoderTypCsv.csv"
		},
		{
			"id": "7bf0120c-5355-4d06-bbfe-a274ce727b38",
			"key": "decoderTypAdressCsv",
			"value": "decoderTypAdressCsv.csv"
		},
		{
			"id": "ac5f9a41-4764-4e38-820c-b239ac592433",
			"key": "decoderTypCvCsv",
			"value": "decoderTypCvCsv.csv"
		},
		{
			"id": "f57381bf-4255-47aa-8b1d-83968b88d5f3",
			"key": "decoderTypFunktionCsv",
			"value": "decoderTypFunktionCsv.csv"
		},
		{
			"id": "4ca47930-0372-4120-9494-db9878b0399a",
			"key": "herstellerCsv",
			"value": "herstellerCsv.csv"
		},
		{
			"id": "0e67fd46-117b-446f-b1e2-89673ce54b57",
			"key": "namedCsv",
			"value": "namedCsv.csv"
		},
		{
			"id": "8a84e6e4-7c9b-4057-9bc6-e3f75786801b",
			"key": "produktCsv",
			"value": "produktCsv.csv"
		},
		{
			"id": "45a88e41-8898-4122-8409-d909f90a4909",
			"key": "teilCsv",
			"value": "teilCsv.csv"
		},
		{
			"id": "9d91d4ec-3b5c-4730-aad8-5ce05dedba57",
			"key": "unterKategorieCsv",
			"value": "unterKategorieCsv.csv"
		},
		{
			"id": "38d207cf-d689-40af-b18a-fc64c628d694",
			"key": "vorbildCsv",
			"value": "vorbildCsv.csv"
		},
		{
			"id": "7917e9e5-4cdf-4453-aa7a-ee11e020e2cd",
			"key": "zugCsv",
			"value": "zugCsv.csv"
		}
	],
	"protocolProfileBehavior": {}
}