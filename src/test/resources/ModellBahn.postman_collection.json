{
	"info": {
		"_postman_id": "5c8d760c-926b-4f1e-96fc-048f6cbad4f9",
		"name": "ModellBahn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Enums",
			"item": [
				{
					"name": "Adress Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eff9980b-dbc7-4f61-a1f7-580ec3617638",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/adressTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"adressTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderungs Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5323014d-1d98-4674-ab70-439b40a8c7e6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/anderungsTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"anderungsTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8df91f6-522f-4aee-b6e2-4babc9c9db0c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Konfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fae18660-9b1e-408d-b0f4-9e0db86777ac",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/konfiguration",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"konfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "leistungsubertragung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5bca17e-1808-4514-8337-d8c6ca39c94e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/leistungsubertragung",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"leistungsubertragung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d3d7ec9-21f0-4078-a576-2bb3d96334f9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stecker",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "188dcbd1-90f8-4363-9d46-451d33c2518a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/stecker",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"stecker"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Achsfolg",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b77f3b71-d651-488c-b237-313af6480bdf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.achsfolg.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.achsfolg.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.achsfolg.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69a45f8e-6153-4a00-9134-43ca5f3cf747",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d8a85ff-6c4c-4dad-9e64-9fa88826a03c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aeba1a9f-1804-432a-90e6-fb58a52c5616",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5063f447-c675-4ee5-bd61-235939ed79ae",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a855c89a-b55e-4aac-a57d-26b978cd988a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dda4346-5dd5-4a2f-a74f-5a800e8b97f8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Antrieb",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40ee5a40-a1f6-426e-8848-3015930f4140",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.antrieb.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.antrieb.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.antrieb.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1928ffa8-779c-43b1-8baf-976b5434e283",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03ba07c7-b3f6-4475-a725-f3ca28349565",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e3b750fa-2545-43c6-b2be-c1a474bea2ca",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb51bf78-d9d4-4c44-8c83-930352bee544",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46d8c344-0c4a-4219-a410-d51e6eabeb7f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91cd9056-fad1-404e-b3c6-08748f6f3ad5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Aufbau",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4931c46-9790-4cf7-8fd0-9b463b411122",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.aufbau.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.aufbau.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.aufbau.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0268ef85-745a-451d-8e3c-4b4dd4672743",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51636196-e4da-418f-9de6-48a44ecc18ba",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4370c6b-e9fb-4f89-b1d7-75b7de803e90",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3db42b22-02f4-4e54-b884-fb832805a769",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5bbafe4b-6bbb-44ba-b332-c53386b94564",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7842fc4a-a617-4806-8522-f785ccfdc4ea",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c79289f-22f9-424e-8748-69a30da7faa9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e03ac0d-4d44-4053-ad67-d38198a81ecb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bahnverwaltung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "933f0c86-bbd9-48d6-ad1d-d63f7fed897f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.bahnverwaltung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.bahnverwaltung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.bahnverwaltung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d96a78d8-9c21-475d-96e8-ac1edb476a96",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4099fad4-24fd-4587-bec6-c79d09c6cc2d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6e7ceaa-8792-44b3-9603-ce016728a1dd",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9081773-24fd-42c0-a3c6-2013519d19c7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5bcd609-17ef-4fe8-b6f9-f42ddaab87e1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2978a762-4231-4a1c-83d1-e84afc6a87ed",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Epoch",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19fc2198-7377-4887-8fdd-72eb6de70e2e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.epoch.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.epoch.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.epoch.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f835854c-6a04-4686-b152-e8481f69a703",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b812ca2-8f48-4655-b7ed-d4d27e26c3cd",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "accc2e78-60a8-49c2-8c32-0940b7b95604",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2c5eb032-05cd-45ee-ab2a-25bef7ed6dd6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59e3abd1-d9f5-4103-9d1e-070430f99cc4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcc770fb-06a9-4845-a575-65a1f303e62c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Gattung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba18d2e2-7037-4f04-8853-ba2f3fd9f32c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.gattung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.gattung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.gattung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "166f8857-ad35-4f51-813f-3b4b38b6b157",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04e7630b-ce0a-429b-9011-70aa255f0927",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b445a0a9-e9c3-4884-bc62-9a9fcfc0ae74",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "873d4567-22a4-4661-8a74-6288789479cf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c88e1291-1e93-47b1-9ce4-4a516ec684fc",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c81a19a-da90-40c9-9535-772b8967f07d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Hersteller",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1c602a-7768-43e7-8965-6ada551cd500",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.hersteller.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.hersteller.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.hersteller.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a122c8ce-f9c4-451e-9cf6-c3cf40414eea",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landAdd\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonAdd\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ca3ee56-a373-4edf-9206-0007f20579ff",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa8f066a-d0a0-4aac-956c-cd95e474e532",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landUpdate\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonUpdate\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "312aaf9f-5bbf-4946-9005-a3c618f6f9a5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "135398dc-06bd-4cb1-96cb-ea60d6dd16e8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33661daa-5bef-49b8-b090-3479bd6228f1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Kupplung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "160ed09b-e932-439c-8a8e-0248d2187486",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kupplung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kupplung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kupplung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43056a0d-1c7c-410e-b888-e7fa934e0dfd",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bdb23335-9847-4921-a0fc-566d5318e4bf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8aef820b-1120-49fe-a3ab-af9362cbe048",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "620bb8a7-2aea-49c5-92d3-73a1daf56d81",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d89d8a96-3cb7-448a-b8a8-6d63fd4c495e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6e89aa7-7fab-42cd-9f7b-b78af5a16b1d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c5414e4-d18e-4e9e-9702-079ea8a2be4d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf76753-f513-4297-a8de-2e2d6cb8241d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Licht",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f6eef02-e3b0-41b7-9cfb-1e6b59ba3fb8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.licht.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.licht.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.licht.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cb402ec-41c9-465e-8f4e-049f10a1c173",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "909e8ae5-a2ec-4c1f-9572-0f999de295bd",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0ad16dd-13a3-4698-8afe-4c02a27adb19",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b10a7799-63c4-4b4c-8592-9460909971a7",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acf605c2-f149-489f-b514-1eeed501ec61",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8408c504-5d10-466e-89c6-0bd0d7a666b1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f11e902-799a-4f01-a087-58d6c554ad87",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eab19bfe-0785-45c0-ae18-f244c4271319",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Massstab",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bed0dbd-1d98-4923-8fe7-d7ff00310881",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.massstab.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.massstab.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.massstab.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75818194-6e1c-4792-b377-bc700d33f039",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c7e2cb4d-6c17-427f-9e0e-cc24c8657409",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e983af6d-86ab-48c7-b526-68d4e67da2dc",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b2b2fb4-1f68-48e8-8a77-fc18e1006ae7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec2ff6b6-aaf2-40e3-9633-bef175c6c076",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3642353-3e60-4faf-af8c-eca0b3bfc7af",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Motor Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bd2e948-db47-4562-ae14-e69f0f2daff4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.motorTyp.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.motorTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.motorTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "631261f3-2e86-4c31-9cc8-c57084a3edfb",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e183a2d6-6f0f-45a7-ad40-7646ea4ccd04",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c0ce263-07d3-4541-868c-547a70d269b5",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e0b490d-da93-4ba1-8073-4fa42806ac1f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4461262a-51dc-42c7-99c2-8d7a24ab1850",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e31da343-63cf-43b6-bec1-084c3c037f01",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Protokoll",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4adb2e2e-88f5-4b64-9413-cba18ff71f2e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.protokoll.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.protokoll.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.protokoll.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d90a98ba-3222-4967-8f6b-9cd0a7d42d41",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60ae83e6-e766-4e68-b7ad-38f781c9d043",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce1d341c-df5a-49e2-a807-32907da1b2e6",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5658cd0-0377-4dee-b18a-12db3796fb18",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1d1777e-6573-48de-8ebb-f5fa4799b12b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4533e6a2-158a-4f03-9b10-a3865e49f41b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sondermodell",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e99d4751-3796-4462-946a-6af4c4465b4e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.sondermodell.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.sondermodell.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.sondermodell.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b688230b-ffb5-4f79-8f86-64f8134540ff",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be28aa08-7c04-422c-b4d2-3e2127a8543b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23296c0d-eb36-40d7-9862-fc25efb13f11",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "445e5360-b7f1-4cbe-b0b1-2161c9e4dbf3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f797b2b1-ced0-4949-a4f8-2a401887091b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c19829f7-7e30-4fc1-b56c-e524338e1ba1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Spurweite",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00237c4f-5cb9-4bd1-9ad9-13da43c0fb22",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.spurweite.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.spurweite.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.spurweite.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ae5e0f2b-0d4b-4dcb-91e6-a198054e5fd8",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de81a548-1841-4cdf-82fa-9208f69922a3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2ee7d3c6-64e8-435c-8bf9-454b9056f10c",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f3215cd-3897-4b36-911e-685e603a2773",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a65363e-ed8e-43a0-a5ca-fca4004e8554",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1809acf0-432f-4475-857a-fc5b75b13f73",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Steuerung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11d87a08-72a6-4771-a01a-adaa15f7e78d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.steuerung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.steuerung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.steuerung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fbf5daed-087d-4e98-a31e-e24dc669b819",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f78684a5-de52-43a8-af9e-3543125bda16",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "73bfd723-ce3e-4d2f-9896-7e5f40a633f7",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34e11127-aa97-4f12-85d6-f076ee314aca",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7460d7e-23ab-4485-bde9-f21ab18afbc4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60a1ca35-cc02-4b70-95c1-52761652cb3e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zug Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd7a62d2-2365-476d-829a-07f68feb421d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.zugTyp.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.zugTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.zugTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "959f9153-ad33-4178-9a49-f8aeebd387b5",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4dc1e866-eb24-4851-ae5b-8e514e835668",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "723343a5-7f05-43e3-b2a3-ef7fab4ac04e",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c6d28b0-11da-4847-b453-654c955761a7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2ec426e-2c75-4b62-b5c6-29dded85f485",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a020bf14-7143-4711-8457-b3721230a93f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Kategorie",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f9d5c6d-33aa-4762-babd-6ef3e38dbe77",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kategorie.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"unterKategorien\", () => pm.expect(a.unterKategorien).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(a._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "818198f5-c9bc-4bb0-a2d1-918f8b0052f5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kategorie.forEach(function(k) { \r",
									"    var self = root + \"/\" + k.name;\r",
									"    pm.test(\"name\", () => pm.expect(k.name).to.be.oneOf([\"AUSGESTALTUNG\",\"BELEUCHTUNG\"]));\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(k.bezeichnung).to.exist);\r",
									"    k.unterKategorien.forEach(function(u){\r",
									"        pm.expect(u.kategorie).to.eql(k.name);\r",
									"        pm.expect(u.name).to.exist;\r",
									"        pm.expect(u.bezeichnung).to.exist;\r",
									"        pm.expect(u.deleted).to.be.false;\r",
									"        pm.expect(u._links.parent[0].href).to.eql(self);\r",
									"        pm.expect(u._links.update[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"        pm.expect(u._links.delete[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"    });\r",
									"    pm.test(\"deleted\", () => pm.expect(k.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(k._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(k._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(k._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(k._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(k._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(k._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"root = pm.variables.replaceIn(\"{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG\");\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG",
							"host": [
								"{{api}}"
							],
							"path": [
								"unterKategorien"
							],
							"query": [
								{
									"key": "kategorien",
									"value": "AUSGESTALTUNG,BELEUCHTUNG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f12d676f-824e-409a-9164-dcbd9eccccda",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5289c74-108d-4924-a02e-ca827e61f4b9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(undefined));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77a8e86b-8438-41a8-ae0c-377bfe78f375",
								"exec": [
									"pm.environment.set(\"unterAdd\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d962ff56-fd87-4ac7-b2f5-bb81ea5d5930",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dda6bb66-56ec-4cb6-b521-54edeb411398",
								"exec": [
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fac5a4ab-c461-4c78-9359-1a7bb2bb4c6c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0620f6ad-65e2-4146-8bcb-73b5c418ee26",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46263083-2bf4-40b6-a94d-d4ef27bdbeb3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6d0db83-bf7a-4cc4-84b9-ebea9c3af5c3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1620891-c038-4b86-967e-79617d9f257a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6550cfae-cdcd-4978-8feb-07088a4ecf9d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Vorbild",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f510f67d-ea59-40a9-9fb0-969ddb8980e1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.vorbild.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"gattung\", () => pm.expect(a.gattung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.vorbild.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.vorbild.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d9e0d23-20a3-4b48-a000-0f15566565b5",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungAdd}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieAdd}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieAdd}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungAdd}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebAdd}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgAdd}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungAdd}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb743a69-a774-4a47-b7ba-9ea678fa35a3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a700aa08-2b98-4d5a-9ced-1b3c1d290009",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8629889b-975d-4575-8de6-26fd65a2c96d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ba5d1eb-7b4f-4c1e-b15b-a9ca40f3a839",
								"exec": [
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungUpdate}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieUpdate}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieUpdate}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungUpdate}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebUpdate}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgUpdate}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungUpdate}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1571372-f1ae-49bb-b07a-d09f5a9aa2b4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "feda2619-b847-4e06-83d1-12bb46012732",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1785b6d1-3339-4cf1-a6de-9d6e7e84cd11",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Decoder Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bee2f696-e1aa-4cf6-a083-b90b951a8744",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.decoderTyp.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"    pm.test(\"_links.adress\", () => pm.expect(a._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"    pm.test(\"_links.cv\", () => pm.expect(a._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"    pm.test(\"_links.funktion\", () => pm.expect(a._links.funktion[0].href).to.eql(self+\"/funktion\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.decoderTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.decoderTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8f5762e-5837-4584-bd1c-050da1e9aec5",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxAdd\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollAdd\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeAdd\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(true));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationAdd\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerAdd\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97202f8b-778a-41a1-bd8a-eb9f764213c5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": {{gerausch}},\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed253bfb-e348-4cc8-a54d-056a351a77ec",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "189421d3-2e0f-41cc-8a90-f211f95182c3",
								"exec": [
									"pm.environment.set(\"adIndex\", new Number(pm.variables.get(\"adIndexAdd\")));\r",
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypAdd\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanAdd\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9caaedb-f794-4eeb-96b0-aaa2a4888104",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00d4c25c-7550-4705-be3d-b3e34c90c751",
								"exec": [
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypUpdate\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanUpdate\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9da9eb38-2154-4fef-af48-9f11273c56b6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cff7462c-f392-4b6c-9eac-cc0724ea6402",
								"exec": [
									"pm.environment.set(\"cv\", new Number(pm.variables.get(\"cvAdd\")));\r",
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinAdd\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxAdd\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "194291e4-0618-4c82-bd62-f2e450a52665",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64145569-5226-42c1-9335-1e2b6bb9269c",
								"exec": [
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinUpdate\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxUpdate\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfe2ca9b-712a-4545-a3a1-d44c5a952dc6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d62f28a-9bde-4f6c-85bf-4d524eb335b2",
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheAdd\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionAdd\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(true));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57679485-57ae-41d0-b516-56f73de1ffed",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bbc8366c-b3cc-407f-9a8f-c95679625f7d",
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheUpdate\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionUpdate\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(false));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d012ef91-76ca-4a48-ba35-784493232b0f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b5e1f3b-8208-4e3f-8816-ba0c2c7b9b17",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxUpdate\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollUpdate\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeUpdate\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(false));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationUpdate\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerUpdate\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c4dc7ae-4b6a-43ee-9444-aecace73f073",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": false,\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "338f86a2-5098-49b3-a04a-d2a387b393e2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "371620c9-a7e4-41b3-a620-be6564f7f3b7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8ba8088-6f35-45de-98f0-bdea432650af",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete CV",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9227a6ee-a95e-49aa-8a02-57aa41728185",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4bf9413-a3ed-4b79-b5f3-f1644be384c6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd21a43b-c298-44fd-813c-5e2ca5daf824",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Produkt",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae4b5a57-3620-4149-a659-6d8f556a9d0b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.produkt.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"    pm.test(\"_links.explosionszeichnung\", () => pm.expect(a._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"    pm.test(\"_links.teil\", () => pm.expect(a._links.teil[0].href).to.eql(self + \"/teilen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.produkt.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.produkt.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3fe9e4e-a0cb-42e7-ae29-8591c6467157",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieAdd\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieAdd\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabAdd\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteAdd\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochAdd\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungAdd\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungAdd\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgAdd\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellAdd\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauAdd\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtAdd\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungAdd\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ae809e2-7c23-409a-9af3-b4d55d17ad79",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\"))));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderHersteller\": \"{{decoderHersteller}}\",\n    \"decoderBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da4aa23d-a1e0-4061-b80b-62c49469adcb",
								"exec": [
									"pm.test(\"response\", () => pm.test(\"response\", () => pm.response.to.have.status(202)));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cd655c9-daa3-42e5-986e-5d5870af972f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4f588d0-08fa-4b60-9bb0-bba1b36f4caf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "explosionszeichnung",
									"type": "file",
									"src": "{{explosionszeichnungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "47db0a57-1ff1-4a74-8a91-b471c1065d75",
								"exec": [
									"pm.environment.set(\"teilHersteller\", pm.variables.get(\"teilHerstellerAdd\"));\r",
									"pm.environment.set(\"teilBestellNr\", pm.variables.get(\"teilBestellNrAdd\"));\r",
									"pm.environment.set(\"teilBezeichnung\", pm.variables.get(\"teilBezeichnungAdd\"));\r",
									"pm.environment.set(\"teilKategorie\", pm.variables.get(\"teilKategorieAdd\"));\r",
									"pm.environment.set(\"teilUnterKategorie\", pm.variables.get(\"teilUnterKategorieAdd\"));\r",
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c426f667-ba07-4fa3-bea2-4bebc1ac3b34",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"teilHersteller\": \"{{teilHersteller}}\",\n    \"teilBestellNr\": \"{{teilBestellNr}}\",\n    \"bezeichnung\": \"{{teilBezeichnung}}\",\n    \"kategorie\": \"{{teilKategorie}}\",\n    \"unterKategorie\": \"{{teilUnterKategorie}}\",\n    \"anzahl\": {{teilAnzahl}},\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e51a52e-a82f-497f-b9e5-8d9d904864c1",
								"exec": [
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa15265c-ef52-49a0-8a55-7fbee7dfa68e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}?anzahl={{teilAnzahl}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							],
							"query": [
								{
									"key": "anzahl",
									"value": "{{teilAnzahl}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17057768-95bd-4c21-88a7-788acb549e57",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerUpdate\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0ebeaf7-50bc-4e0e-a392-b3f3af9d67fb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderTypHersteller\": \"{{decoderHersteller}}\",\n    \"decoderTypBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc7ab9c4-b2f8-4b73-9f37-7829257e034a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f4c61b1-1932-47fd-9ce2-f7bdafd0361b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8060d1a-a9ff-4b1e-895e-520eb78d1764",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e1e594a-4d57-4946-9b6b-5832da5ecfc8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ccf20c9-52be-42de-80ee-9679abf6b3f0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27bc473d-5c59-4c62-ab89-1060aa2ac9a7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Decoder",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bda7670e-f32b-4f54-904e-af69af489801",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.decoder.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.decoderId;\r",
									"    var add = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"decoderId\", () => pm.expect(a.decoderId).to.exist);\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"status\", () => pm.expect(a.status).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(add));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.decoder.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.decoder.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31239a30-6759-4f4a-8547-7d97b99c34bb",
								"exec": [
									"pm.environment.set(\"hersteller\", \"ESU\");\r",
									"pm.environment.set(\"bestellNr\", \"62400\");\r",
									"pm.environment.set(\"bezeichnung\", \"LokSound M4\");\r",
									"pm.environment.set(\"iMax\", new Number(\"1.1\"));\r",
									"pm.environment.set(\"protokoll\", \"MFX\");\r",
									"pm.environment.set(\"fahrstufe\", new Number(\"28\"));\r",
									"pm.environment.set(\"sound\", new Boolean(\"true\"));\r",
									"pm.environment.set(\"konfiguration\", \"CV\");\r",
									"pm.environment.set(\"stecker\", \"NEM652\");\r",
									"pm.environment.set(\"status\",\"FREI\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29fd825d-1db3-4cf3-a116-3653633381d1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(1));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(\"Primary\"));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(1));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(\"DIGITAL\"));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(1));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(1));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(1));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(\"Adresse\"));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(1));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(80));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(3));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(\"F0\"));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(\"Funktion 0\"));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0163d616-0625-4aba-914c-61e6290dfaf2",
								"exec": [
									"pm.environment.set(\"adIndex\", 1);\r",
									"pm.environment.set(\"adBezeichnung\", \"Primary\");\r",
									"pm.environment.set(\"adSpan\", 1);\r",
									"pm.environment.set(\"adAdressTyp\", \"DIGITAL\");\r",
									"pm.environment.set(\"adWerkseinstellung\", 1);\r",
									"pm.environment.set(\"adAdress\", 30);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb846c74-ede6-4e2a-a8eb-a416f656da6c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/adress/{{adIndex}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adress\", () => pm.expect(jsonData.adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/adress/{{adIndex}}?adress={{adAdress}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"adress",
								"{{adIndex}}"
							],
							"query": [
								{
									"key": "adress",
									"value": "{{adAdress}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "02a8f628-3ef7-432b-9285-aa1fd9ea9af2",
								"exec": [
									"pm.environment.set(\"cvCv\", 1);\r",
									"pm.environment.set(\"cvBezeichnung\", \"Adresse\");\r",
									"pm.environment.set(\"cvMinimal\", 1);\r",
									"pm.environment.set(\"cvMaximal\", 80);\r",
									"pm.environment.set(\"cvWerkseinstellung\", 3);\r",
									"pm.environment.set(\"cvWert\", 45);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dede22cc-a3e9-4978-a2cd-7616b897025b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/cv/{{cvCv}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"wert\", () => pm.expect(jsonData.wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/cv/{{cvCv}}?wert={{cvWert}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"cv",
								"{{cvCv}}"
							],
							"query": [
								{
									"key": "wert",
									"value": "{{cvWert}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "158010d8-e828-4e3b-ad12-40eb50943a5b",
								"exec": [
									"pm.environment.set(\"fnReihe\", 1);\r",
									"pm.environment.set(\"fnFunktion\", \"F0\");\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9c1dc78-ed98-4e32-8752-a54fa46b7e64",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(false));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/funktion/{{fnReihe}}/{{fnFunktion}}?bezeichnung={{fnBezeichnung}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							],
							"query": [
								{
									"key": "bezeichnung",
									"value": "{{fnBezeichnung}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ea0c51a-5d41-483c-8b48-39bb4bd82047",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"protokoll\", \"DCC\");\r",
									"pm.environment.set(\"fahrstufe\", 28);\r",
									"pm.environment.set(\"status\", \"BASTLER\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0870e3d-8d8d-445a-aa84-d1e5348953ce",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"decoderId\": \"{{decoderId}}\",\n    \"hersteller\": \"{{decoderHersteller}}\",\n    \"bestellNr\": \"{{decoderBestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": \"{{fahrstufe}}\",\n    \"status\": \"{{status}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90d2d993-c7f0-49a4-884f-1e7086204d77",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3876a0f7-77ed-4c7c-b2f9-254750836b5a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Artikel",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3dc26f3-495f-4bec-ac9b-8889e28a3878",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.artikel.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.artikelId;\r",
									"    pm.test(\"artikelId\", () => pm.expect(a.artikelId).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"anderungen\", () => pm.expect(a.anderungen).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.anderung\", () => pm.expect(a._links.anderung[0].href).to.eql(self + \"/anderungen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.artikel.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.artikel.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "147866ee-048b-49e0-97a5-94ee01e527f6",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNrAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"unterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"lange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"massstab\", \"H0\");\r",
									"pm.environment.set(\"spurweite\", \"H0\");\r",
									"pm.environment.set(\"epoch\", \"III\");\r",
									"pm.environment.set(\"bahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"gattung\", \"BR89.0\");\r",
									"pm.environment.set(\"betreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"achsfolg\", \"CH2T\");\r",
									"pm.environment.set(\"aufbau\", \"LK\");\r",
									"pm.environment.set(\"licht\", \"L1V\");\r",
									"pm.environment.set(\"kupplung\", \"RELEX\");\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"status\", \"GEKAUFT\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a63c057-d205-4dcc-b192-ef80d06f8f52",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"artikelId\", jsonData.artikelId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": false\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8099b657-71ed-44e7-be98-d29bb8fa9c42",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ab78c9e-0354-48f2-ba53-cbd0bd6dfc94",
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"UMGEBAUT\");\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStatus\", \"GEKAUFT\");\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d438fb3-479f-43f7-a918-d911c3931eef",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"anderungId\", jsonData.anderungId);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d7416f5c-2b68-4c8d-90eb-8922e2f9af03",
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"REPARIERT\");\r",
									"pm.environment.set(\"anBezeichnung\",  pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90fb265b-4852-41d2-bc75-c71addd64f09",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9529a682-7d1e-4efc-bd20-975b523d45b9",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerUpdate\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNr\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"//pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"//pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"//pm.environment.set(\"lange\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"//pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"//pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"//pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"//pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"//pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"//pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"//pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"//pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"//pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"status\", \"BASTELN\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32cb5605-bd95-483d-91ab-93bc30f717eb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"artikelId\": \"{{artikelId}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62b7054d-37a3-4522-acac-7ba24c31cfa6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d788e4ac-6639-4142-9f4c-7bcf70bb9efe",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38c83361-5f08-4682-ae9c-b4f0a17d4c71",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "129251ec-9642-452f-9b7c-9e07450ef027",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zug",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38eaaaa-8c60-4c54-8361-926c76fdbc53",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.zug.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.consist\", () => pm.expect(a._links.consist[0].href).to.eql(self+\"/consist\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.zug.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.zug.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a3142e2a-2f6c-4487-b5e0-00740feb0079",
								"exec": [
									"pm.environment.set(\"zug\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "679751e1-f529-4960-8746-1a7f0059b5c0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.consist\", () => pm.expect(jsonData._links.consist[0].href).to.eql(self+\"/consist\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1a287b8-1f6d-4089-b590-48cef931e5b8",
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00001\");\r",
									"pm.environment.set(\"cnPosition\", 1);\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"3000\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BR 89.0\");\r",
									"pm.environment.set(\"cnKategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"cnUnterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BR89.0\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b1df63a-1522-4a58-86a4-5ed3802b6e93",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"cnPosition\", jsonData.position);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a45e4fcb-dfc1-4e9f-813c-11cd34466443",
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00002\");\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"4007\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BI\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BI\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"29 758 Stg\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80e2ee65-9170-44e0-b2d2-64e06e775798",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist/{{cnPosition}}?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist",
								"{{cnPosition}}"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24878891-b0f4-423d-a60c-202daa614738",
								"exec": [
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypUpdate\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bd372c0-73fc-4e38-a38f-7412c0e27c3d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"consist[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"consist[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"consist[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"consist[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"consist[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"consist[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"consist[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"consist[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"consist[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"consist[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"consist[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"consist[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"consist[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"consist[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"consist[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "122c0792-4c34-41da-95a0-4af906e5a618",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"consist[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"consist[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"consist[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"consist[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"consist[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"consist[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"consist[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"consist[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"consist[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"consist[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"consist[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"consist[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"consist[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"consist[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"consist[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f8b27f1-357b-4ded-a337-f1ffb8d87330",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist/1",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81876ef3-c919-4d5a-9322-05349c91f3e1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Open Api",
			"item": [
				{
					"name": "Get Docs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{root}}/v3/api-docs.json",
							"host": [
								"{{root}}"
							],
							"path": [
								"v3",
								"api-docs.json"
							]
						},
						"description": "http://LINEPRO2.home:8086/ModellBahn/api/swagger/swagger."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Export",
			"item": [
				{
					"name": "Achsfolg",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderAdress",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderCv",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderFunktion",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTypAdress",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTypCv",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTypFunktion",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTyp",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "MotorTyp",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/produktTeil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produktTeil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "UnterKategorie",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zugConsist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugConsist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "ZugTyp",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Achsfolg",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderAdress",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderCv",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderFunktion",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTypAdress",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTypCv",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTypFunktion",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "DecoderTyp",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "MotorTyp",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/produktTeil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produktTeil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "UnterKategorie",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zugConsist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugConsist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "ZugTyp",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": []
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "username",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3aee076e-caba-498e-8b59-21ffe8afe28f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3039acd9-eb8b-452f-8a07-9bd8ae6bb242",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dab237a4-2a2e-4157-a5b1-992f64372cf0",
			"key": "host",
			"value": "127.0.0.1"
		},
		{
			"id": "36e54087-723b-40e3-b2f6-69ade55c2911",
			"key": "port",
			"value": ":8086"
		},
		{
			"id": "fc401ebb-a8f6-4a6d-a78b-4ace892b4085",
			"key": "server",
			"value": "http://{{host}}{{port}}"
		},
		{
			"id": "d72138de-5721-4151-b3c1-0ad6fd67b74b",
			"key": "root",
			"value": "{{server}}/ModellBahn"
		},
		{
			"id": "f70532d9-f7a1-4878-9c3e-d865c9620d1c",
			"key": "api",
			"value": "{{root}}/api"
		},
		{
			"id": "6ac40dc1-f9a0-40aa-bb49-4a38cc64381d",
			"key": "language",
			"value": "de"
		},
		{
			"id": "51f529df-6858-4860-8805-240b70c50558",
			"key": "achsfolgAdd",
			"value": "1C1H2T"
		},
		{
			"id": "c1476b9a-87ba-495b-8c54-1da092108e6b",
			"key": "achsfolgUpdate",
			"value": "COCO"
		},
		{
			"id": "ef9f6f47-b4df-4872-b7dc-26cbb4bb8645",
			"key": "adIndexAdd",
			"value": "1"
		},
		{
			"id": "aba16811-e984-4c95-9192-bf969de5228f",
			"key": "adIndexUpdate",
			"value": "1"
		},
		{
			"id": "93f03f4d-cbec-4396-ad84-07c4ed2aad65",
			"key": "adSpanAdd",
			"value": "2"
		},
		{
			"id": "4639edb8-63d9-4a71-85e9-577958e5ad31",
			"key": "adSpanUpdate",
			"value": "16"
		},
		{
			"id": "35697b0c-5d7a-40ac-b193-4617491aec51",
			"key": "adTypAdd",
			"value": "DIGITAL"
		},
		{
			"id": "b2aab47b-7e7a-45c0-bb7d-b10a7d5fb648",
			"key": "adTypUpdate",
			"value": "DELTA"
		},
		{
			"id": "5cedc991-46af-45be-b148-51c62d8f3df7",
			"key": "adAdd",
			"value": "10"
		},
		{
			"id": "c21daa8c-fa65-49a0-9028-ae333c02146e",
			"key": "adUpdate",
			"value": "80"
		},
		{
			"id": "af9f70e8-12ab-4f2b-bc56-a44000b48fe8",
			"key": "anderungAdd",
			"value": "1"
		},
		{
			"id": "c1daf3b0-3504-45ca-9717-4449aefd13f1",
			"key": "anderungUpdate",
			"value": "1"
		},
		{
			"id": "4e079951-de12-4e88-8ae0-7e467077d2e1",
			"key": "antriebAdd",
			"value": "DAMPF"
		},
		{
			"id": "ed9232ea-34f4-4f27-a58f-ff04e45ec07f",
			"key": "antriebUpdate",
			"value": "ELEKTRO"
		},
		{
			"id": "bcad1d4f-2ccd-47d3-85fd-f361136b967a",
			"key": "artikelAdd",
			"value": "00001"
		},
		{
			"id": "eb4f0b3d-e5d5-4070-87a4-e2aae819abca",
			"key": "artikelUpdate",
			"value": "00001"
		},
		{
			"id": "54071ca8-4f6c-4486-ae56-1ad1d47ba3f3",
			"key": "aufbauAdd",
			"value": "LK"
		},
		{
			"id": "5450cea7-aa0b-446d-9d8e-699ab8c0e8d3",
			"key": "aufbauUpdate",
			"value": "LK"
		},
		{
			"id": "ca189017-f546-4109-a924-95b97f3ceb1a",
			"key": "bestellNrAdd",
			"value": "3000"
		},
		{
			"id": "605b4e32-8c83-4164-b250-be4a4b68973b",
			"key": "bestellNrUpdate",
			"value": "3003"
		},
		{
			"id": "002ddaff-e8bc-42b4-9e0a-06ab0e7c5c67",
			"key": "bahnverwaltungAdd",
			"value": "DB"
		},
		{
			"id": "17e6fc83-5b09-4c26-94d5-1c1dc96e7475",
			"key": "bahnverwaltungUpdate",
			"value": "DBAG"
		},
		{
			"id": "6a4f8b18-fea3-4fbd-8cd6-8c359d26d34e",
			"key": "cvAdd",
			"value": "8"
		},
		{
			"id": "7cbbe50e-585f-40f6-8ad6-730780ee6f46",
			"key": "cvUpdate",
			"value": "120"
		},
		{
			"id": "592a58bd-637a-4172-8194-b6eb0337774f",
			"key": "cvMaxAdd",
			"value": "63"
		},
		{
			"id": "afc462e9-7ed1-484a-8934-7a427edf7fbe",
			"key": "cvMaxUpdate",
			"value": "80"
		},
		{
			"id": "ba3824df-1069-4c1d-8c4d-bd338b2b4b6a",
			"key": "cvMinAdd",
			"value": "0"
		},
		{
			"id": "e6f0d63e-e58c-4a8b-b29d-0296112204a6",
			"key": "cvMinUpdate",
			"value": "1"
		},
		{
			"id": "db6eb5be-c596-4d04-b5be-90a55632da0f",
			"key": "cvValueAdd",
			"value": "30"
		},
		{
			"id": "8a44ed0b-8ccd-4a10-8fb7-deacb6686719",
			"key": "cvValueUpdate",
			"value": "50"
		},
		{
			"id": "51848cc3-7def-46b9-8fff-ba6e999fb470",
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"id": "0a972ab2-e67b-4a3c-af92-75a9668fe363",
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"id": "bbbbb344-3c34-4b8f-98b6-8019ccd23d72",
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"id": "15aa1e18-2939-4473-80bb-27b1ac5e2521",
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"id": "342b5909-5492-4b02-b518-ced6e696e2db",
			"key": "decoderHerstellerAdd",
			"value": "ESU"
		},
		{
			"id": "b0dbcc61-387b-4fef-8b82-38c4c753320b",
			"key": "decoderHerstellerUpdate",
			"value": "ESU"
		},
		{
			"id": "7b82f642-f228-47ba-9953-2bbf5c3c87bc",
			"key": "decoderBestellNrAdd",
			"value": "62400"
		},
		{
			"id": "97949919-8848-4e0e-b9b7-00641d02409b",
			"key": "decoderBestellNrUpdate",
			"value": "62499"
		},
		{
			"id": "7b44ccd6-8723-419c-9877-1783c9c33fe5",
			"key": "decoderBezeichnungAdd",
			"value": "LokSound M4"
		},
		{
			"id": "f95f6246-a237-4c81-a873-e087c8da50c0",
			"key": "epochAdd",
			"value": "IV"
		},
		{
			"id": "ca00e858-4aeb-468d-9c47-434000830974",
			"key": "epochUpdate",
			"value": "IV"
		},
		{
			"id": "3718bc66-6b78-42c0-aaec-822049e8403c",
			"key": "fahrstufeAdd",
			"value": "27"
		},
		{
			"id": "a28fb9f7-370b-442d-9dfb-0afdb2e9070e",
			"key": "fahrstufeUpdate",
			"value": "128"
		},
		{
			"id": "0a933290-056d-4acc-9131-72e036dcce25",
			"key": "fnFuntionAdd",
			"value": "F0"
		},
		{
			"id": "fec54101-46eb-4c2e-9133-eee4902e7af6",
			"key": "fnFuntionUpdate",
			"value": "F0"
		},
		{
			"id": "47acd624-3390-46b7-a115-13c0407c01d2",
			"key": "fnReiheAdd",
			"value": "1"
		},
		{
			"id": "9ef4dab9-dd02-4214-bc4f-5c30925a0dfa",
			"key": "fnReiheUpdate",
			"value": "1"
		},
		{
			"id": "ce1cbcc6-92ac-4085-b808-54b6e9f5297c",
			"key": "gattungAdd",
			"value": "BR89.0"
		},
		{
			"id": "ea8e0de7-98a8-4b1f-9313-edf77c67045f",
			"key": "gattungUpdate",
			"value": "BR89.0"
		},
		{
			"id": "6f4084bf-3b92-41fb-990d-998c807bcce3",
			"key": "herstellerAdd",
			"value": "MARKLIN"
		},
		{
			"id": "77bf648c-6ea9-47d3-97be-803d976b05f5",
			"key": "herstellerUpdate",
			"value": "MARKLIN"
		},
		{
			"id": "fe3f14aa-0168-45ad-8c4e-c896e4173c95",
			"key": "iMaxAdd",
			"value": "1.5"
		},
		{
			"id": "2f9f4ca6-9783-41d7-b9ab-76a6a15eb871",
			"key": "iMaxUpdate",
			"value": "2.0"
		},
		{
			"id": "395553b3-6f10-487a-807a-dd20d3c69773",
			"key": "kategorieAdd",
			"value": "LOKOMOTIV"
		},
		{
			"id": "7611e4d5-155f-4ee1-82fd-48e170ac1157",
			"key": "kategorieUpdate",
			"value": "AUSGESTALTUNG"
		},
		{
			"id": "ca69dd46-4389-4dca-90d3-de201e921722",
			"key": "kupplungAdd",
			"value": "RELEX"
		},
		{
			"id": "e2d4a5b7-ee67-4bd8-b722-538c4c4e32f6",
			"key": "kupplungUpdate",
			"value": "RELEX"
		},
		{
			"id": "c5e03f46-b610-4c66-8a9f-efad2ae1526f",
			"key": "konfigurationAdd",
			"value": "CV"
		},
		{
			"id": "00b9dc18-cdcd-4515-9744-9e08ae92a511",
			"key": "konfigurationUpdate",
			"value": "STECKER"
		},
		{
			"id": "2256b129-ce95-48dc-aeef-f27adcc1c8cd",
			"key": "leistungsubertragungAdd",
			"value": "MECHANISH"
		},
		{
			"id": "7ef49cc8-b627-49f8-9d73-5c0c38d83203",
			"key": "leistungsubertragungUpdate",
			"value": "ELEKTRISH"
		},
		{
			"id": "f5460ca3-ce00-4020-8d00-0f2aeeed3eaf",
			"key": "lichtAdd",
			"value": "L1V"
		},
		{
			"id": "68274f73-e62a-4ba8-bc84-70143bedab2f",
			"key": "lichtUpdate",
			"value": "L1V"
		},
		{
			"id": "c6dc4174-3da8-4391-b812-13ee1999ea42",
			"key": "massstabAdd",
			"value": "H0"
		},
		{
			"id": "4342221a-e133-43f0-8fa2-44dd6237338a",
			"key": "massstabUpdate",
			"value": "H0"
		},
		{
			"id": "71d0eaf8-9cfe-4eac-ae6f-a1b8367fd3e4",
			"key": "motorTypAdd",
			"value": "CSINUS"
		},
		{
			"id": "70b8e264-5043-40cd-ba1e-28df789c48c1",
			"key": "motorTypUpdate",
			"value": "CSINUS"
		},
		{
			"id": "225b07f1-bdb8-40b2-a68f-f3b252362ed2",
			"key": "protokollAdd",
			"value": "MFX"
		},
		{
			"id": "173c24cb-dde3-49d2-aed4-1c897333071f",
			"key": "protokollUpdate",
			"value": "DELTA"
		},
		{
			"id": "0792f6ac-ae2e-49f4-af2d-4062d47f2c55",
			"key": "sondermodellAdd",
			"value": "MM"
		},
		{
			"id": "149cd77c-6bf7-44c8-bc48-ff5caa0ffe37",
			"key": "sondermodellUpdate",
			"value": "MM"
		},
		{
			"id": "172fdd20-8728-4a5b-b3cc-5ff773e55bf5",
			"key": "spurweiteAdd",
			"value": "H0"
		},
		{
			"id": "9dd62620-6e8c-47c9-90b3-35868c034ec9",
			"key": "spurweiteUpdate",
			"value": "H0"
		},
		{
			"id": "b11afeb7-e14e-4a6f-9bb5-35118703a7b9",
			"key": "steckerAdd",
			"value": "NEM651"
		},
		{
			"id": "09b57162-77db-460e-a2ad-469db0efe7c6",
			"key": "steckerUpdate",
			"value": "NEM652"
		},
		{
			"id": "f095c5dd-f523-4803-9c05-68ec3c3f938f",
			"key": "steuerungAdd",
			"value": "DIGITAL"
		},
		{
			"id": "134b4342-094e-4ce5-8ddf-399af1746769",
			"key": "steuerungUpdate",
			"value": "DIGITAL"
		},
		{
			"id": "ed574cb2-da36-448c-949c-7232bbd1f64e",
			"key": "teilHerstellerAdd",
			"value": "MARKLIN"
		},
		{
			"id": "911e6721-2499-44a5-9836-f929f1ff1440",
			"key": "teilBestellNrAdd",
			"value": "600300"
		},
		{
			"id": "dbd9dd16-dc96-4f79-89fc-8db81d7c3ee8",
			"key": "teilKategorieAdd",
			"value": "ERSATZTEIL"
		},
		{
			"id": "130c32e9-f288-4cfd-8e44-e7a726c4ef8a",
			"key": "teilUnterKategorieAdd",
			"value": "BURSTEN"
		},
		{
			"id": "803a0095-05d5-4fcd-9a8f-7b48d69db595",
			"key": "unterKategorieAdd",
			"value": "DAMPF"
		},
		{
			"id": "fed71b40-0025-4106-8243-278359862384",
			"key": "unterKategorieUpdate",
			"value": "HECKEN"
		},
		{
			"id": "926f0f9f-a513-4c36-840e-a238dc40ed60",
			"key": "teilBezeichnungAdd",
			"value": "Bürsten"
		},
		{
			"id": "e47f02fe-b04f-4b8b-a72d-cd519b8f4601",
			"key": "vorbildAdd",
			"value": "HECKEN"
		},
		{
			"id": "bb103f68-544c-4146-9225-fda4a559c04e",
			"key": "vorbildUpdate",
			"value": "HECKEN"
		},
		{
			"id": "01d629c5-68c5-4327-a3d7-6b87e078f091",
			"key": "zugAdd",
			"value": "BAVARIA"
		},
		{
			"id": "a8f16e77-5abd-4337-a93c-dc80ae3ce463",
			"key": "zugUpdate",
			"value": "BAVARIA"
		},
		{
			"id": "e887a9aa-862b-4c2b-a304-a58141b4f33f",
			"key": "zugTypAdd",
			"value": "TEE"
		},
		{
			"id": "eaaac2e8-49a9-49de-9016-c6e682815184",
			"key": "zugTypUpdate",
			"value": "TEE"
		},
		{
			"id": "5450c59d-2ebc-43ca-bcab-0633f5d9052f",
			"key": "imageFile",
			"value": "3000.jpg"
		},
		{
			"id": "d261eeb9-d256-42ea-9858-fc6c32fd79c0",
			"key": "anleitungFile",
			"value": "3000_betrieb.pdf"
		},
		{
			"id": "24a95a99-56a5-48cf-bc11-369fce91ba30",
			"key": "explosionszeichnungFile",
			"value": "3000_explo.pdf"
		},
		{
			"id": "f70d97be-c739-41db-af96-c86ea0ddd265",
			"key": "xlFile",
			"value": "3000.jpg"
		},
		{
			"id": "5b28c440-ede7-4ec7-a545-eb10c8c655f5",
			"key": "landAdd",
			"value": "DE"
		},
		{
			"id": "19d71cb8-e6e0-4bed-9dc8-27176dde3b36",
			"key": "landUpdate",
			"value": "NL"
		},
		{
			"id": "37946fe7-e1cc-4ea7-924e-66d39698bfd9",
			"key": "telefonAdd",
			"value": "+497161608222"
		},
		{
			"id": "77632210-db46-4c37-8c27-8a87d0ed773d",
			"key": "telefonUpdate",
			"value": "030 2341347"
		}
	],
	"protocolProfileBehavior": {}
}