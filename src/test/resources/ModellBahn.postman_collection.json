{
	"info": {
		"_postman_id": "cae02108-4ce2-4081-9902-9862e3c61dc8",
		"name": "ModellBahn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Enums",
			"item": [
				{
					"name": "Adress Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d09a62a7-966c-4f34-8f5a-eea36e9b9397",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/adressTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"adressTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderungs Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20fea0ff-17ef-4ae5-af26-bdfe7f76ddcd",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/anderungsTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"anderungsTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf090dfe-7d1a-4d0d-885f-2a050ca8d2d5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Konfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1262c255-9145-448d-a33a-c09d0a77e537",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/konfiguration",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"konfiguration"
							]
						}
					},
					"response": []
				},
				{
					"name": "leistungsubertragung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fa36ad5-dd6c-4b12-99e8-d23d2f25c95e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/leistungsubertragung",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"leistungsubertragung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b1995b2-909e-4838-9b25-8ef926080e9f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/status",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stecker",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16833522-e54e-43d5-a822-f46c0d1fc015",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/enums/stecker",
							"host": [
								"{{api}}"
							],
							"path": [
								"enums",
								"stecker"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Achsfolg",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07fa779d-62c2-4cd5-844b-a42d27be078e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.achsfolg.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.achsfolg.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.achsfolg.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e07776e2-5e40-4e41-b45a-9fb5100c9d30",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b7b5a32-4de6-4084-94a6-8ee2fd18cdef",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55ea4080-9d65-4a6d-bdd7-87bef03981d0",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9c2a0300-7cff-4395-8f1a-c5d2a93bd7ac",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1750c989-afe4-4ba3-96aa-652deb2138b6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/achsfolg\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/achsfolg/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7c6576e-b189-4083-8c0d-d92900431c63",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/achsfolg/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"achsfolg",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Antrieb",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f5fb714-e0ed-4be4-9bef-47dd659ea768",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.antrieb.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.antrieb.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.antrieb.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "97a1c87e-8d8e-430c-84dd-81df1bc3474e",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2067f7f8-72bf-4545-8267-b195ea5a9e8c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96ef493d-d331-4c50-a97b-c27214c0f410",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69f154bf-1382-413e-b21f-a2474721747d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df069a68-75b6-4e20-b873-ab148c539bf7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/antrieb\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/antrieb/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81ecfaac-8572-4a09-95a0-4ca8655ab694",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/antrieb/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"antrieb",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Aufbau",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82912630-501c-4300-bf5e-d319447717e1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.aufbau.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.aufbau.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.aufbau.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d286beb-c746-42e9-a7dc-8869141059a1",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a867605f-2f06-4b7c-832b-e44c052d52de",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9630657a-d4a4-4b20-82f8-dde4f6e21126",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80834bc1-1508-471b-a7f9-d9725c53dc2c",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "279f9c82-45d7-4252-bee9-a28c42ed49d1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "014b0d25-8deb-467e-9fa1-71657deb166c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/aufbau/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0549d632-4557-4035-9d58-e9085ba327e7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/aufbau\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/aufbau/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c11ccb2-6897-4cc6-98ed-3a7237f556c4",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/aufbau/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"aufbau",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bahnverwaltung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e5c5b90-9211-4fe7-a931-3a012da1c62f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.bahnverwaltung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.bahnverwaltung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.bahnverwaltung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "818e1383-c4b9-45da-83e1-a82f08087dc3",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32bdf354-1c1d-435f-a469-5065ad233a50",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cfaa007f-2d2b-4463-b481-dd7a8263203c",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.replaceIn(\"{{$randomCountryCode}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46c1bd50-7943-4ce6-8896-940dac95888b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc93beb3-6959-46e0-a5ca-ad46020ae3c1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/bahnverwaltung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/bahnverwaltung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "631a52a8-95a5-4a3a-89c8-14c4daebe862",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/bahnverwaltung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"bahnverwaltung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Epoch",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9f6b0e2-b678-4c0b-a183-eabbc6efc71f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.epoch.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.epoch.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.epoch.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2ea6442e-c026-4363-85da-7de125c265b5",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b30070db-cd48-47c4-87ac-9e92d61f332d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6be3fdf1-f6e9-44cf-bca7-f98e7c3cedd0",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b89d67a-b6da-4ced-82ab-70731985a8be",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4913a175-a258-459e-9dd3-7cf1b4f31e66",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/epoch\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/epoch/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06d47ba0-3ed0-4f12-a77d-4ee0bad3b660",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/epoch/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"epoch",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Gattung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1757ad27-d85c-4738-9c7a-7be946a678dc",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.gattung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.gattung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.gattung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e722aa72-10de-40db-a2b3-9f6def5024b5",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bb1c88f-1372-4218-b2a2-d5fc8236ed41",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc1b19f1-1b0d-4236-b890-8be43bf0ad11",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f89776ef-2429-4fec-bffe-7b1dd66a5253",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12a634d6-b4e8-4a2a-aceb-0c5663c7700a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/gattung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/gattung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fba5d39-1d78-493c-a1f3-2f6373705819",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/gattung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"gattung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Hersteller",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc43ef01-e836-437e-a8c8-f57f0fcfc5bd",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.hersteller.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.hersteller.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.hersteller.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "92c32139-a18d-4041-a4b1-c968077f7201",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landAdd\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonAdd\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d67e0d82-696d-4282-9892-92f04a8d84c3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f808f922-833a-48f5-81bd-22d9619b9060",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"url\", pm.variables.replaceIn(\"{{$randomUrl}}\"));\r",
									"pm.environment.set(\"land\", pm.variables.get(\"landUpdate\"));\r",
									"pm.environment.set(\"telefon\", pm.variables.get(\"telefonUpdate\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3ab0dc58-9d32-49ad-84a2-d12f85ae3422",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"url\": \"{{url}}\",\n\t\"telefon\": \"{{telefon}}\",\n\t\"land\": \"{{land}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa248dc0-4f7c-480d-8b3e-5f863705d9fb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/hersteller\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/hersteller/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"url\", () => pm.expect(jsonData.url).to.eql(pm.variables.get(\"url\")));\r",
									"pm.test(\"telefon\", () => pm.expect(jsonData.telefon).to.eql(pm.variables.get(\"telefon\")));\r",
									"pm.test(\"land\", () => pm.expect(jsonData.land).to.eql(pm.variables.get(\"land\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38921a8a-2c55-4e47-8132-10bdcc5ea3a2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/hersteller/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"hersteller",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Kupplung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be00ad18-7018-4ac4-bc74-8c5cf8ba38d8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kupplung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kupplung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kupplung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7298754f-bde0-4d91-bd82-5a8dd9bbdf07",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35432ea6-b843-4b72-9834-cd1550b37437",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47b3f8cf-daf9-4d9a-a1f1-e2b1fddbe081",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dab1d909-351c-44e1-9ef8-ee2fe3cc3abf",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4eb3401e-289a-4c4e-aa22-d2acd80a4651",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7066aad5-415d-42d9-a723-80c233ac986e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/kupplung/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bb10a5d-f765-4293-8bfb-eb08e74c0ddd",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kupplung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kupplung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0a6e8b4-e737-4ad8-b94f-2b94c6c16cbd",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kupplung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kupplung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Licht",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f221759-8d76-43d1-a538-612d97ffcc2b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.licht.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self+\"/abbildung\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.licht.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.licht.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cc80d09-11c8-475b-9425-2d02a2023144",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "643607b6-e920-4691-975d-0896f9273c64",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bf7949a-f703-4fcf-8c3d-d13ba1066e3c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4d1c4692-3042-4a4f-a11e-5aff493c7182",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aac2d98f-67ae-4caa-8a6b-5198ab0979ca",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bab153d9-e45e-4405-9b47-506d8be50091",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/licht/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14a885a9-6af0-444e-9345-a3ccef9b1cd7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/licht\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/licht/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self+\"/abbildung\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cb7e7c3-e3cc-4b30-9efc-2500a7c83606",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/licht/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"licht",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Massstab",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0df0bbe-9774-4311-8402-9f1c5d5ed7b7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.massstab.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.massstab.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.massstab.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c26449e2-6b14-4ea7-92b4-38e6dd770cf5",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d299c0ed-64f4-495a-9590-8c98ed9e07ce",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a9374950-834a-44c0-81ff-9545deaec6e2",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6601beb1-320d-4b97-900b-0214ad3d09df",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b825d2c2-8a6f-4ff2-8b24-39d9f0358561",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/massstab\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/massstab/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d3a0237-8bc3-4959-ae50-52dd359fd15c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/massstab/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"massstab",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Motor Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdd48c58-3ebe-44d8-8b26-c3d634358e81",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.motorTyp.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.motorTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.motorTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10d3b066-f40f-4fa6-afba-5d46c8acfcb4",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc69af87-1e15-4829-9612-597a0e93b27e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cb4f034-bf38-4a3c-8f28-8d41524ec7a7",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5f3cbd5-0e9a-4c21-a672-ef527f9228aa",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36024c41-8b48-4534-adb9-15470ce2e8c8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/motorTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/motorTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bda0b752-69ec-462f-96dd-0197c687add2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/motorTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"motorTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Protokoll",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "656f4289-b371-4ba8-8300-1ce882a9bbc0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.protokoll.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.protokoll.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.protokoll.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ad60d3b-5c22-4353-a900-67555525024d",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "59b0f3d8-eda8-45ad-b3a9-5d5ea86f5f0b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c44d41fc-3525-435f-9329-b78188cc49fd",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68fcdb1f-5748-4372-8fb7-87e78333f0fc",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "115f5588-273a-4f38-bf1b-a084adcd6d37",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/protokoll\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/protokoll/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d81d384f-eb13-4f82-909e-f9fcb1e5bdef",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/protokoll/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"protokoll",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sondermodell",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9713cac2-4784-4713-a556-336f0c84cd71",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.sondermodell.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.sondermodell.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.sondermodell.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "209485c9-c024-431e-9cdc-44c97cbfb8db",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db60a738-0ed3-4d18-8a57-737e7dbde350",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16b64491-6334-440e-bd90-8f07f06512a0",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "329a19d9-0f67-4eef-8938-f7351e9c6f25",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1de0254-e4e7-4014-9b3d-743fa6a69cbe",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/sondermodell\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/sondermodell/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b87445dc-ac3e-43a3-bef4-62764287db64",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/sondermodell/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"sondermodell",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Spurweite",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b55fee4-fa2b-4abb-824f-51415fc93930",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.spurweite.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.spurweite.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.spurweite.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2cbea82-0768-4abb-a789-f9a5dd890b71",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0f197d9-19a1-4be8-a8a8-c4f431e0d7a7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f19f169-9ac6-40ca-92d5-467452d29638",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6e283a1-8528-4e3c-a5f2-8e201a34992a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33b222bf-da05-438f-969b-5f137d3bf495",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/spurweite\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/spurweite/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae8a916-57a3-4a32-b673-ccec90042995",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/spurweite/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"spurweite",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Steuerung",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "175f940a-37a0-4de8-bd63-576030bf0916",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.steuerung.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.steuerung.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.steuerung.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c23fafd-93b3-4615-a734-0a2516a79b67",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d238129e-3c96-42fd-8073-896a9d7a2beb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d5d1178-c59e-40dc-8a66-af7d3d394b37",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "549a001a-950e-4edf-abdf-3beb8bcf99aa",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7be98bd6-0bb2-495c-928c-61722c720211",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/steuerung\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/steuerung/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94800e42-4b20-4477-84c9-33400c0485c0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/steuerung/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"steuerung",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zug Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb9fee73-2965-440d-b326-cde1ee699ef7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.zugTyp.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.zugTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.zugTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be0cb381-7557-4de6-948b-0a7bd922a996",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4ddf1ca-bf40-4902-869a-3af54c5df0ab",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e8bd1f17-c4cb-42a6-a065-7cb239bc86d6",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "631d1f6c-0f02-41f5-9d2f-008aee8c3bf3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7153f535-cf52-46e1-b052-bbcaf6da6ea1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zugTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zugTyp/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "615d2af9-ff24-4c40-9fa1-bc5b466baf07",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zugTyp/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zugTyp",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Kategorie",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c150b055-60ce-41eb-8d07-2ad7e431ec2d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kategorie.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"unterKategorien\", () => pm.expect(a.unterKategorien).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(a._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a76f7f4e-0ef3-4d8d-bb90-8a255d25371a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.kategorie.forEach(function(k) { \r",
									"    var self = root + \"/\" + k.name;\r",
									"    pm.test(\"name\", () => pm.expect(k.name).to.be.oneOf([\"AUSGESTALTUNG\",\"BELEUCHTUNG\"]));\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(k.bezeichnung).to.exist);\r",
									"    k.unterKategorien.forEach(function(u){\r",
									"        pm.expect(u.kategorie).to.eql(k.name);\r",
									"        pm.expect(u.name).to.exist;\r",
									"        pm.expect(u.bezeichnung).to.exist;\r",
									"        pm.expect(u.deleted).to.be.false;\r",
									"        pm.expect(u._links.parent[0].href).to.eql(self);\r",
									"        pm.expect(u._links.update[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"        pm.expect(u._links.delete[0].href).to.eql(self+\"/unterKategorien/\"+u.name);\r",
									"    });\r",
									"    pm.test(\"deleted\", () => pm.expect(k.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(k._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(k._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(k._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(k._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(k._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.unterKategorie\", () => pm.expect(k._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));\r",
									"});\r",
									"root = pm.variables.replaceIn(\"{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG\");\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.kategorie.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/unterKategorien?kategorien=AUSGESTALTUNG,BELEUCHTUNG",
							"host": [
								"{{api}}"
							],
							"path": [
								"unterKategorien"
							],
							"query": [
								{
									"key": "kategorien",
									"value": "AUSGESTALTUNG,BELEUCHTUNG"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c627586-930d-4b1d-8cc2-fd3d04f88914",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f3e9b5c7-e2f8-429b-a3b4-9b5b685435fc",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(undefined));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6875f21-7561-4b23-bbea-4f110a1c6b2c",
								"exec": [
									"pm.environment.set(\"unterAdd\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c726164-96f8-49b9-9f6c-fb4b8a7ed72d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unter Kategorie",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99cb5dcf-2078-47af-9ae5-524cc0268681",
								"exec": [
									"pm.environment.set(\"unterBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d125cf26-4de8-4747-93b9-4d819833d27e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kategorie\": \"{{name}}\",\n\t\"name\": \"{{unterAdd}}\",\n\t\"bezeichnung\": \"{{unterBezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cdb9579e-ab97-4ac7-8f2b-c2608c432eb9",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "079d3d1e-2966-4f4b-93af-935ea128c139",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25f567a6-3174-40c8-b25b-08dd0907c7cf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/kategorie\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}\");\r",
									"var child = pm.variables.replaceIn(\"{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"unterKategorien.length\", () => pm.expect(jsonData.unterKategorien.length).to.eql(1));\r",
									"pm.test(\"unterKategorien[0].kategorie\", () => pm.expect(jsonData.unterKategorien[0].kategorie).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"unterKategorien[0].name\", () => pm.expect(jsonData.unterKategorien[0].name).to.eql(pm.variables.get(\"unterAdd\")));\r",
									"pm.test(\"unterKategorien[0].bezeichnung\", () => pm.expect(jsonData.unterKategorien[0].bezeichnung).to.eql(pm.variables.get(\"unterBezeichnung\")));\r",
									"pm.test(\"unterKategorien[0].deleted\", () => pm.expect(jsonData.unterKategorien[0].deleted).to.be.false);\r",
									"pm.test(\"unterKategorien[0]._links.update\", () => pm.expect(jsonData.unterKategorien[0]._links.update[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.delete\", () => pm.expect(jsonData.unterKategorien[0]._links.delete[0].href).to.eql(child));\r",
									"pm.test(\"unterKategorien[0]._links.parent\", () => pm.expect(jsonData.unterKategorien[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.unterKategorie\", () => pm.expect(jsonData._links.unterKategorie[0].href).to.eql(self+\"/unterKategorien\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a64b7ac5-7e30-489d-8b70-3a28020bae72",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}/unterKategorien/{{unterAdd}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}",
								"unterKategorien",
								"{{unterAdd}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe62b24-4213-4ca7-a6c6-947a7c6c8945",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/kategorie/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"kategorie",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Vorbild",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dd299c2-38ef-49b5-bf6a-956e7a58e43c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.vorbild.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"gattung\", () => pm.expect(a.gattung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.vorbild.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.vorbild.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c292649c-870a-45b1-a84a-697b0ad6491b",
								"exec": [
									"pm.environment.set(\"name\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungAdd}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieAdd}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieAdd}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungAdd}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebAdd}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgAdd}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0, 10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungAdd}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "397046b0-5a4e-4747-a83f-0fbd946af6bf",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff05c751-43d2-4f06-9e89-c722a4f67860",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b00c6fb-04bf-4cee-88a8-b01b8ba1992d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e61d1a4c-7b52-45be-a1da-b80758a83e04",
								"exec": [
									"pm.environment.set(\"gattung\", pm.variables.replaceIn(\"{{gattungUpdate}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.replaceIn(\"{{kategorieUpdate}}\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.replaceIn(\"{{unterKategorieUpdate}}\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.replaceIn(\"{{bahnverwaltungUpdate}}\"));\r",
									"pm.environment.set(\"hersteller\", pm.variables.replaceIn(\"{{$randomCompanyName}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"antrieb\", pm.variables.replaceIn(\"{{antriebUpdate}}\"));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.replaceIn(\"{{achsfolgUpdate}}\"));\r",
									"pm.environment.set(\"anfahrzugkraft\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"leistung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dienstgewicht\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"geschwindigkeit\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"ausserdienst\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"dmTreibrad\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradVorn\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"dmLaufradHinten\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"zylinder\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"dmZylinder\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kolbenhub\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kesseluberdruck\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"rostflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"uberhitzerflache\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"wasservorrat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"verdampfung\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"fahrmotoren\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"motorbauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"leistungsubertragung\", pm.variables.replaceIn(\"{{leistungsubertragungUpdate}}\"));\r",
									"pm.environment.set(\"reichweite\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"kapazitat\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"klasse\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL1\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL2\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL3\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"sitzplatzeKL4\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"aufbau\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"triebkopf\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"mittelwagen\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"drehgestellBauart\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gattung\": \"{{gattung}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"anzahl\": {{anzahl}},\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"antrieb\":\"{{antrieb}}\",\n    \"achsfolg\":\"{{achsfolg}}\",\n    \"leistung\": {{leistung}},\n    \"dienstgewicht\": {{dienstgewicht}},\n    \"geschwindigkeit\": {{geschwindigkeit}},\n    \"lange\": {{lange}},\n    \"ausserdienst\": \"{{ausserdienst}}\",\n    \"dmTreibrad\": {{dmTreibrad}},\n    \"zylinder\": {{zylinder}},\n    \"dmZylinder\": {{dmZylinder}},\n    \"kolbenhub\": {{kolbenhub}},\n    \"kesseluberdruck\": {{kesseluberdruck}},\n    \"rostflache\": {{rostflache}},\n    \"uberhitzerflache\": {{uberhitzerflache}},\n    \"wasservorrat\": {{wasservorrat}},\n    \"verdampfung\": {{verdampfung}},\n    \"fahrmotoren\": {{fahrmotoren}},\n    \"motorbauart\": \"{{motorbauart}}\",\n    \"leistungsubertragung\": \"{{leistungsubertragung}}\",\n    \"reichweite\": {{reichweite}},\n    \"kapazitat\": {{kapazitat}},\n    \"klasse\": {{klasse}},\n    \"sitzplatzeKL1\": {{sitzplatzeKL1}},\n    \"sitzplatzeKL2\": {{sitzplatzeKL2}},\n    \"sitzplatzeKL3\": {{sitzplatzeKL3}},\n    \"sitzplatzeKL4\": {{sitzplatzeKL4}},\n    \"aufbau\": \"{{aufbau}}\",\n    \"triebkopf\": {{triebkopf}},\n    \"mittelwagen\": {{mittelwagen}},\n    \"drehgestellBauart\": \"{{drehgestellBauart}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfc5fc39-802a-4c2c-b945-13dedad23328",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/vorbild/{{name}}/abbildung.jpg\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06cb4c27-6b0b-4066-8683-87132a3bf666",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/vorbild\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/vorbild/{{name}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"anzahl\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"antrieb\", () => pm.expect(jsonData.antrieb).to.eql(pm.variables.get(\"antrieb\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"leistung\", () => pm.expect(jsonData.leistung).to.eql(pm.variables.get(\"leistung\")));\r",
									"pm.test(\"dienstgewicht\", () => pm.expect(jsonData.dienstgewicht).to.eql(pm.variables.get(\"dienstgewicht\")));\r",
									"pm.test(\"geschwindigkeit\", () => pm.expect(jsonData.geschwindigkeit).to.eql(pm.variables.get(\"geschwindigkeit\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"ausserdienst\", () => pm.expect(jsonData.ausserdienst).to.eql(pm.variables.get(\"ausserdienst\")));\r",
									"pm.test(\"dmTreibrad\", () => pm.expect(jsonData.dmTreibrad).to.eql(pm.variables.get(\"dmTreibrad\")));\r",
									"pm.test(\"zylinder\", () => pm.expect(jsonData.zylinder).to.eql(pm.variables.get(\"zylinder\")));\r",
									"pm.test(\"dmZylinder\", () => pm.expect(jsonData.dmZylinder).to.eql(pm.variables.get(\"dmZylinder\")));\r",
									"pm.test(\"kolbenhub\", () => pm.expect(jsonData.kolbenhub).to.eql(pm.variables.get(\"kolbenhub\")));\r",
									"pm.test(\"kesseluberdruck\", () => pm.expect(jsonData.kesseluberdruck).to.eql(pm.variables.get(\"kesseluberdruck\")));\r",
									"pm.test(\"rostflache\", () => pm.expect(jsonData.rostflache).to.eql(pm.variables.get(\"rostflache\")));\r",
									"pm.test(\"uberhitzerflache\", () => pm.expect(jsonData.uberhitzerflache).to.eql(pm.variables.get(\"uberhitzerflache\")));\r",
									"pm.test(\"wasservorrat\", () => pm.expect(jsonData.wasservorrat).to.eql(pm.variables.get(\"wasservorrat\")));\r",
									"pm.test(\"verdampfung\", () => pm.expect(jsonData.verdampfung).to.eql(pm.variables.get(\"verdampfung\")));\r",
									"pm.test(\"fahrmotoren\", () => pm.expect(jsonData.fahrmotoren).to.eql(pm.variables.get(\"fahrmotoren\")));\r",
									"pm.test(\"motorbauart\", () => pm.expect(jsonData.motorbauart).to.eql(pm.variables.get(\"motorbauart\")));\r",
									"pm.test(\"leistungsubertragung\", () => pm.expect(jsonData.leistungsubertragung).to.eql(pm.variables.get(\"leistungsubertragung\")));\r",
									"pm.test(\"reichweite\", () => pm.expect(jsonData.reichweite).to.eql(pm.variables.get(\"reichweite\")));\r",
									"pm.test(\"kapazitat\", () => pm.expect(jsonData.kapazitat).to.eql(pm.variables.get(\"kapazitat\")));\r",
									"pm.test(\"klasse\", () => pm.expect(jsonData.klasse).to.eql(pm.variables.get(\"klasse\")));\r",
									"pm.test(\"sitzplatzeKL1\", () => pm.expect(jsonData.sitzplatzeKL1).to.eql(pm.variables.get(\"sitzplatzeKL1\")));\r",
									"pm.test(\"sitzplatzeKL2\", () => pm.expect(jsonData.sitzplatzeKL2).to.eql(pm.variables.get(\"sitzplatzeKL2\")));\r",
									"pm.test(\"sitzplatzeKL3\", () => pm.expect(jsonData.sitzplatzeKL3).to.eql(pm.variables.get(\"sitzplatzeKL3\")));\r",
									"pm.test(\"sitzplatzeKL4\", () => pm.expect(jsonData.sitzplatzeKL4).to.eql(pm.variables.get(\"sitzplatzeKL4\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"triebkopf\", () => pm.expect(jsonData.triebkopf).to.eql(pm.variables.get(\"triebkopf\")));\r",
									"pm.test(\"mittelwagen\", () => pm.expect(jsonData.mittelwagen).to.eql(pm.variables.get(\"mittelwagen\")));\r",
									"pm.test(\"drehgestellBauart\", () => pm.expect(jsonData.drehgestellBauart).to.eql(pm.variables.get(\"drehgestellBauart\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fd13074-1ec0-4172-87e4-3675be34670d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/vorbild/{{name}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"vorbild",
								"{{name}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Decoder Typ",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1615f32-222f-4e50-9809-fda035deddcb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.decoderTyp.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"    pm.test(\"_links.adress\", () => pm.expect(a._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"    pm.test(\"_links.cv\", () => pm.expect(a._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"    pm.test(\"_links.funktion\", () => pm.expect(a._links.funktion[0].href).to.eql(self+\"/funktion\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.decoderTyp.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.decoderTyp.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3e4acc0-8c60-47e8-aa20-7d531db48024",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxAdd\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollAdd\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeAdd\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(true));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationAdd\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerAdd\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14731c4f-5f5a-47ea-869d-f15aab35957f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": {{gerausch}},\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16569e43-6c99-4664-b2eb-5bd102a3f691",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen\", () => pm.expect(jsonData.adressen).to.be.empty);\r",
									"pm.test(\"cvs\", () => pm.expect(jsonData.cvs).to.be.empty);\r",
									"pm.test(\"funktionen\", () => pm.expect(jsonData.funktionen).to.be.empty);\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "814e5cdc-e520-43a0-b5f3-eff37a32e231",
								"exec": [
									"pm.environment.set(\"adIndex\", new Number(pm.variables.get(\"adIndexAdd\")));\r",
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypAdd\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanAdd\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6f630bde-bd55-49a0-b17c-f8ca08485c20",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34ce3533-9d58-4c27-8058-b19de0674f8c",
								"exec": [
									"pm.environment.set(\"adBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"adTyp\", pm.variables.get(\"adTypUpdate\"));\r",
									"pm.environment.set(\"adSpan\", new Number(pm.variables.get(\"adSpanUpdate\")));\r",
									"pm.environment.set(\"adress\", new Number(pm.variables.get(\"adUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee37be54-d871-4558-96c5-b13a64a0967d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"index\": {{adIndex}},\n\t\"bezeichnung\": \"{{adBezeichnung}}\",\n    \"adressTyp\": \"{{adTyp}}\",\n    \"span\": {{adSpan}},\n    \"werkseinstellung\": {{adress}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1676140-ba4a-4172-bea2-1bb7c9ed5850",
								"exec": [
									"pm.environment.set(\"cv\", new Number(pm.variables.get(\"cvAdd\")));\r",
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinAdd\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxAdd\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueAdd\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "93c822fa-5e21-4804-86e7-240515b77b4a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9e52084-9b2b-47cd-9f12-82ed0b188dc4",
								"exec": [
									"pm.environment.set(\"cvBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"cvMinimal\", new Number(pm.variables.get(\"cvMinUpdate\")));\r",
									"pm.environment.set(\"cvMaximal\", new Number(pm.variables.get(\"cvMaxUpdate\")));\r",
									"pm.environment.set(\"cvValue\", new Number(pm.variables.get(\"cvValueUpdate\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9603931-e4db-4489-b7db-44dc7c5b6602",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"cv\": {{cv}},\n\t\"bezeichnung\": \"{{cvBezeichnung}}\",\n    \"minimal\": {{cvMinimal}},\n    \"maximal\": {{cvMaximal}},\n    \"werkseinstellung\": {{cvValue}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5972207-abca-4937-b858-d5334e6a0a8c",
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheAdd\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionAdd\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(true));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2672e057-cf05-413a-abdb-fd1ad89e2a05",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c2dda2f9-01a7-40f8-a00f-c54648271236",
								"exec": [
									"pm.environment.set(\"fnReihe\", new Number(pm.variables.get(\"fnReiheUpdate\")));\r",
									"pm.environment.set(\"fnFunktion\", pm.variables.get(\"fnFuntionUpdate\"));\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"fnProgrammable\", new Boolean(false));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bccbb68c-3441-4b6f-8e3a-d48ebbdf57f9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n\t\"bestellNr\": \"{{bestellNr}}\",\n    \"reihe\": {{fnReihe}},\n    \"funktion\": \"{{fnFunktion}}\",\n\t\"bezeichnung\": \"{{fnBezeichnung}}\",\n\t\"programmable\": {{fnProgrammable}},\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2cdc6a8d-96b7-427c-9435-e163708a2032",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"iMax\", new Number(pm.variables.get(\"iMaxUpdate\")));\r",
									"pm.environment.set(\"protokoll\", pm.variables.get(\"protokollUpdate\"));\r",
									"pm.environment.set(\"fahrstufe\", new Number(pm.variables.get(\"fahrstufeUpdate\")));\r",
									"pm.environment.set(\"gerausch\", new Boolean(false));\r",
									"pm.environment.set(\"konfiguration\", pm.variables.get(\"konfigurationUpdate\"));\r",
									"pm.environment.set(\"stecker\", pm.variables.get(\"steckerUpdate\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f366ad6-9308-4752-a57a-a0fb682fe110",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"iMax\": {{iMax}},\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": {{fahrstufe}},\n    \"gerausch\": false,\n    \"konfiguration\": \"{{konfiguration}}\",\n    \"stecker\": \"{{stecker}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d723a3f-d13d-4537-aeb3-03dc9065d1f6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c4fa847-0070-4896-aeed-e9e0c6675a38",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoderTyp\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var adressRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress\");\r",
									"var adressUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}\");\r",
									"var cvRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv\");\r",
									"var cvUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}\");\r",
									"var funktionRoot = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion\");\r",
									"var funktionUrl = pm.variables.replaceIn(\"{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.eql(pm.variables.get(\"gerausch\")));\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].hersteller\", () => pm.expect(jsonData.adressen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"adressen[0].bestellNr\", () => pm.expect(jsonData.adressen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adTyp\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(adressUrl));\r",
									"pm.test(\"adressen[0]._links.delete\", () => pm.expect(jsonData.adressen[0]._links.delete[0].href).to.eql(adressUrl));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(1));\r",
									"pm.test(\"cvs[0].hersteller\", () => pm.expect(jsonData.cvs[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"cvs[0].bestellNr\", () => pm.expect(jsonData.cvs[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvValue\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(cvUrl));\r",
									"pm.test(\"cvs[0]._links.delete\", () => pm.expect(jsonData.cvs[0]._links.delete[0].href).to.eql(cvUrl));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(1));\r",
									"pm.test(\"funktionen[0].hersteller\", () => pm.expect(jsonData.funktionen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"funktionen[0].bestellNr\", () => pm.expect(jsonData.funktionen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(pm.variables.get(\"fnProgrammable\")));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"funktionen[0]._links.delete\", () => pm.expect(jsonData.funktionen[0]._links.delete[0].href).to.eql(funktionUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self+\"/anleitungen\"));\r",
									"pm.test(\"_links.adress\", () => pm.expect(jsonData._links.adress[0].href).to.eql(self+\"/adress\"));\r",
									"pm.test(\"_links.cv\", () => pm.expect(jsonData._links.cv[0].href).to.eql(self+\"/cv\"));\r",
									"pm.test(\"_links.funktion\", () => pm.expect(jsonData._links.funktion[0].href).to.eql(self+\"/funktion\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "637d97d6-ad06-42c8-8fb4-8a13d893c1af",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/adress/{{adIndex}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"adress",
								"{{adIndex}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete CV",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b8defed-63fe-4068-bd9d-3711e3bbff37",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/cv/{{cv}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"cv",
								"{{cv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "073ea064-8c91-4f13-bdae-77f32a71562b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}/funktion/{{fnReihe}}/{{fnFunktion}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3207b7f2-33c7-4e93-b60a-f15caf7e0c6f",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoderTyp/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoderTyp",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Produkt",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "855017b4-1d05-4c9e-be01-7ecaea909603",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.produkt.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.anleitung\", () => pm.expect(a._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"    pm.test(\"_links.explosionszeichnung\", () => pm.expect(a._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"    pm.test(\"_links.teil\", () => pm.expect(a._links.teil[0].href).to.eql(self + \"/teilen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.produkt.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.produkt.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "63e4b5ca-ba4d-4519-ab4e-c82e632d2c5d",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.replaceIn(\"{{$randomAbbreviation}}{{$randomInt}}\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieAdd\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieAdd\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabAdd\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteAdd\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochAdd\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungAdd\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungAdd\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgAdd\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellAdd\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauAdd\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtAdd\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungAdd\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerAdd\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc93f96f-8ee6-41ec-8ee1-c7db1132277d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\"))));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderHersteller\": \"{{decoderHersteller}}\",\n    \"decoderBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f39c3f0f-3252-49d8-a1c6-4adb6535d2aa",
								"exec": [
									"pm.test(\"response\", () => pm.test(\"response\", () => pm.response.to.have.status(202)));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderHersteller\", () => pm.expect(jsonData.decoderHersteller).to.eql(pm.variables.get(\"decoderHersteller\")));\r",
									"pm.test(\"decoderBestellNr\", () => pm.expect(jsonData.decoderBestellNr).to.eql(pm.variables.get(\"decoderBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0b4d1af-40d0-4707-a56d-48ab387d8f2c",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "anleitungen",
									"type": "file",
									"src": "{{anleitungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28cac10c-65ce-4385-9ad4-2b4839981fe6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "explosionszeichnung",
									"type": "file",
									"src": "{{explosionszeichnungFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2005676b-6c4e-4400-bcd1-0eb4429a5329",
								"exec": [
									"pm.environment.set(\"teilHersteller\", pm.variables.get(\"teilHerstellerAdd\"));\r",
									"pm.environment.set(\"teilBestellNr\", pm.variables.get(\"teilBestellNrAdd\"));\r",
									"pm.environment.set(\"teilBezeichnung\", pm.variables.get(\"teilBezeichnungAdd\"));\r",
									"pm.environment.set(\"teilKategorie\", pm.variables.get(\"teilKategorieAdd\"));\r",
									"pm.environment.set(\"teilUnterKategorie\", pm.variables.get(\"teilUnterKategorieAdd\"));\r",
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f39e11d0-22e8-4a7c-8b20-b030091e9569",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"teilHersteller\": \"{{teilHersteller}}\",\n    \"teilBestellNr\": \"{{teilBestellNr}}\",\n    \"bezeichnung\": \"{{teilBezeichnung}}\",\n    \"kategorie\": \"{{teilKategorie}}\",\n    \"unterKategorie\": \"{{teilUnterKategorie}}\",\n    \"anzahl\": {{teilAnzahl}},\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teil",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d445b09-fecc-4036-b977-c3da0b72b7eb",
								"exec": [
									"pm.environment.set(\"teilAnzahl\", new Number(pm.variables.replaceIn(\"{{$randomInt}}\")));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9ca476a-706d-4e7f-98e7-422a5275a4e2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilHersteller\", () => pm.expect(jsonData.teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilBestellNr\", () => pm.expect(jsonData.teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"anzahl\", () => pm.expect(jsonData.anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}?anzahl={{teilAnzahl}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							],
							"query": [
								{
									"key": "anzahl",
									"value": "{{teilAnzahl}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c016403a-6cba-484a-941e-6e16dd9f7bff",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"pm.environment.set(\"lange\", new Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"pm.environment.set(\"bauzeit\", new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoderHersteller\", pm.variables.get(\"decoderHerstellerUpdate\"));\r",
									"pm.environment.set(\"decoderBestellNr\", pm.variables.get(\"decoderBestellNrUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98c83f29-0b13-42db-840b-8e5417f0493a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": \"{{lange}}\",\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"bauzeit\": \"{{bauzeit}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoderTypHersteller\": \"{{decoderHersteller}}\",\n    \"decoderTypBestellNr\": \"{{decoderBestellNr}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"teilen\": [],\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43335fe0-699f-492a-958e-d148ce6290c7",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung.jpg\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"var teilRoot = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen\");\r",
									"var teilUrl = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(1));\r",
									"pm.test(\"teilen[0].hersteller\", () => pm.expect(jsonData.teilen[0].hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"teilen[0].bestellNr\", () => pm.expect(jsonData.teilen[0].bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"teilen[0].teilHersteller\", () => pm.expect(jsonData.teilen[0].teilHersteller).to.eql(pm.variables.get(\"teilHersteller\")));\r",
									"pm.test(\"teilen[0].teilBestellNr\", () => pm.expect(jsonData.teilen[0].teilBestellNr).to.eql(pm.variables.get(\"teilBestellNr\")));\r",
									"pm.test(\"teilen[0].bezeichnung\", () => pm.expect(jsonData.teilen[0].bezeichnung).to.eql(pm.variables.get(\"teilBezeichnung\")));\r",
									"pm.test(\"teilen[0].kategorie\", () => pm.expect(jsonData.teilen[0].kategorie).to.eql(pm.variables.get(\"teilKategorie\")));\r",
									"pm.test(\"teilen[0].unterKategorie\", () => pm.expect(jsonData.teilen[0].unterKategorie).to.eql(pm.variables.get(\"teilUnterKategorie\")));\r",
									"pm.test(\"teilen[0].anzahl\", () => pm.expect(jsonData.teilen[0].anzahl).to.eql(pm.variables.get(\"teilAnzahl\")));\r",
									"pm.test(\"teilen[0].deleted\", () => pm.expect(jsonData.teilen[0].deleted).to.be.false);\r",
									"pm.test(\"teilen[0]._links.parent\", () => pm.expect(jsonData.teilen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"teilen[0]._links.update\", () => pm.expect(jsonData.teilen[0]._links.update[0].href).to.eql(teilUrl));\r",
									"pm.test(\"teilen[0]._links.delete\", () => pm.expect(jsonData.teilen[0]._links.delete[0].href).to.eql(teilUrl));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0646f0c2-2ade-4e32-966a-02de6395d3c5",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/teilen/{{teilHersteller}}/{{teilBestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"teilen",
								"{{teilHersteller}}",
								"{{teilBestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dcef1c3-3980-4080-bc90-cbc035f81bae",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var anleitungen = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen.pdf\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(anleitungen));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anleitungen",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "605cdcb4-93e0-40c8-ae23-44e3da19dd98",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"var explosionszeichnung = pm.variables.replaceIn(\"{{server}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung.pdf\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(explosionszeichnung));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/anleitungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"anleitungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Explosionszeichnung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be49f399-b6fb-418c-9480-e1472061e1c3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/produkt\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/produkt/{{hersteller}}/{{bestellNr}}\");\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"bauzeit\", () => pm.expect(jsonData.bauzeit).to.eql(pm.variables.get(\"bauzeit\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(pm.variables.get(\"sondermodell\")));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoderTypHersteller\", () => pm.expect(jsonData.decoderTypHersteller).to.eql(pm.variables.get(\"decoderTypHersteller\")));\r",
									"pm.test(\"decoderTypBestellNr\", () => pm.expect(jsonData.decoderTypBestellNr).to.eql(pm.variables.get(\"decoderTypBestellNr\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"explosionszeichnung\", () => pm.expect(jsonData.explosionszeichnung).to.eql(undefined));\r",
									"pm.test(\"teilen.length\", () => pm.expect(jsonData.teilen.length).to.eql(0));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anleitung\", () => pm.expect(jsonData._links.anleitung[0].href).to.eql(self + \"/anleitungen\"));\r",
									"pm.test(\"_links.explosionszeichnung\", () => pm.expect(jsonData._links.explosionszeichnung[0].href).to.eql(self + \"/explosionszeichnung\"));\r",
									"pm.test(\"_links.teil\", () => pm.expect(jsonData._links.teil[0].href).to.eql(self + \"/teilen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}/explosionszeichnung",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}",
								"explosionszeichnung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "878bee9d-f736-4124-b092-55c6d1687001",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/produkt/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"produkt",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Decoder",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "457ed1f4-d395-414e-aeda-1510f07d30b6",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.decoder.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.decoderId;\r",
									"    var add = root + \"/\" + a.hersteller + \"/\" + a.bestellNr;\r",
									"    pm.test(\"decoderId\", () => pm.expect(a.decoderId).to.exist);\r",
									"    pm.test(\"hersteller\", () => pm.expect(a.hersteller).to.exist);\r",
									"    pm.test(\"bestellNr\", () => pm.expect(a.bestellNr).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"protokoll\", () => pm.expect(a.protokoll).to.exist);\r",
									"    pm.test(\"gerausch\", () => pm.expect(a.gerausch).to.exist);\r",
									"    pm.test(\"konfiguration\", () => pm.expect(a.konfiguration).to.exist);\r",
									"    pm.test(\"stecker\", () => pm.expect(a.stecker).to.exist);\r",
									"    pm.test(\"status\", () => pm.expect(a.status).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(add));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.decoder.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.decoder.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ab49874-6755-4079-b6de-c9363de257a5",
								"exec": [
									"pm.environment.set(\"hersteller\", \"ESU\");\r",
									"pm.environment.set(\"bestellNr\", \"62400\");\r",
									"pm.environment.set(\"bezeichnung\", \"LokSound M4\");\r",
									"pm.environment.set(\"iMax\", new Number(\"1.1\"));\r",
									"pm.environment.set(\"protokoll\", \"MFX\");\r",
									"pm.environment.set(\"fahrstufe\", new Number(\"28\"));\r",
									"pm.environment.set(\"sound\", new Boolean(\"true\"));\r",
									"pm.environment.set(\"konfiguration\", \"CV\");\r",
									"pm.environment.set(\"stecker\", \"NEM652\");\r",
									"pm.environment.set(\"status\",\"FREI\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f48080d-f0af-4c6b-97df-9b5fe538f831",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(1));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(\"Primary\"));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(1));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(\"DIGITAL\"));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(1));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(1));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(1));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(\"Adresse\"));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(1));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(80));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(3));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(\"F0\"));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(\"Funktion 0\"));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{hersteller}}/{{bestellNr}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{hersteller}}",
								"{{bestellNr}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Adress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cfcf9a4f-0e20-4fc5-842e-00da522b0688",
								"exec": [
									"pm.environment.set(\"adIndex\", 1);\r",
									"pm.environment.set(\"adBezeichnung\", \"Primary\");\r",
									"pm.environment.set(\"adSpan\", 1);\r",
									"pm.environment.set(\"adAdressTyp\", \"DIGITAL\");\r",
									"pm.environment.set(\"adWerkseinstellung\", 1);\r",
									"pm.environment.set(\"adAdress\", 30);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55615fbf-a97a-4550-9224-5a0257ab9145",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/adress/{{adIndex}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"index\", () => pm.expect(jsonData.index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"span\", () => pm.expect(jsonData.span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressTyp\", () => pm.expect(jsonData.adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adress\", () => pm.expect(jsonData.adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/adress/{{adIndex}}?adress={{adAdress}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"adress",
								"{{adIndex}}"
							],
							"query": [
								{
									"key": "adress",
									"value": "{{adAdress}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CV",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d84982b0-563d-4fa3-8870-5b8184bbb02a",
								"exec": [
									"pm.environment.set(\"cvCv\", 1);\r",
									"pm.environment.set(\"cvBezeichnung\", \"Adresse\");\r",
									"pm.environment.set(\"cvMinimal\", 1);\r",
									"pm.environment.set(\"cvMaximal\", 80);\r",
									"pm.environment.set(\"cvWerkseinstellung\", 3);\r",
									"pm.environment.set(\"cvWert\", 45);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d378d777-62fd-4e58-af67-5c314010103b",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/cv/{{cvCv}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cv\", () => pm.expect(jsonData.cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"minimal\", () => pm.expect(jsonData.minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"maximal\", () => pm.expect(jsonData.maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"werkseinstellung\", () => pm.expect(jsonData.werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"wert\", () => pm.expect(jsonData.wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/cv/{{cvCv}}?wert={{cvWert}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"cv",
								"{{cvCv}}"
							],
							"query": [
								{
									"key": "wert",
									"value": "{{cvWert}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Funktion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e96d46e-6491-4aac-b0d6-f4ef533a1137",
								"exec": [
									"pm.environment.set(\"fnReihe\", 1);\r",
									"pm.environment.set(\"fnFunktion\", \"F0\");\r",
									"pm.environment.set(\"fnBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00ec8272-c5f0-4401-8451-43a08b20ff1e",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}/funktion/{{fnReihe}}/{{fnFunktion}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"reihe\", () => pm.expect(jsonData.reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktion\", () => pm.expect(jsonData.funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"programmable\", () => pm.expect(jsonData.programmable).to.eql(false));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}/funktion/{{fnReihe}}/{{fnFunktion}}?bezeichnung={{fnBezeichnung}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}",
								"funktion",
								"{{fnReihe}}",
								"{{fnFunktion}}"
							],
							"query": [
								{
									"key": "bezeichnung",
									"value": "{{fnBezeichnung}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15523279-a3be-44d9-88b3-9ad85e77cb28",
								"exec": [
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"protokoll\", \"DCC\");\r",
									"pm.environment.set(\"fahrstufe\", 28);\r",
									"pm.environment.set(\"status\", \"BASTLER\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9beeb73e-4264-4e74-9330-f9c12993f0f3",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"decoderId\": \"{{decoderId}}\",\n    \"hersteller\": \"{{decoderHersteller}}\",\n    \"bestellNr\": \"{{decoderBestellNr}}\",\n    \"bezeichnung\": \"{{bezeichnung}}\",\n    \"protokoll\": \"{{protokoll}}\",\n    \"fahrstufe\": \"{{fahrstufe}}\",\n    \"status\": \"{{status}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "464a6951-47a0-43b3-881a-690df7f1958d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"pm.variables.set(\"decoderId\", jsonData.decoderId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/decoder\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/decoder/{{decoderId}}\");\r",
									"pm.test(\"decoderId\", () => pm.expect(jsonData.decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"iMax\", () => pm.expect(jsonData.iMax).to.eql(pm.variables.get(\"iMax\")));\r",
									"pm.test(\"protokoll\", () => pm.expect(jsonData.protokoll).to.eql(pm.variables.get(\"protokoll\")));\r",
									"pm.test(\"fahrstufe\", () => pm.expect(jsonData.fahrstufe).to.eql(pm.variables.get(\"fahrstufe\")));\r",
									"pm.test(\"gerausch\", () => pm.expect(jsonData.gerausch).to.be.true);\r",
									"pm.test(\"konfiguration\", () => pm.expect(jsonData.konfiguration).to.eql(pm.variables.get(\"konfiguration\")));\r",
									"pm.test(\"stecker\", () => pm.expect(jsonData.stecker).to.eql(pm.variables.get(\"stecker\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"anleitungen\", () => pm.expect(jsonData.anleitungen).to.eql(undefined));\r",
									"pm.test(\"adressen.length\", () => pm.expect(jsonData.adressen.length).to.eql(1));\r",
									"pm.test(\"adressen[0].decoderId\", () => pm.expect(jsonData.adressen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"adressen[0].index\", () => pm.expect(jsonData.adressen[0].index).to.eql(pm.variables.get(\"adIndex\")));\r",
									"pm.test(\"adressen[0].bezeichnung\", () => pm.expect(jsonData.adressen[0].bezeichnung).to.eql(pm.variables.get(\"adBezeichnung\")));\r",
									"pm.test(\"adressen[0].span\", () => pm.expect(jsonData.adressen[0].span).to.eql(pm.variables.get(\"adSpan\")));\r",
									"pm.test(\"adressen[0].adressTyp\", () => pm.expect(jsonData.adressen[0].adressTyp).to.eql(pm.variables.get(\"adAdressTyp\")));\r",
									"pm.test(\"adressen[0].werkseinstellung\", () => pm.expect(jsonData.adressen[0].werkseinstellung).to.eql(pm.variables.get(\"adWerkseinstellung\")));\r",
									"pm.test(\"adressen[0].adress\", () => pm.expect(jsonData.adressen[0].adress).to.eql(pm.variables.get(\"adAdress\")));\r",
									"pm.test(\"adressen[0].deleted\", () => pm.expect(jsonData.adressen[0].deleted).to.be.false);\r",
									"pm.test(\"adressen[0]._links.parent\", () => pm.expect(jsonData.adressen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"adressen[0]._links.update\", () => pm.expect(jsonData.adressen[0]._links.update[0].href).to.eql(self + \"/adress/1\"));\r",
									"pm.test(\"cvs.length\", () => pm.expect(jsonData.cvs.length).to.eql(21));\r",
									"pm.test(\"cvs[0].decoderId\", () => pm.expect(jsonData.cvs[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[0].cv\", () => pm.expect(jsonData.cvs[0].cv).to.eql(pm.variables.get(\"cvCv\")));\r",
									"pm.test(\"cvs[0].bezeichnung\", () => pm.expect(jsonData.cvs[0].bezeichnung).to.eql(pm.variables.get(\"cvBezeichnung\")));\r",
									"pm.test(\"cvs[0].minimal\", () => pm.expect(jsonData.cvs[0].minimal).to.eql(pm.variables.get(\"cvMinimal\")));\r",
									"pm.test(\"cvs[0].maximal\", () => pm.expect(jsonData.cvs[0].maximal).to.eql(pm.variables.get(\"cvMaximal\")));\r",
									"pm.test(\"cvs[0].werkseinstellung\", () => pm.expect(jsonData.cvs[0].werkseinstellung).to.eql(pm.variables.get(\"cvWerkseinstellung\")));\r",
									"pm.test(\"cvs[0].wert\", () => pm.expect(jsonData.cvs[0].wert).to.eql(pm.variables.get(\"cvWert\")));\r",
									"pm.test(\"cvs[0].deleted\", () => pm.expect(jsonData.cvs[0].deleted).to.be.false);\r",
									"pm.test(\"cvs[0]._links.parent\", () => pm.expect(jsonData.cvs[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[0]._links.update\", () => pm.expect(jsonData.cvs[0]._links.update[0].href).to.eql(self + \"/cv/1\"));\r",
									"pm.test(\"cvs[1].decoderId\", () => pm.expect(jsonData.cvs[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[1].cv\", () => pm.expect(jsonData.cvs[1].cv).to.eql(2));\r",
									"pm.test(\"cvs[1].bezeichnung\", () => pm.expect(jsonData.cvs[1].bezeichnung).to.eql(\"Anfahrverzögerung\"));\r",
									"pm.test(\"cvs[1].minimal\", () => pm.expect(jsonData.cvs[1].minimal).to.eql(1));\r",
									"pm.test(\"cvs[1].maximal\", () => pm.expect(jsonData.cvs[1].maximal).to.eql(63));\r",
									"pm.test(\"cvs[1].werkseinstellung\", () => pm.expect(jsonData.cvs[1].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[1].wert\", () => pm.expect(jsonData.cvs[1].wert).to.eql(3));\r",
									"pm.test(\"cvs[1].deleted\", () => pm.expect(jsonData.cvs[1].deleted).to.be.false);\r",
									"pm.test(\"cvs[1]._links.parent\", () => pm.expect(jsonData.cvs[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[1]._links.update\", () => pm.expect(jsonData.cvs[1]._links.update[0].href).to.eql(self + \"/cv/2\"));\r",
									"pm.test(\"cvs[2].decoderId\", () => pm.expect(jsonData.cvs[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[2].cv\", () => pm.expect(jsonData.cvs[2].cv).to.eql(3));\r",
									"pm.test(\"cvs[2].bezeichnung\", () => pm.expect(jsonData.cvs[2].bezeichnung).to.eql(\"Beschleunigungszeit\"));\r",
									"pm.test(\"cvs[2].minimal\", () => pm.expect(jsonData.cvs[2].minimal).to.eql(1));\r",
									"pm.test(\"cvs[2].maximal\", () => pm.expect(jsonData.cvs[2].maximal).to.eql(63));\r",
									"pm.test(\"cvs[2].werkseinstellung\", () => pm.expect(jsonData.cvs[2].werkseinstellung).to.eql(16));\r",
									"pm.test(\"cvs[2].wert\", () => pm.expect(jsonData.cvs[2].wert).to.eql(16));\r",
									"pm.test(\"cvs[2].deleted\", () => pm.expect(jsonData.cvs[2].deleted).to.be.false);\r",
									"pm.test(\"cvs[2]._links.parent\", () => pm.expect(jsonData.cvs[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[2]._links.update\", () => pm.expect(jsonData.cvs[2]._links.update[0].href).to.eql(self + \"/cv/3\"));\r",
									"pm.test(\"cvs[3].decoderId\", () => pm.expect(jsonData.cvs[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[3].cv\", () => pm.expect(jsonData.cvs[3].cv).to.eql(4));\r",
									"pm.test(\"cvs[3].bezeichnung\", () => pm.expect(jsonData.cvs[3].bezeichnung).to.eql(\"Bremsverzögerung\"));\r",
									"pm.test(\"cvs[3].minimal\", () => pm.expect(jsonData.cvs[3].minimal).to.eql(1));\r",
									"pm.test(\"cvs[3].maximal\", () => pm.expect(jsonData.cvs[3].maximal).to.eql(63));\r",
									"pm.test(\"cvs[3].werkseinstellung\", () => pm.expect(jsonData.cvs[3].werkseinstellung).to.eql(12));\r",
									"pm.test(\"cvs[3].wert\", () => pm.expect(jsonData.cvs[3].wert).to.eql(12));\r",
									"pm.test(\"cvs[3].deleted\", () => pm.expect(jsonData.cvs[3].deleted).to.be.false);\r",
									"pm.test(\"cvs[3]._links.parent\", () => pm.expect(jsonData.cvs[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[3]._links.update\", () => pm.expect(jsonData.cvs[3]._links.update[0].href).to.eql(self + \"/cv/4\"));\r",
									"pm.test(\"cvs[4].decoderId\", () => pm.expect(jsonData.cvs[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[4].cv\", () => pm.expect(jsonData.cvs[4].cv).to.eql(5));\r",
									"pm.test(\"cvs[4].bezeichnung\", () => pm.expect(jsonData.cvs[4].bezeichnung).to.eql(\"Höchstgeschwindigkeit\"));\r",
									"pm.test(\"cvs[4].minimal\", () => pm.expect(jsonData.cvs[4].minimal).to.eql(1));\r",
									"pm.test(\"cvs[4].maximal\", () => pm.expect(jsonData.cvs[4].maximal).to.eql(63));\r",
									"pm.test(\"cvs[4].werkseinstellung\", () => pm.expect(jsonData.cvs[4].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[4].wert\", () => pm.expect(jsonData.cvs[4].wert).to.eql(63));\r",
									"pm.test(\"cvs[4].deleted\", () => pm.expect(jsonData.cvs[4].deleted).to.be.false);\r",
									"pm.test(\"cvs[4]._links.parent\", () => pm.expect(jsonData.cvs[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[4]._links.update\", () => pm.expect(jsonData.cvs[4]._links.update[0].href).to.eql(self + \"/cv/5\"));\r",
									"pm.test(\"cvs[5].decoderId\", () => pm.expect(jsonData.cvs[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[5].cv\", () => pm.expect(jsonData.cvs[5].cv).to.eql(8));\r",
									"pm.test(\"cvs[5].bezeichnung\", () => pm.expect(jsonData.cvs[5].bezeichnung).to.eql(\"Rückstellen auf Serienwerte\"));\r",
									"pm.test(\"cvs[5].werkseinstellung\", () => pm.expect(jsonData.cvs[5].werkseinstellung).to.eql(8));\r",
									"pm.test(\"cvs[5].wert\", () => pm.expect(jsonData.cvs[5].wert).to.eql(8));\r",
									"pm.test(\"cvs[5].deleted\", () => pm.expect(jsonData.cvs[5].deleted).to.be.false);\r",
									"pm.test(\"cvs[5]._links.parent\", () => pm.expect(jsonData.cvs[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[5]._links.update\", () => pm.expect(jsonData.cvs[5]._links.update[0].href).to.eql(self + \"/cv/8\"));\r",
									"pm.test(\"cvs[6].decoderId\", () => pm.expect(jsonData.cvs[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[6].cv\", () => pm.expect(jsonData.cvs[6].cv).to.eql(53));\r",
									"pm.test(\"cvs[6].bezeichnung\", () => pm.expect(jsonData.cvs[6].bezeichnung).to.eql(\"Regelungsreferenz\"));\r",
									"pm.test(\"cvs[6].minimal\", () => pm.expect(jsonData.cvs[6].minimal).to.eql(1));\r",
									"pm.test(\"cvs[6].maximal\", () => pm.expect(jsonData.cvs[6].maximal).to.eql(63));\r",
									"pm.test(\"cvs[6].werkseinstellung\", () => pm.expect(jsonData.cvs[6].werkseinstellung).to.eql(56));\r",
									"pm.test(\"cvs[6].wert\", () => pm.expect(jsonData.cvs[6].wert).to.eql(56));\r",
									"pm.test(\"cvs[6].deleted\", () => pm.expect(jsonData.cvs[6].deleted).to.be.false);\r",
									"pm.test(\"cvs[6]._links.parent\", () => pm.expect(jsonData.cvs[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[6]._links.update\", () => pm.expect(jsonData.cvs[6]._links.update[0].href).to.eql(self + \"/cv/53\"));\r",
									"pm.test(\"cvs[7].decoderId\", () => pm.expect(jsonData.cvs[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[7].cv\", () => pm.expect(jsonData.cvs[7].cv).to.eql(54));\r",
									"pm.test(\"cvs[7].bezeichnung\", () => pm.expect(jsonData.cvs[7].bezeichnung).to.eql(\"Lastregelung Param. K\"));\r",
									"pm.test(\"cvs[7].minimal\", () => pm.expect(jsonData.cvs[7].minimal).to.eql(1));\r",
									"pm.test(\"cvs[7].maximal\", () => pm.expect(jsonData.cvs[7].maximal).to.eql(63));\r",
									"pm.test(\"cvs[7].werkseinstellung\", () => pm.expect(jsonData.cvs[7].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[7].wert\", () => pm.expect(jsonData.cvs[7].wert).to.eql(32));\r",
									"pm.test(\"cvs[7].deleted\", () => pm.expect(jsonData.cvs[7].deleted).to.be.false);\r",
									"pm.test(\"cvs[7]._links.parent\", () => pm.expect(jsonData.cvs[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[7]._links.update\", () => pm.expect(jsonData.cvs[7]._links.update[0].href).to.eql(self + \"/cv/54\"));\r",
									"pm.test(\"cvs[8].decoderId\", () => pm.expect(jsonData.cvs[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[8].cv\", () => pm.expect(jsonData.cvs[8].cv).to.eql(55));\r",
									"pm.test(\"cvs[8].bezeichnung\", () => pm.expect(jsonData.cvs[8].bezeichnung).to.eql(\"Lastregelung Param. L\"));\r",
									"pm.test(\"cvs[8].minimal\", () => pm.expect(jsonData.cvs[8].minimal).to.eql(1));\r",
									"pm.test(\"cvs[8].maximal\", () => pm.expect(jsonData.cvs[8].maximal).to.eql(63));\r",
									"pm.test(\"cvs[8].werkseinstellung\", () => pm.expect(jsonData.cvs[8].werkseinstellung).to.eql(24));\r",
									"pm.test(\"cvs[8].wert\", () => pm.expect(jsonData.cvs[8].wert).to.eql(24));\r",
									"pm.test(\"cvs[8].deleted\", () => pm.expect(jsonData.cvs[8].deleted).to.be.false);\r",
									"pm.test(\"cvs[8]._links.parent\", () => pm.expect(jsonData.cvs[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[8]._links.update\", () => pm.expect(jsonData.cvs[8]._links.update[0].href).to.eql(self + \"/cv/55\"));\r",
									"pm.test(\"cvs[9].decoderId\", () => pm.expect(jsonData.cvs[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[9].cv\", () => pm.expect(jsonData.cvs[9].cv).to.eql(56));\r",
									"pm.test(\"cvs[9].bezeichnung\", () => pm.expect(jsonData.cvs[9].bezeichnung).to.eql(\"Regelungseinfluss\"));\r",
									"pm.test(\"cvs[9].minimal\", () => pm.expect(jsonData.cvs[9].minimal).to.eql(1));\r",
									"pm.test(\"cvs[9].maximal\", () => pm.expect(jsonData.cvs[9].maximal).to.eql(63));\r",
									"pm.test(\"cvs[9].werkseinstellung\", () => pm.expect(jsonData.cvs[9].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[9].wert\", () => pm.expect(jsonData.cvs[9].wert).to.eql(63));\r",
									"pm.test(\"cvs[9].deleted\", () => pm.expect(jsonData.cvs[9].deleted).to.be.false);\r",
									"pm.test(\"cvs[9]._links.parent\", () => pm.expect(jsonData.cvs[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[9]._links.update\", () => pm.expect(jsonData.cvs[9]._links.update[0].href).to.eql(self + \"/cv/56\"));\r",
									"pm.test(\"cvs[10].decoderId\", () => pm.expect(jsonData.cvs[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[10].cv\", () => pm.expect(jsonData.cvs[10].cv).to.eql(57));\r",
									"pm.test(\"cvs[10].bezeichnung\", () => pm.expect(jsonData.cvs[10].bezeichnung).to.eql(\"Geräuschmodus 1\"));\r",
									"pm.test(\"cvs[10].minimal\", () => pm.expect(jsonData.cvs[10].minimal).to.eql(1));\r",
									"pm.test(\"cvs[10].maximal\", () => pm.expect(jsonData.cvs[10].maximal).to.eql(63));\r",
									"pm.test(\"cvs[10].werkseinstellung\", () => pm.expect(jsonData.cvs[10].werkseinstellung).to.eql(10));\r",
									"pm.test(\"cvs[10].wert\", () => pm.expect(jsonData.cvs[10].wert).to.eql(10));\r",
									"pm.test(\"cvs[10].deleted\", () => pm.expect(jsonData.cvs[10].deleted).to.be.false);\r",
									"pm.test(\"cvs[10]._links.parent\", () => pm.expect(jsonData.cvs[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[10]._links.update\", () => pm.expect(jsonData.cvs[10]._links.update[0].href).to.eql(self + \"/cv/57\"));\r",
									"pm.test(\"cvs[11].decoderId\", () => pm.expect(jsonData.cvs[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[11].cv\", () => pm.expect(jsonData.cvs[11].cv).to.eql(58));\r",
									"pm.test(\"cvs[11].bezeichnung\", () => pm.expect(jsonData.cvs[11].bezeichnung).to.eql(\"Geräuschmodus 2\"));\r",
									"pm.test(\"cvs[11].minimal\", () => pm.expect(jsonData.cvs[11].minimal).to.eql(1));\r",
									"pm.test(\"cvs[11].maximal\", () => pm.expect(jsonData.cvs[11].maximal).to.eql(63));\r",
									"pm.test(\"cvs[11].werkseinstellung\", () => pm.expect(jsonData.cvs[11].werkseinstellung).to.eql(58));\r",
									"pm.test(\"cvs[11].wert\", () => pm.expect(jsonData.cvs[11].wert).to.eql(58));\r",
									"pm.test(\"cvs[11].deleted\", () => pm.expect(jsonData.cvs[11].deleted).to.be.false);\r",
									"pm.test(\"cvs[11]._links.parent\", () => pm.expect(jsonData.cvs[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[11]._links.update\", () => pm.expect(jsonData.cvs[11]._links.update[0].href).to.eql(self + \"/cv/58\"));\r",
									"pm.test(\"cvs[12].decoderId\", () => pm.expect(jsonData.cvs[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[12].cv\", () => pm.expect(jsonData.cvs[12].cv).to.eql(59));\r",
									"pm.test(\"cvs[12].bezeichnung\", () => pm.expect(jsonData.cvs[12].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[12].minimal\", () => pm.expect(jsonData.cvs[12].minimal).to.eql(1));\r",
									"pm.test(\"cvs[12].maximal\", () => pm.expect(jsonData.cvs[12].maximal).to.eql(63));\r",
									"pm.test(\"cvs[12].werkseinstellung\", () => pm.expect(jsonData.cvs[12].werkseinstellung).to.eql(32));\r",
									"pm.test(\"cvs[12].wert\", () => pm.expect(jsonData.cvs[12].wert).to.eql(32));\r",
									"pm.test(\"cvs[12].deleted\", () => pm.expect(jsonData.cvs[12].deleted).to.be.false);\r",
									"pm.test(\"cvs[12]._links.parent\", () => pm.expect(jsonData.cvs[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[12]._links.update\", () => pm.expect(jsonData.cvs[12]._links.update[0].href).to.eql(self + \"/cv/59\"));\r",
									"pm.test(\"cvs[13].decoderId\", () => pm.expect(jsonData.cvs[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[13].cv\", () => pm.expect(jsonData.cvs[13].cv).to.eql(60));\r",
									"pm.test(\"cvs[13].bezeichnung\", () => pm.expect(jsonData.cvs[13].bezeichnung).to.eql(\"Fahrgeräusch\"));\r",
									"pm.test(\"cvs[13].minimal\", () => pm.expect(jsonData.cvs[13].minimal).to.eql(1));\r",
									"pm.test(\"cvs[13].maximal\", () => pm.expect(jsonData.cvs[13].maximal).to.eql(63));\r",
									"pm.test(\"cvs[13].werkseinstellung\", () => pm.expect(jsonData.cvs[13].werkseinstellung).to.eql(55));\r",
									"pm.test(\"cvs[13].wert\", () => pm.expect(jsonData.cvs[13].wert).to.eql(55));\r",
									"pm.test(\"cvs[13].deleted\", () => pm.expect(jsonData.cvs[13].deleted).to.be.false);\r",
									"pm.test(\"cvs[13]._links.parent\", () => pm.expect(jsonData.cvs[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[13]._links.update\", () => pm.expect(jsonData.cvs[13]._links.update[0].href).to.eql(self + \"/cv/60\"));\r",
									"pm.test(\"cvs[14].decoderId\", () => pm.expect(jsonData.cvs[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[14].cv\", () => pm.expect(jsonData.cvs[14].cv).to.eql(63));\r",
									"pm.test(\"cvs[14].bezeichnung\", () => pm.expect(jsonData.cvs[14].bezeichnung).to.eql(\"Geräuschlautstärke\"));\r",
									"pm.test(\"cvs[14].minimal\", () => pm.expect(jsonData.cvs[14].minimal).to.eql(1));\r",
									"pm.test(\"cvs[14].maximal\", () => pm.expect(jsonData.cvs[14].maximal).to.eql(63));\r",
									"pm.test(\"cvs[14].werkseinstellung\", () => pm.expect(jsonData.cvs[14].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[14].wert\", () => pm.expect(jsonData.cvs[14].wert).to.eql(63));\r",
									"pm.test(\"cvs[14].deleted\", () => pm.expect(jsonData.cvs[14].deleted).to.be.false);\r",
									"pm.test(\"cvs[14]._links.parent\", () => pm.expect(jsonData.cvs[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[14]._links.update\", () => pm.expect(jsonData.cvs[14]._links.update[0].href).to.eql(self + \"/cv/63\"));\r",
									"pm.test(\"cvs[15].decoderId\", () => pm.expect(jsonData.cvs[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[15].cv\", () => pm.expect(jsonData.cvs[15].cv).to.eql(64));\r",
									"pm.test(\"cvs[15].bezeichnung\", () => pm.expect(jsonData.cvs[15].bezeichnung).to.eql(\"Bremssoundschwelle\"));\r",
									"pm.test(\"cvs[15].minimal\", () => pm.expect(jsonData.cvs[15].minimal).to.eql(1));\r",
									"pm.test(\"cvs[15].maximal\", () => pm.expect(jsonData.cvs[15].maximal).to.eql(63));\r",
									"pm.test(\"cvs[15].werkseinstellung\", () => pm.expect(jsonData.cvs[15].werkseinstellung).to.eql(7));\r",
									"pm.test(\"cvs[15].wert\", () => pm.expect(jsonData.cvs[15].wert).to.eql(7));\r",
									"pm.test(\"cvs[15].deleted\", () => pm.expect(jsonData.cvs[15].deleted).to.be.false);\r",
									"pm.test(\"cvs[15]._links.parent\", () => pm.expect(jsonData.cvs[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[15]._links.update\", () => pm.expect(jsonData.cvs[15]._links.update[0].href).to.eql(self + \"/cv/64\"));\r",
									"pm.test(\"cvs[16].decoderId\", () => pm.expect(jsonData.cvs[16].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[16].cv\", () => pm.expect(jsonData.cvs[16].cv).to.eql(73));\r",
									"pm.test(\"cvs[16].bezeichnung\", () => pm.expect(jsonData.cvs[16].bezeichnung).to.eql(\"Speicheroptionen\"));\r",
									"pm.test(\"cvs[16].minimal\", () => pm.expect(jsonData.cvs[16].minimal).to.eql(0));\r",
									"pm.test(\"cvs[16].maximal\", () => pm.expect(jsonData.cvs[16].maximal).to.eql(7));\r",
									"pm.test(\"cvs[16].werkseinstellung\", () => pm.expect(jsonData.cvs[16].werkseinstellung).to.eql(3));\r",
									"pm.test(\"cvs[16].wert\", () => pm.expect(jsonData.cvs[16].wert).to.eql(3));\r",
									"pm.test(\"cvs[16].deleted\", () => pm.expect(jsonData.cvs[16].deleted).to.be.false);\r",
									"pm.test(\"cvs[16]._links.parent\", () => pm.expect(jsonData.cvs[16]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[16]._links.update\", () => pm.expect(jsonData.cvs[16]._links.update[0].href).to.eql(self + \"/cv/73\"));\r",
									"pm.test(\"cvs[17].decoderId\", () => pm.expect(jsonData.cvs[17].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[17].cv\", () => pm.expect(jsonData.cvs[17].cv).to.eql(74));\r",
									"pm.test(\"cvs[17].bezeichnung\", () => pm.expect(jsonData.cvs[17].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[17].minimal\", () => pm.expect(jsonData.cvs[17].minimal).to.eql(1));\r",
									"pm.test(\"cvs[17].maximal\", () => pm.expect(jsonData.cvs[17].maximal).to.eql(63));\r",
									"pm.test(\"cvs[17].deleted\", () => pm.expect(jsonData.cvs[17].deleted).to.be.false);\r",
									"pm.test(\"cvs[17]._links.parent\", () => pm.expect(jsonData.cvs[17]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[17]._links.update\", () => pm.expect(jsonData.cvs[17]._links.update[0].href).to.eql(self + \"/cv/74\"));\r",
									"pm.test(\"cvs[18].decoderId\", () => pm.expect(jsonData.cvs[18].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[18].cv\", () => pm.expect(jsonData.cvs[18].cv).to.eql(75));\r",
									"pm.test(\"cvs[18].bezeichnung\", () => pm.expect(jsonData.cvs[18].bezeichnung).to.eql(\"Märklin Addresse 2\"));\r",
									"pm.test(\"cvs[18].minimal\", () => pm.expect(jsonData.cvs[18].minimal).to.eql(1));\r",
									"pm.test(\"cvs[18].maximal\", () => pm.expect(jsonData.cvs[18].maximal).to.eql(80));\r",
									"pm.test(\"cvs[18].werkseinstellung\", () => pm.expect(jsonData.cvs[18].werkseinstellung).to.eql(4));\r",
									"pm.test(\"cvs[18].wert\", () => pm.expect(jsonData.cvs[18].wert).to.eql(4));\r",
									"pm.test(\"cvs[18].deleted\", () => pm.expect(jsonData.cvs[18].deleted).to.be.false);\r",
									"pm.test(\"cvs[18]._links.parent\", () => pm.expect(jsonData.cvs[18]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[18]._links.update\", () => pm.expect(jsonData.cvs[18]._links.update[0].href).to.eql(self + \"/cv/75\"));\r",
									"pm.test(\"cvs[19].decoderId\", () => pm.expect(jsonData.cvs[19].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[19].cv\", () => pm.expect(jsonData.cvs[19].cv).to.eql(78));\r",
									"pm.test(\"cvs[19].bezeichnung\", () => pm.expect(jsonData.cvs[19].bezeichnung).to.eql(\"Anfahrspannung Analog AC\"));\r",
									"pm.test(\"cvs[19].minimal\", () => pm.expect(jsonData.cvs[19].minimal).to.eql(1));\r",
									"pm.test(\"cvs[19].maximal\", () => pm.expect(jsonData.cvs[19].maximal).to.eql(63));\r",
									"pm.test(\"cvs[19].werkseinstellung\", () => pm.expect(jsonData.cvs[19].werkseinstellung).to.eql(25));\r",
									"pm.test(\"cvs[19].wert\", () => pm.expect(jsonData.cvs[19].wert).to.eql(25));\r",
									"pm.test(\"cvs[19].deleted\", () => pm.expect(jsonData.cvs[19].deleted).to.be.false);\r",
									"pm.test(\"cvs[19]._links.parent\", () => pm.expect(jsonData.cvs[19]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[19]._links.update\", () => pm.expect(jsonData.cvs[19]._links.update[0].href).to.eql(self + \"/cv/78\"));\r",
									"pm.test(\"cvs[20].decoderId\", () => pm.expect(jsonData.cvs[20].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"cvs[20].cv\", () => pm.expect(jsonData.cvs[20].cv).to.eql(79));\r",
									"pm.test(\"cvs[20].bezeichnung\", () => pm.expect(jsonData.cvs[20].bezeichnung).to.eql(\"Höchstgeschwindigkeit Analog AC\"));\r",
									"pm.test(\"cvs[20].minimal\", () => pm.expect(jsonData.cvs[20].minimal).to.eql(1));\r",
									"pm.test(\"cvs[20].maximal\", () => pm.expect(jsonData.cvs[20].maximal).to.eql(63));\r",
									"pm.test(\"cvs[20].werkseinstellung\", () => pm.expect(jsonData.cvs[20].werkseinstellung).to.eql(63));\r",
									"pm.test(\"cvs[20].wert\", () => pm.expect(jsonData.cvs[20].wert).to.eql(63));\r",
									"pm.test(\"cvs[20].deleted\", () => pm.expect(jsonData.cvs[20].deleted).to.be.false);\r",
									"pm.test(\"cvs[20]._links.parent\", () => pm.expect(jsonData.cvs[20]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"cvs[20]._links.update\", () => pm.expect(jsonData.cvs[20]._links.update[0].href).to.eql(self + \"/cv/79\"));\r",
									"pm.test(\"funktionen.length\", () => pm.expect(jsonData.funktionen.length).to.eql(16));\r",
									"pm.test(\"funktionen[0].decoderId\", () => pm.expect(jsonData.funktionen[0].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[0].reihe\", () => pm.expect(jsonData.funktionen[0].reihe).to.eql(pm.variables.get(\"fnReihe\")));\r",
									"pm.test(\"funktionen[0].funktion\", () => pm.expect(jsonData.funktionen[0].funktion).to.eql(pm.variables.get(\"fnFunktion\")));\r",
									"pm.test(\"funktionen[0].bezeichnung\", () => pm.expect(jsonData.funktionen[0].bezeichnung).to.eql(pm.variables.get(\"fnBezeichnung\")));\r",
									"pm.test(\"funktionen[0].programmable\", () => pm.expect(jsonData.funktionen[0].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[0].deleted\", () => pm.expect(jsonData.funktionen[0].deleted).to.be.false);\r",
									"pm.test(\"funktionen[0]._links.parent\", () => pm.expect(jsonData.funktionen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[0]._links.update\", () => pm.expect(jsonData.funktionen[0]._links.update[0].href).to.eql(self + \"/funktion/1/F0\"));\r",
									"pm.test(\"funktionen[1].decoderId\", () => pm.expect(jsonData.funktionen[1].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[1].reihe\", () => pm.expect(jsonData.funktionen[1].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[1].funktion\", () => pm.expect(jsonData.funktionen[1].funktion).to.eql(\"F1\"));\r",
									"pm.test(\"funktionen[1].bezeichnung\", () => pm.expect(jsonData.funktionen[1].bezeichnung).to.eql(\"Funktion 1\"));\r",
									"pm.test(\"funktionen[1].programmable\", () => pm.expect(jsonData.funktionen[1].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[1].deleted\", () => pm.expect(jsonData.funktionen[1].deleted).to.be.false);\r",
									"pm.test(\"funktionen[1]._links.parent\", () => pm.expect(jsonData.funktionen[1]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[1]._links.update\", () => pm.expect(jsonData.funktionen[1]._links.update[0].href).to.eql(self + \"/funktion/1/F1\"));\r",
									"pm.test(\"funktionen[2].decoderId\", () => pm.expect(jsonData.funktionen[2].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[2].reihe\", () => pm.expect(jsonData.funktionen[2].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[2].funktion\", () => pm.expect(jsonData.funktionen[2].funktion).to.eql(\"F10\"));\r",
									"pm.test(\"funktionen[2].bezeichnung\", () => pm.expect(jsonData.funktionen[2].bezeichnung).to.eql(\"Funktion 10\"));\r",
									"pm.test(\"funktionen[2].programmable\", () => pm.expect(jsonData.funktionen[2].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[2].deleted\", () => pm.expect(jsonData.funktionen[2].deleted).to.be.false);\r",
									"pm.test(\"funktionen[2]._links.parent\", () => pm.expect(jsonData.funktionen[2]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[2]._links.update\", () => pm.expect(jsonData.funktionen[2]._links.update[0].href).to.eql(self + \"/funktion/1/F10\"));\r",
									"pm.test(\"funktionen[3].decoderId\", () => pm.expect(jsonData.funktionen[3].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[3].reihe\", () => pm.expect(jsonData.funktionen[3].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[3].funktion\", () => pm.expect(jsonData.funktionen[3].funktion).to.eql(\"F11\"));\r",
									"pm.test(\"funktionen[3].bezeichnung\", () => pm.expect(jsonData.funktionen[3].bezeichnung).to.eql(\"Funktion 11\"));\r",
									"pm.test(\"funktionen[3].programmable\", () => pm.expect(jsonData.funktionen[3].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[3].deleted\", () => pm.expect(jsonData.funktionen[3].deleted).to.be.false);\r",
									"pm.test(\"funktionen[3]._links.parent\", () => pm.expect(jsonData.funktionen[3]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[3]._links.update\", () => pm.expect(jsonData.funktionen[3]._links.update[0].href).to.eql(self + \"/funktion/1/F11\"));\r",
									"pm.test(\"funktionen[4].decoderId\", () => pm.expect(jsonData.funktionen[4].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[4].reihe\", () => pm.expect(jsonData.funktionen[4].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[4].funktion\", () => pm.expect(jsonData.funktionen[4].funktion).to.eql(\"F12\"));\r",
									"pm.test(\"funktionen[4].bezeichnung\", () => pm.expect(jsonData.funktionen[4].bezeichnung).to.eql(\"Funktion 12\"));\r",
									"pm.test(\"funktionen[4].programmable\", () => pm.expect(jsonData.funktionen[4].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[4].deleted\", () => pm.expect(jsonData.funktionen[4].deleted).to.be.false);\r",
									"pm.test(\"funktionen[4]._links.parent\", () => pm.expect(jsonData.funktionen[4]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[4]._links.update\", () => pm.expect(jsonData.funktionen[4]._links.update[0].href).to.eql(self + \"/funktion/1/F12\"));\r",
									"pm.test(\"funktionen[5].decoderId\", () => pm.expect(jsonData.funktionen[5].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[5].reihe\", () => pm.expect(jsonData.funktionen[5].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[5].funktion\", () => pm.expect(jsonData.funktionen[5].funktion).to.eql(\"F13\"));\r",
									"pm.test(\"funktionen[5].bezeichnung\", () => pm.expect(jsonData.funktionen[5].bezeichnung).to.eql(\"Funktion 13\"));\r",
									"pm.test(\"funktionen[5].programmable\", () => pm.expect(jsonData.funktionen[5].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[5].deleted\", () => pm.expect(jsonData.funktionen[5].deleted).to.be.false);\r",
									"pm.test(\"funktionen[5]._links.parent\", () => pm.expect(jsonData.funktionen[5]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[5]._links.update\", () => pm.expect(jsonData.funktionen[5]._links.update[0].href).to.eql(self + \"/funktion/1/F13\"));\r",
									"pm.test(\"funktionen[6].decoderId\", () => pm.expect(jsonData.funktionen[6].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[6].reihe\", () => pm.expect(jsonData.funktionen[6].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[6].funktion\", () => pm.expect(jsonData.funktionen[6].funktion).to.eql(\"F14\"));\r",
									"pm.test(\"funktionen[6].bezeichnung\", () => pm.expect(jsonData.funktionen[6].bezeichnung).to.eql(\"Funktion 14\"));\r",
									"pm.test(\"funktionen[6].programmable\", () => pm.expect(jsonData.funktionen[6].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[6].deleted\", () => pm.expect(jsonData.funktionen[6].deleted).to.be.false);\r",
									"pm.test(\"funktionen[6]._links.parent\", () => pm.expect(jsonData.funktionen[6]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[6]._links.update\", () => pm.expect(jsonData.funktionen[6]._links.update[0].href).to.eql(self + \"/funktion/1/F14\"));\r",
									"pm.test(\"funktionen[7].decoderId\", () => pm.expect(jsonData.funktionen[7].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[7].reihe\", () => pm.expect(jsonData.funktionen[7].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[7].funktion\", () => pm.expect(jsonData.funktionen[7].funktion).to.eql(\"F15\"));\r",
									"pm.test(\"funktionen[7].bezeichnung\", () => pm.expect(jsonData.funktionen[7].bezeichnung).to.eql(\"Funktion 15\"));\r",
									"pm.test(\"funktionen[7].programmable\", () => pm.expect(jsonData.funktionen[7].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[7].deleted\", () => pm.expect(jsonData.funktionen[7].deleted).to.be.false);\r",
									"pm.test(\"funktionen[7]._links.parent\", () => pm.expect(jsonData.funktionen[7]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[7]._links.update\", () => pm.expect(jsonData.funktionen[7]._links.update[0].href).to.eql(self + \"/funktion/1/F15\"));\r",
									"pm.test(\"funktionen[8].decoderId\", () => pm.expect(jsonData.funktionen[8].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[8].reihe\", () => pm.expect(jsonData.funktionen[8].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[8].funktion\", () => pm.expect(jsonData.funktionen[8].funktion).to.eql(\"F2\"));\r",
									"pm.test(\"funktionen[8].bezeichnung\", () => pm.expect(jsonData.funktionen[8].bezeichnung).to.eql(\"Funktion 2\"));\r",
									"pm.test(\"funktionen[8].programmable\", () => pm.expect(jsonData.funktionen[8].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[8].deleted\", () => pm.expect(jsonData.funktionen[8].deleted).to.be.false);\r",
									"pm.test(\"funktionen[8]._links.parent\", () => pm.expect(jsonData.funktionen[8]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[8]._links.update\", () => pm.expect(jsonData.funktionen[8]._links.update[0].href).to.eql(self + \"/funktion/1/F2\"));\r",
									"pm.test(\"funktionen[9].decoderId\", () => pm.expect(jsonData.funktionen[9].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[9].reihe\", () => pm.expect(jsonData.funktionen[9].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[9].funktion\", () => pm.expect(jsonData.funktionen[9].funktion).to.eql(\"F3\"));\r",
									"pm.test(\"funktionen[9].bezeichnung\", () => pm.expect(jsonData.funktionen[9].bezeichnung).to.eql(\"Funktion 3\"));\r",
									"pm.test(\"funktionen[9].programmable\", () => pm.expect(jsonData.funktionen[9].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[9].deleted\", () => pm.expect(jsonData.funktionen[9].deleted).to.be.false);\r",
									"pm.test(\"funktionen[9]._links.parent\", () => pm.expect(jsonData.funktionen[9]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[9]._links.update\", () => pm.expect(jsonData.funktionen[9]._links.update[0].href).to.eql(self + \"/funktion/1/F3\"));\r",
									"pm.test(\"funktionen[10].decoderId\", () => pm.expect(jsonData.funktionen[10].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[10].reihe\", () => pm.expect(jsonData.funktionen[10].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[10].funktion\", () => pm.expect(jsonData.funktionen[10].funktion).to.eql(\"F4\"));\r",
									"pm.test(\"funktionen[10].bezeichnung\", () => pm.expect(jsonData.funktionen[10].bezeichnung).to.eql(\"Funktion 4\"));\r",
									"pm.test(\"funktionen[10].programmable\", () => pm.expect(jsonData.funktionen[10].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[10].deleted\", () => pm.expect(jsonData.funktionen[10].deleted).to.be.false);\r",
									"pm.test(\"funktionen[10]._links.parent\", () => pm.expect(jsonData.funktionen[10]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[10]._links.update\", () => pm.expect(jsonData.funktionen[10]._links.update[0].href).to.eql(self + \"/funktion/1/F4\"));\r",
									"pm.test(\"funktionen[11].decoderId\", () => pm.expect(jsonData.funktionen[11].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[11].reihe\", () => pm.expect(jsonData.funktionen[11].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[11].funktion\", () => pm.expect(jsonData.funktionen[11].funktion).to.eql(\"F5\"));\r",
									"pm.test(\"funktionen[11].bezeichnung\", () => pm.expect(jsonData.funktionen[11].bezeichnung).to.eql(\"Funktion 5\"));\r",
									"pm.test(\"funktionen[11].programmable\", () => pm.expect(jsonData.funktionen[11].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[11].deleted\", () => pm.expect(jsonData.funktionen[11].deleted).to.be.false);\r",
									"pm.test(\"funktionen[11]._links.parent\", () => pm.expect(jsonData.funktionen[11]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[11]._links.update\", () => pm.expect(jsonData.funktionen[11]._links.update[0].href).to.eql(self + \"/funktion/1/F5\"));\r",
									"pm.test(\"funktionen[12].decoderId\", () => pm.expect(jsonData.funktionen[12].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[12].reihe\", () => pm.expect(jsonData.funktionen[12].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[12].funktion\", () => pm.expect(jsonData.funktionen[12].funktion).to.eql(\"F6\"));\r",
									"pm.test(\"funktionen[12].bezeichnung\", () => pm.expect(jsonData.funktionen[12].bezeichnung).to.eql(\"Funktion 6\"));\r",
									"pm.test(\"funktionen[12].programmable\", () => pm.expect(jsonData.funktionen[12].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[12].deleted\", () => pm.expect(jsonData.funktionen[12].deleted).to.be.false);\r",
									"pm.test(\"funktionen[12]._links.parent\", () => pm.expect(jsonData.funktionen[12]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[12]._links.update\", () => pm.expect(jsonData.funktionen[12]._links.update[0].href).to.eql(self + \"/funktion/1/F6\"));\r",
									"pm.test(\"funktionen[13].decoderId\", () => pm.expect(jsonData.funktionen[13].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[13].reihe\", () => pm.expect(jsonData.funktionen[13].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[13].funktion\", () => pm.expect(jsonData.funktionen[13].funktion).to.eql(\"F7\"));\r",
									"pm.test(\"funktionen[13].bezeichnung\", () => pm.expect(jsonData.funktionen[13].bezeichnung).to.eql(\"Funktion 7\"));\r",
									"pm.test(\"funktionen[13].programmable\", () => pm.expect(jsonData.funktionen[13].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[13].deleted\", () => pm.expect(jsonData.funktionen[13].deleted).to.be.false);\r",
									"pm.test(\"funktionen[13]._links.parent\", () => pm.expect(jsonData.funktionen[13]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[13]._links.update\", () => pm.expect(jsonData.funktionen[13]._links.update[0].href).to.eql(self + \"/funktion/1/F7\"));\r",
									"pm.test(\"funktionen[14].decoderId\", () => pm.expect(jsonData.funktionen[14].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[14].reihe\", () => pm.expect(jsonData.funktionen[14].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[14].funktion\", () => pm.expect(jsonData.funktionen[14].funktion).to.eql(\"F8\"));\r",
									"pm.test(\"funktionen[14].bezeichnung\", () => pm.expect(jsonData.funktionen[14].bezeichnung).to.eql(\"Funktion 8\"));\r",
									"pm.test(\"funktionen[14].programmable\", () => pm.expect(jsonData.funktionen[14].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[14].deleted\", () => pm.expect(jsonData.funktionen[14].deleted).to.be.false);\r",
									"pm.test(\"funktionen[14]._links.parent\", () => pm.expect(jsonData.funktionen[14]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[14]._links.update\", () => pm.expect(jsonData.funktionen[14]._links.update[0].href).to.eql(self + \"/funktion/1/F8\"));\r",
									"pm.test(\"funktionen[15].decoderId\", () => pm.expect(jsonData.funktionen[15].decoderId).to.eql(jsonData.decoderId));\r",
									"pm.test(\"funktionen[15].reihe\", () => pm.expect(jsonData.funktionen[15].reihe).to.eql(1));\r",
									"pm.test(\"funktionen[15].funktion\", () => pm.expect(jsonData.funktionen[15].funktion).to.eql(\"F9\"));\r",
									"pm.test(\"funktionen[15].bezeichnung\", () => pm.expect(jsonData.funktionen[15].bezeichnung).to.eql(\"Funktion 9\"));\r",
									"pm.test(\"funktionen[15].programmable\", () => pm.expect(jsonData.funktionen[15].programmable).to.eql(false));\r",
									"pm.test(\"funktionen[15].deleted\", () => pm.expect(jsonData.funktionen[15].deleted).to.be.false);\r",
									"pm.test(\"funktionen[15]._links.parent\", () => pm.expect(jsonData.funktionen[15]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"funktionen[15]._links.update\", () => pm.expect(jsonData.funktionen[15]._links.update[0].href).to.eql(self + \"/funktion/1/F9\"));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(pm.variables.replaceIn(\"{{api}}/decoder/{{hersteller}}/{{bestellNr}}\")));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9ef25b9-5155-42cc-888b-c64edad76478",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/decoder/{{decoderId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"decoder",
								"{{decoderId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Artikel",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0ddf87b-dedf-4d12-afcc-91b2f090cfa8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.artikel.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.artikelId;\r",
									"    pm.test(\"artikelId\", () => pm.expect(a.artikelId).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"kategorie\", () => pm.expect(a.kategorie).to.exist);\r",
									"    pm.test(\"unterKategorie\", () => pm.expect(a.unterKategorie).to.exist);\r",
									"    pm.test(\"anderungen\", () => pm.expect(a.anderungen).to.eql(undefined));\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.abbildung\", () => pm.expect(a._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"    pm.test(\"_links.anderung\", () => pm.expect(a._links.anderung[0].href).to.eql(self + \"/anderungen\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.artikel.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.artikel.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a81a768-188f-4879-9423-067ef1be5b3b",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerAdd\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNrAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"kategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"unterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"lange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"massstab\", \"H0\");\r",
									"pm.environment.set(\"spurweite\", \"H0\");\r",
									"pm.environment.set(\"epoch\", \"III\");\r",
									"pm.environment.set(\"bahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"gattung\", \"BR89.0\");\r",
									"pm.environment.set(\"betreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"achsfolg\", \"CH2T\");\r",
									"pm.environment.set(\"aufbau\", \"LK\");\r",
									"pm.environment.set(\"licht\", \"L1V\");\r",
									"pm.environment.set(\"kupplung\", \"RELEX\");\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungAdd\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderAdd\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypAdd\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"status\", \"GEKAUFT\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46f08def-f5d7-4217-bf4e-536f516d2fbb",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"artikelId\", jsonData.artikelId);\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": false\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fc5d392-6b5d-4b67-9bd6-2b783ecf9032",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(0));\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "abbildung",
									"type": "file",
									"src": "{{imageFile}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35696ec0-6a82-417a-a7d7-c07da44cfdbf",
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"UMGEBAUT\");\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anBezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStatus\", \"GEKAUFT\");\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09c8d412-4940-4fdc-bf41-e2bd7e3b52b1",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"anderungId\", jsonData.anderungId);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Anderung",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35e37ec9-d011-4199-9816-0fe692d218d3",
								"exec": [
									"pm.environment.set(\"anDatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"anTyp\", \"REPARIERT\");\r",
									"pm.environment.set(\"anBezeichnung\",  pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"pm.environment.set(\"anStuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anAnmerkung\", pm.variables.replaceIn(\"{{$randomLoremParagraph}}\").substring(0,254));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "afbced6c-f71a-4143-a9de-1c35a776f2b9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungId\", () => pm.expect(jsonData.anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungsDatum\", () => pm.expect(jsonData.anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungsTyp\", () => pm.expect(jsonData.anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anderungsDatum\": \"{{anDatum}}\",\n    \"anderungsTyp\": \"{{anTyp}}\",\n    \"bezeichnung\": \"{{anBezeichnung}}\",\n    \"stuck\": {{anStuck}},\n    \"anmerkung\": \"{{anAnmerkung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec30aa29-f669-4e72-903e-4ddae7936ae4",
								"exec": [
									"pm.environment.set(\"hersteller\", pm.variables.get(\"herstellerUpdate\"));\r",
									"pm.environment.set(\"bestellNr\", pm.variables.get(\"bestellNr\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));\r",
									"//pm.environment.set(\"kategorie\", pm.variables.get(\"kategorieUpdate\"));\r",
									"//pm.environment.set(\"unterKategorie\", pm.variables.get(\"unterKategorieUpdate\"));\r",
									"//pm.environment.set(\"lange\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"//pm.environment.set(\"massstab\", pm.variables.get(\"massstabUpdate\"));\r",
									"//pm.environment.set(\"spurweite\", pm.variables.get(\"spurweiteUpdate\"));\r",
									"//pm.environment.set(\"epoch\", pm.variables.get(\"epochUpdate\"));\r",
									"//pm.environment.set(\"bahnverwaltung\", pm.variables.get(\"bahnverwaltungUpdate\"));\r",
									"//pm.environment.set(\"gattung\", pm.variables.get(\"gattungUpdate\"));\r",
									"//pm.environment.set(\"betreibsnummer\", pm.variables.replaceIn(\"{{$randomAbbreviation}} {{$randomInt}}.{{$randomInt}}\"));\r",
									"//pm.environment.set(\"achsfolg\", pm.variables.get(\"achsfolgUpdate\"));\r",
									"//pm.environment.set(\"sondermodell\", pm.variables.get(\"sondermodellUpdate\"));\r",
									"//pm.environment.set(\"aufbau\", pm.variables.get(\"aufbauUpdate\"));\r",
									"pm.environment.set(\"licht\", pm.variables.get(\"lichtUpdate\"));\r",
									"pm.environment.set(\"kupplung\", pm.variables.get(\"kupplungUpdate\"));\r",
									"pm.environment.set(\"steuerung\", pm.variables.get(\"steuerungUpdate\"));\r",
									"pm.environment.set(\"decoder\", pm.variables.get(\"decoderUpdate\"));\r",
									"pm.environment.set(\"motorTyp\", pm.variables.get(\"motorTypUpdate\"));\r",
									"pm.environment.set(\"kaufdatum\", new Date(pm.variables.replaceIn(\"{{$randomDateRecent}}\")).toISOString().substring(0,10));\r",
									"pm.environment.set(\"wahrung\", pm.variables.replaceIn(\"{{$randomCurrencyCode}}\"));\r",
									"pm.environment.set(\"preis\", Number(pm.variables.replaceIn(\"{{$randomPrice}}\")));\r",
									"pm.environment.set(\"stuck\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"verbleibende\", Number(pm.variables.replaceIn(\"{{$randomInt}}\")));\r",
									"pm.environment.set(\"anmerkung\", pm.variables.replaceIn(\"{{$randomCatchPhrase}}\"));\r",
									"pm.environment.set(\"beladung\", pm.variables.replaceIn(\"{{$randomProductMaterial}}\"));\r",
									"pm.environment.set(\"status\", \"BASTELN\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66285c7d-1ff8-490c-81f0-201061c83186",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"artikelId\": \"{{artikelId}}\",\n    \"hersteller\": \"{{hersteller}}\",\n    \"bestellNr\": \"{{bestellNr}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n    \"kategorie\": \"{{kategorie}}\",\n    \"unterKategorie\": \"{{unterKategorie}}\",\n    \"lange\": {{lange}},\n    \"massstab\": \"{{massstab}}\",\n    \"spurweite\": \"{{spurweite}}\",\n    \"epoch\": \"{{epoch}}\",\n    \"bahnverwaltung\": \"{{bahnverwaltung}}\",\n    \"gattung\": \"{{gattung}}\",\n    \"betreibsnummer\": \"{{betreibsnummer}}\",\n    \"achsfolg\": \"{{achsfolg}}\",\n    \"sondermodell\": \"{{sondermodell}}\",\n    \"aufbau\": \"{{aufbau}}\",\n    \"licht\": \"{{licht}}\",\n    \"kupplung\": \"{{kupplung}}\",\n    \"steuerung\": \"{{steuerung}}\",\n    \"decoder\": \"{{decoder}}\",\n    \"motorTyp\": \"{{motorTyp}}\",\n    \"kaufdatum\": \"{{kaufdatum}}\",\n    \"wahrung\": \"{{wahrung}}\",\n    \"preis\": {{preis}},\n    \"stuck\": {{stuck}},\n    \"verbleibende\": {{verbleibende}},\n    \"anmerkung\": \"{{anmerkung}}\",\n    \"beladung\": \"{{beladung}}\",\n    \"status\": \"{{status}}\",\n    \"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8ff09a4-88ac-4118-bd80-a100eed562e2",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var abbildung = pm.variables.replaceIn(\"{{server}}/artikel/{{artikelId}}/abbildung.jpg\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(abbildung));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Abbildung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e54579e-5575-4cc4-8557-28ed216a2f0a",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var root = pm.variables.replaceIn(\"{{api}}/artikel\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}\");\r",
									"var anderungUrl = pm.variables.replaceIn(\"{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}\");\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"hersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"bestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"kategorie\", () => pm.expect(jsonData.kategorie).to.eql(pm.variables.get(\"kategorie\")));\r",
									"pm.test(\"unterKategorie\", () => pm.expect(jsonData.unterKategorie).to.eql(pm.variables.get(\"unterKategorie\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"lange\")));\r",
									"pm.test(\"massstab\", () => pm.expect(jsonData.massstab).to.eql(pm.variables.get(\"massstab\")));\r",
									"pm.test(\"spurweite\", () => pm.expect(jsonData.spurweite).to.eql(pm.variables.get(\"spurweite\")));\r",
									"pm.test(\"epoch\", () => pm.expect(jsonData.epoch).to.eql(pm.variables.get(\"epoch\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"bahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"gattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"betreibsnummer\")));\r",
									"pm.test(\"achsfolg\", () => pm.expect(jsonData.achsfolg).to.eql(pm.variables.get(\"achsfolg\")));\r",
									"pm.test(\"sondermodell\", () => pm.expect(jsonData.sondermodell).to.eql(undefined));\r",
									"pm.test(\"aufbau\", () => pm.expect(jsonData.aufbau).to.eql(pm.variables.get(\"aufbau\")));\r",
									"pm.test(\"licht\", () => pm.expect(jsonData.licht).to.eql(pm.variables.get(\"licht\")));\r",
									"pm.test(\"kupplung\", () => pm.expect(jsonData.kupplung).to.eql(pm.variables.get(\"kupplung\")));\r",
									"pm.test(\"steuerung\", () => pm.expect(jsonData.steuerung).to.eql(pm.variables.get(\"steuerung\")));\r",
									"pm.test(\"decoder\", () => pm.expect(jsonData.decoder).to.eql(pm.variables.get(\"decoder\")));\r",
									"pm.test(\"motorTyp\", () => pm.expect(jsonData.motorTyp).to.eql(pm.variables.get(\"motorTyp\")));\r",
									"pm.test(\"kaufdatum\", () => pm.expect(jsonData.kaufdatum).to.eql(pm.variables.get(\"kaufdatum\")));\r",
									"pm.test(\"wahrung\", () => pm.expect(jsonData.wahrung).to.eql(pm.variables.get(\"wahrung\")));\r",
									"pm.test(\"preis\", () => pm.expect(jsonData.preis).to.eql(pm.variables.get(\"preis\")));\r",
									"pm.test(\"stuck\", () => pm.expect(jsonData.stuck).to.eql(pm.variables.get(\"stuck\")));\r",
									"pm.test(\"verbleibende\", () => pm.expect(jsonData.verbleibende).to.eql(pm.variables.get(\"verbleibende\")));\r",
									"pm.test(\"anmerkung\", () => pm.expect(jsonData.anmerkung).to.eql(pm.variables.get(\"anmerkung\")));\r",
									"pm.test(\"beladung\", () => pm.expect(jsonData.beladung).to.eql(pm.variables.get(\"beladung\")));\r",
									"pm.test(\"status\", () => pm.expect(jsonData.status).to.eql(pm.variables.get(\"status\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(undefined));\r",
									"pm.test(\"anderungen.length\", () => pm.expect(jsonData.anderungen.length).to.eql(1));\r",
									"pm.test(\"anderungen[0].artikelId\", () => pm.expect(jsonData.anderungen[0].artikelId).to.eql(pm.variables.get(\"artikelId\")));\r",
									"pm.test(\"anderungen[0].anderungId\", () => pm.expect(jsonData.anderungen[0].anderungId).to.eql(pm.variables.get(\"anderungId\")));\r",
									"pm.test(\"anderungen[0].anderungsDatum\", () => pm.expect(jsonData.anderungen[0].anderungsDatum).to.eql(pm.variables.get(\"anDatum\")));\r",
									"pm.test(\"anderungen[0].anderungsTyp\", () => pm.expect(jsonData.anderungen[0].anderungsTyp).to.eql(pm.variables.get(\"anTyp\")));\r",
									"pm.test(\"anderungen[0].bezeichnung\", () => pm.expect(jsonData.anderungen[0].bezeichnung).to.eql(pm.variables.get(\"anBezeichnung\")));\r",
									"pm.test(\"anderungen[0].stuck\", () => pm.expect(jsonData.anderungen[0].stuck).to.eql(pm.variables.get(\"anStuck\")));\r",
									"pm.test(\"anderungen[0].anmerkung\", () => pm.expect(jsonData.anderungen[0].anmerkung).to.eql(pm.variables.get(\"anAnmerkung\")));\r",
									"pm.test(\"anderungen[0].deleted\", () => pm.expect(jsonData.anderungen[0].deleted).to.be.false);\r",
									"pm.test(\"anderungen[0]._links.parent\", () => pm.expect(jsonData.anderungen[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"anderungen[0]._links.update\", () => pm.expect(jsonData.anderungen[0]._links.update[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"anderungen[0]._links.delete\", () => pm.expect(jsonData.anderungen[0]._links.delete[0].href).to.eql(anderungUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.abbildung\", () => pm.expect(jsonData._links.abbildung[0].href).to.eql(self + \"/abbildung\"));\r",
									"pm.test(\"_links.anderung\", () => pm.expect(jsonData._links.anderung[0].href).to.eql(self + \"/anderungen\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/abbildung",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"abbildung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae170458-4ec1-40fb-ac88-be6072827e8d",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}/anderungen/{{anderungId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}",
								"anderungen",
								"{{anderungId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6aec5c85-9790-444c-8fe5-2324ec12e539",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/artikel/{{artikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"artikel",
								"{{artikelId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Zug",
			"item": [
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ae5829c-06b7-4596-9cca-52332f42a5e8",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var jsonData = pm.response.json();\r",
									"jsonData._embedded.zug.forEach(function(a) { \r",
									"    var self = root + \"/\" + a.name;\r",
									"    pm.test(\"name\", () => pm.expect(a.name).to.exist);\r",
									"    pm.test(\"bezeichnung\", () => pm.expect(a.bezeichnung).to.exist);\r",
									"    pm.test(\"deleted\", () => pm.expect(a.deleted).to.be.false);\r",
									"    pm.test(\"_links.add\", () => pm.expect(a._links.add[0].href).to.eql(root));\r",
									"    pm.test(\"_links.self\", () => pm.expect(a._links.self[0].href).to.eql(self));\r",
									"    pm.test(\"_links.update\", () => pm.expect(a._links.update[0].href).to.eql(self));\r",
									"    pm.test(\"_links.delete\", () => pm.expect(a._links.delete[0].href).to.eql(self));\r",
									"    pm.test(\"_links.search\", () => pm.expect(a._links.search[0].href).to.eql(root));\r",
									"    pm.test(\"_links.consist\", () => pm.expect(a._links.consist[0].href).to.eql(self+\"/consist\"));\r",
									"});\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(root));\r",
									"pm.test(\"page.size\", () => pm.expect(jsonData.page.size).to.eql(jsonData._embedded.zug.length));\r",
									"pm.test(\"page.totalElements\", () => pm.expect(jsonData.page.totalElements).to.eql(jsonData._embedded.zug.length));\r",
									"pm.test(\"page.totalPages\", () => pm.expect(jsonData.page.totalPages).to.eql(1));\r",
									"pm.test(\"page.number\", () => pm.expect(jsonData.page.number).to.eql(0));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa04e425-ebf2-46e2-8afa-bcc1cf13478e",
								"exec": [
									"pm.environment.set(\"zug\", pm.variables.replaceIn(\"{{$randomAbbreviation}}\"));\r",
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypAdd\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f6e6f5f-339d-43ae-89fa-8dc79a440b30",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));\r",
									"pm.test(\"_links.consist\", () => pm.expect(jsonData._links.consist[0].href).to.eql(self+\"/consist\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a639e128-24b6-486b-bcbf-7d0419f17dee",
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00001\");\r",
									"pm.environment.set(\"cnPosition\", 1);\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"3000\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BR 89.0\");\r",
									"pm.environment.set(\"cnKategorie\", \"LOKOMOTIV\");\r",
									"pm.environment.set(\"cnUnterKategorie\", \"DAMPF\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BR89.0\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"89 028\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0e9dd52d-d539-400f-8cc2-90c030918850",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(201));\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"cnPosition\", jsonData.position);\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Consist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "89fc2b3a-591e-405b-95ef-a1a349a319ff",
								"exec": [
									"pm.environment.set(\"cnArtikelId\", \"00002\");\r",
									"pm.environment.set(\"cnHersteller\", \"MARKLIN\");\r",
									"pm.environment.set(\"cnBestellNr\", \"4007\");\r",
									"pm.environment.set(\"cnBezeichnung\", \"BI\");\r",
									"pm.environment.set(\"cnLange\", new Number(\"11.00\"));\r",
									"pm.environment.set(\"cnBahnverwaltung\", \"DB\");\r",
									"pm.environment.set(\"cnGattung\", \"BI\");\r",
									"pm.environment.set(\"cnBetreibsnummer\", \"29 758 Stg\");\r",
									"pm.environment.set(\"cnKupplung\", \"RELEX\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3bd22f8-6575-42cc-864d-88e2ed4dc9de",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var parent = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"zug\", () => pm.expect(jsonData.zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"position\", () => pm.expect(jsonData.position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"artikelId\", () => pm.expect(jsonData.artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"hersteller\", () => pm.expect(jsonData.hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"bestellNr\", () => pm.expect(jsonData.bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"lange\", () => pm.expect(jsonData.lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"bahnverwaltung\", () => pm.expect(jsonData.bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"gattung\", () => pm.expect(jsonData.gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"betreibsnummer\", () => pm.expect(jsonData.betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"abbildung\", () => pm.expect(jsonData.abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.parent\", () => pm.expect(jsonData._links.parent[0].href).to.eql(parent));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist/{{cnPosition}}?artikelId={{cnArtikelId}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist",
								"{{cnPosition}}"
							],
							"query": [
								{
									"key": "artikelId",
									"value": "{{cnArtikelId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eea5a90c-29bd-4b20-a8b4-e03ec148d576",
								"exec": [
									"pm.environment.set(\"zugTyp\", pm.variables.get(\"zugTypUpdate\"));\r",
									"pm.environment.set(\"bezeichnung\", pm.variables.replaceIn(\"{{$randomProductName}}\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "720d9011-7e91-4f62-8c25-c02616a22608",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(202));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"consist[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"consist[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"consist[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"consist[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"consist[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"consist[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"consist[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"consist[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"consist[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"consist[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"consist[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"consist[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"consist[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"consist[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"consist[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							},
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{zug}}\",\n    \"zugTyp\": \"{{zugTyp}}\",\n\t\"bezeichnung\": \"{{bezeichnung}}\",\n\t\"deleted\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d598da92-e734-4102-8fff-8b088866afc0",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"var zug = pm.variables.get(\"zug\");\r",
									"var root = pm.variables.replaceIn(\"{{api}}/zug\");\r",
									"var self = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}\");\r",
									"var consistUrl = pm.variables.replaceIn(\"{{api}}/zug/{{zug}}/consist/{{cnPosition}}\");\r",
									"pm.test(\"name\", () => pm.expect(jsonData.name).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"zugTyp\", () => pm.expect(jsonData.zugTyp).to.eql(pm.variables.get(\"zugTyp\")));\r",
									"pm.test(\"bezeichnung\", () => pm.expect(jsonData.bezeichnung).to.eql(pm.variables.get(\"bezeichnung\")));\r",
									"pm.test(\"consist[0].zug\", () => pm.expect(jsonData.consist[0].zug).to.eql(pm.variables.get(\"zug\")));\r",
									"pm.test(\"consist[0].position\", () => pm.expect(jsonData.consist[0].position).to.eql(pm.variables.get(\"cnPosition\")));\r",
									"pm.test(\"consist[0].artikelId\", () => pm.expect(jsonData.consist[0].artikelId).to.eql(pm.variables.get(\"cnArtikelId\")));\r",
									"pm.test(\"consist[0].hersteller\", () => pm.expect(jsonData.consist[0].hersteller).to.eql(pm.variables.get(\"cnHersteller\")));\r",
									"pm.test(\"consist[0].bestellNr\", () => pm.expect(jsonData.consist[0].bestellNr).to.eql(pm.variables.get(\"cnBestellNr\")));\r",
									"pm.test(\"consist[0].bezeichnung\", () => pm.expect(jsonData.consist[0].bezeichnung).to.eql(pm.variables.get(\"cnBezeichnung\")));\r",
									"pm.test(\"consist[0].lange\", () => pm.expect(jsonData.consist[0].lange).to.eql(pm.variables.get(\"cnLange\")));\r",
									"pm.test(\"consist[0].bahnverwaltung\", () => pm.expect(jsonData.consist[0].bahnverwaltung).to.eql(pm.variables.get(\"cnBahnverwaltung\")));\r",
									"pm.test(\"consist[0].gattung\", () => pm.expect(jsonData.consist[0].gattung).to.eql(pm.variables.get(\"cnGattung\")));\r",
									"pm.test(\"consist[0].betreibsnummer\", () => pm.expect(jsonData.consist[0].betreibsnummer).to.eql(pm.variables.get(\"cnBetreibsnummer\")));\r",
									"pm.test(\"consist[0].abbildung\", () => pm.expect(jsonData.consist[0].abbildung).to.eql(pm.variables.get(undefined)));\r",
									"pm.test(\"consist[0].deleted\", () => pm.expect(jsonData.consist[0].deleted).to.be.false);\r",
									"pm.test(\"consist[0]._links.parent\", () => pm.expect(jsonData.consist[0]._links.parent[0].href).to.eql(self));\r",
									"pm.test(\"consist[0]._links.update\", () => pm.expect(jsonData.consist[0]._links.update[0].href).to.eql(consistUrl));\r",
									"pm.test(\"consist[0]._links.delete\", () => pm.expect(jsonData.consist[0]._links.delete[0].href).to.eql(consistUrl));\r",
									"pm.test(\"deleted\", () => pm.expect(jsonData.deleted).to.be.false);\r",
									"pm.test(\"_links.add\", () => pm.expect(jsonData._links.add[0].href).to.eql(root));\r",
									"pm.test(\"_links.self\", () => pm.expect(jsonData._links.self[0].href).to.eql(self));\r",
									"pm.test(\"_links.update\", () => pm.expect(jsonData._links.update[0].href).to.eql(self));\r",
									"pm.test(\"_links.delete\", () => pm.expect(jsonData._links.delete[0].href).to.eql(self));\r",
									"pm.test(\"_links.search\", () => pm.expect(jsonData._links.search[0].href).to.eql(root));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1feda4dc-072b-472e-8e68-00712f214d78",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}/consist/1",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}",
								"consist",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e42820b1-d877-49ae-8028-d11e9eaff4a9",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/zug/{{zug}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"zug",
								"{{zug}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Open Api",
			"item": [
				{
					"name": "Get Docs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "658aa646-6fca-4d1b-9a4c-6292933b9cde",
								"exec": [
									"pm.test(\"response\", () => pm.response.to.have.status(200));\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"openapi\", () => pm.expect(jsonData.openapi).to.eql( \"3.0.1\"));\r",
									"pm.test(\"info\", () => {\r",
									"    pm.expect(jsonData.info.title).to.eql(\"ModellBahn API\");\r",
									"\tpm.expect(jsonData.info.description).to.eql(\"ModellBahn datastore\");\r",
									"\tpm.expect(jsonData.info.license.name).to.eql(\"MIT License\");\r",
									"\tpm.expect(jsonData.info.license.url).to.eql(\"http://www.opensource.org/licenses/mit-license.php\");\r",
									"\tpm.expect(jsonData.info.version).to.eql(\"1.0.0\");\r",
									"\t});\r",
									"pm.test(\"externalDocs\", () => {\r",
									"\tpm.expect(jsonData.externalDocs.description).to.eql(\"ModellBahn datastore\");\r",
									"\tpm.expect(jsonData.externalDocs.url).to.eql(\"https://github.com/linepro/ModellBahn/docs\");\r",
									"    });\r",
									"pm.test(\"servers\", () => {\r",
									"\tpm.expect(jsonData.servers[0].url).to.eql(\"http://127.0.0.1:8086/ModellBahn/v3/a\");\r",
									"\tpm.expect(jsonData.servers[0].description).to.eql(\"Generated server url\");\r",
									"\t});\r",
									"pm.test(\"paths\", () => {\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/achsfolg\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/achsfolg/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/antrieb\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/antrieb/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/anderungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/artikel/{artikelId}/anderungen/{anderungId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/aufbau/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/bahnverwaltung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/bahnverwaltung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/funktion/{reihe}/{funktion}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/adress/{index}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoder/{decoderId}/cv/{cv}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/anleitungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/cv/{cv}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/funktion/{reihe}/{funktion}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/adress\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/cv\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/funktion\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/decoderTyp/{hersteller}/{bestellNr}/adress/{index}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/status\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/leistungsubertragung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/adressTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/decoder\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/konfiguration\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/anderungsTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/enums/stecker\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/epoch\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/epoch/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/gattung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/gattung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/hersteller\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/hersteller/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/unterKategorien\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{kategorie}/unterKategorien/{unterKategorie}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kategorie/{kategorie}/unterKategorien\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/kupplung/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/licht/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/massstab\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/massstab/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/motorTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/motorTyp/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/anleitungen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/explosionszeichnung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/teilen\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/produkt/{hersteller}/{bestellNr}/teilen/{teilHersteller}/{teilBestellNr}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/protokoll\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/protokoll/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/sondermodell\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/sondermodell/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/spurweite\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/spurweite/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/steuerung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/steuerung/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/vorbild/{name}/abbildung\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}/consist\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zug/{name}/consist/{position}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zugTyp\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/zugTyp/{name}\")).to.be.true;\r",
									"\tpm.expect(jsonData.paths.hasOwnProperty(\"/api/data/{dataType}\")).to.be.true;\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{root}}/v3/api-docs.json",
							"host": [
								"{{root}}"
							],
							"path": [
								"v3",
								"api-docs.json"
							]
						},
						"description": "http://LINEPRO2.home:8086/ModellBahn/api/swagger/swagger."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Export",
			"item": [
				{
					"name": "Achsfolg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebdca4b1-fb2e-4518-b289-34a4140574df",
								"exec": [
									"pm.test(\"Achsfolg\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb135f02-d4b5-46a9-9e94-9dd02e30ccaa",
								"exec": [
									"pm.test(\"Antrieb\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02939d5e-a3fd-4ec4-8d50-2ab500ccbde6",
								"exec": [
									"pm.test(\"Aufbau\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88adb9cc-07a7-4d44-9b6a-036290d9d967",
								"exec": [
									"pm.test(\"Bahnverwaltung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,land,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a2fd778-14d5-48c3-bf17-9e0f5c2b37a8",
								"exec": [
									"pm.test(\"Epoch\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "728e2832-99ac-49d3-b469-19e7afd1237c",
								"exec": [
									"pm.test(\"Gattung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d58fb4f-13df-4695-813a-947a98e2cd0f",
								"exec": [
									"pm.test(\"Hersteller\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,land,url,telefon,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){5}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9140fea1-df89-4449-8ff6-b0b6e63f89fe",
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "736d81a9-88b5-43df-a395-39517e231275",
								"exec": [
									"pm.test(\"Kupplung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7097b78-c06d-4ef1-be13-6670ad909691",
								"exec": [
									"pm.test(\"Licht\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7041e061-791d-4549-a66d-d471c1cd9cc2",
								"exec": [
									"pm.test(\"Massstab\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Motor Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b82f8b4b-dbe8-462c-8347-4c4753e567bd",
								"exec": [
									"pm.test(\"Motor Typ\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3caf2a5f-1200-482f-ba2f-574b791c6e7d",
								"exec": [
									"pm.test(\"Protokoll\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80773936-ae4b-4895-9839-5a46e9263dae",
								"exec": [
									"pm.test(\"Sondermodell\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd25f992-b9f4-40f5-af0d-aa44bc7ace4f",
								"exec": [
									"pm.test(\"Spurweite\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b30e682-07b5-4679-bf31-a5c3fe294e03",
								"exec": [
									"pm.test(\"Steuerung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b05d97-ca98-45d2-89bd-752e7617994e",
								"exec": [
									"pm.test(\"Zug Typ\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){2}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "815bba5a-9909-4de4-a42f-9697ac604a04",
								"exec": [
									"pm.test(\"Unter Kategorie\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"kategorie,name,bezeichnung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca7036d9-f84a-451b-9016-ab609db9e3ed",
								"exec": [
									"pm.test(\"Vorbild\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,gattung,bezeichnung,kategorie,unterKategorie,bahnverwaltung,hersteller,bauzeit,anzahl,betreibsnummer,antrieb,achsfolg,anfahrzugkraft,leistung,dienstgewicht,geschwindigkeit,lange,ausserdienst,dmTreibrad,dmLaufradVorn,dmLaufradHinten,zylinder,dmZylinder,kolbenhub,kesseluberdruck,rostflache,uberhitzerflache,wasservorrat,verdampfung,fahrmotoren,motorbauart,leistungsubertragung,reichweite,kapazitat,klasse,sitzplatzeKL1,sitzplatzeKL2,sitzplatzeKL3,sitzplatzeKL4,aufbau,triebkopf,mittelwagen,drehgestellBauart,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){44}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab500508-d27a-491e-9c9a-89e8d227a341",
								"exec": [
									"pm.test(\"Decoder Typ\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,bezeichnung,iMax,protokoll,fahrstufe,gerausch,konfiguration,stecker,anleitungen,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){10}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c51071c-a584-4277-b1d7-cb9633cdb44c",
								"exec": [
									"pm.test(\"Decoder Typ Adress\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,index,bezeichnung,span,adressTyp,werkseinstellung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b22ef115-30d8-4d85-9c0c-4dd086a066eb",
								"exec": [
									"pm.test(\"Decoder Typ Cv\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,cv,bezeichnung,minimal,maximal,werkseinstellung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee679581-1a58-4b00-ba9d-85ec9445d525",
								"exec": [
									"pm.test(\"Decoder Typ Funktion\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,reihe,funktion,bezeichnung,programmable,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){6}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1e7a5b2-e491-47dd-a64b-2337f0e96507",
								"exec": [
									"pm.test(\"Produkt\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,bezeichnung,kategorie,unterKategorie,lange,massstab,spurweite,epoch,bahnverwaltung,gattung,betreibsnummer,bauzeit,achsfolg,sondermodell,aufbau,licht,kupplung,steuerung,decoderHersteller,decoderBestellNr,motorTyp,anmerkung,anleitungen,explosionszeichnung,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){26}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f03d3ebd-ad48-4f63-818f-e1a1f99a8528",
								"exec": [
									"pm.test(\"Produkt Teil\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"hersteller,bestellNr,teilHersteller,teilBestellNr,bezeichnung,kategorie,unterKategorie,anzahl,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){8}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/teil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"teil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b547341-5824-4386-afcc-dd4c726a51b4",
								"exec": [
									"pm.test(\"Decoder\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,hersteller,bestellNr,bezeichnung,iMax,protokoll,fahrstufe,gerausch,konfiguration,stecker,status,anleitungen,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){12}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c156ef2-d141-45ce-a707-425c1a3ffec4",
								"exec": [
									"pm.test(\"Decoder Adress\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,index,bezeichnung,span,adressTyp,werkseinstellung,adress,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10bd7b56-89a0-42e7-87fa-c420efc02cc4",
								"exec": [
									"pm.test(\"Decoder Cv\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,cv,bezeichnung,minimal,maximal,werkseinstellung,wert,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e3eb9d8-eef1-4f4a-b967-88dd59b502e4",
								"exec": [
									"pm.test(\"Decoder Funktion\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"decoderId,reihe,funktion,bezeichnung,programmable,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){5}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a27ebef9-3465-443c-a460-8be72c26259a",
								"exec": [
									"pm.test(\"Artikel\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"artikelId,hersteller,bestellNr,bezeichnung,kategorie,unterKategorie,lange,massstab,spurweite,epoch,bahnverwaltung,gattung,betreibsnummer,achsfolg,sondermodell,aufbau,licht,kupplung,steuerung,decoder,motorTyp,kaufdatum,wahrung,preis,stuck,verbleibende,anmerkung,beladung,status,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){30}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "008989a9-b268-4a0d-997e-f466c0a4aeb2",
								"exec": [
									"pm.test(\"Anderung\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"artikelId,anderungId,anderungsDatum,anderungsTyp,bezeichnung,stuck,anmerkung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){7}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98d83b3b-728a-4884-b733-9d5f0f099b29",
								"exec": [
									"pm.test(\"Zug\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"name,bezeichnung,zugTyp,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){3}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cf668ca-3ce4-4d4d-b9cc-586f5c059733",
								"exec": [
									"pm.test(\"Zug Consist\", () => pm.response.to.have.status(200));\r",
									"var csv = pm.response.text().split(/\\r?\\n/);\r",
									"pm.test(\"Header\", () => pm.expect(csv[0]).to.eql(\"zug,position,artikelId,hersteller,bestellNr,bezeichnung,lange,bahnverwaltung,gattung,betreibsnummer,abbildung,deleted\"));\r",
									"var data = csv.slice(1,csv.length-1);\r",
									"pm.test(\"Data\", () => data.forEach(r => pm.expect(r.match(/^((?:\"[^\"]*?\"|[^,]*?),){11}(true|false)$/).length).to.eql(3)));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv, application/json, text/html, application/xhtml+xml, application/xml"
							}
						],
						"url": {
							"raw": "{{api}}/data/consist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"consist"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Achsfolg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "470d426f-b896-4973-9367-14a6d34db633",
								"exec": [
									"pm.test(\"Achsfolg\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/achsfolg",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"achsfolg"
							]
						}
					},
					"response": []
				},
				{
					"name": "Antrieb",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f21990d-a5e5-490a-be50-bfc33351902b",
								"exec": [
									"pm.test(\"Antrieb\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/antrieb",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"antrieb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Aufbau",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d9175ba-a96d-476b-83f7-63ab767ef576",
								"exec": [
									"pm.test(\"Aufbau\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/aufbau",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"aufbau"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bahnverwaltung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "719ada41-7b7a-4456-9436-9719c95eeef9",
								"exec": [
									"pm.test(\"Bahnverwaltung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{bahnverwaltungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/bahnverwaltung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"bahnverwaltung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epoch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e6a89c1-c32d-453f-89e2-247a5ce03c0f",
								"exec": [
									"pm.test(\"Epoch\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/epoch",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"epoch"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gattung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b89c0619-0b69-4358-93fc-902ec25f9c09",
								"exec": [
									"pm.test(\"Gattung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/gattung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"gattung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hersteller",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76628eca-b080-48d0-a38e-a303fd10d7a1",
								"exec": [
									"pm.test(\"Hersteller\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{herstellerCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/hersteller",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"hersteller"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kupplung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dfb8f2a-464f-490f-ada9-2380cd9cdb7b",
								"exec": [
									"pm.test(\"Kupplung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/kupplung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kupplung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Licht",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "168a1609-8584-4eb9-9286-56d38d8ac514",
								"exec": [
									"pm.test(\"Licht\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{abbildungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/licht",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"licht"
							]
						}
					},
					"response": []
				},
				{
					"name": "Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69427b75-e392-4384-95a6-2c3af1e328e0",
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/kategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"kategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Massstab",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31796f46-a36c-4b89-b9c2-21c0b6e0b9c2",
								"exec": [
									"pm.test(\"Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/massstab",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"massstab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Motor Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "525ceefa-af60-4b2b-8c1f-354cb2a0b3b5",
								"exec": [
									"pm.test(\"Motor Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/motorTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"motorTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protokoll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10ff6efb-33e8-4d07-9a1e-c9b438b36009",
								"exec": [
									"pm.test(\"Protokoll\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/protokoll",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"protokoll"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sondermodell",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c76c05c-f290-4580-a2d5-41734f9950c6",
								"exec": [
									"pm.test(\"Sondermodell\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/sondermodell",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"sondermodell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Spurweite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f07b571-e4a0-4f6a-bdf2-3da9e075ccbd",
								"exec": [
									"pm.test(\"Spurweite\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/spurweite",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"spurweite"
							]
						}
					},
					"response": []
				},
				{
					"name": "Steuerung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15808a84-4057-4d30-9023-b27e6539da88",
								"exec": [
									"pm.test(\"Steuerung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/steuerung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"steuerung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee956382-709f-45ca-9d08-ac6331d59c11",
								"exec": [
									"pm.test(\"Zug Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{namedCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zugTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zugTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unter Kategorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb48fc15-37d9-48e8-b31c-4d605629bb73",
								"exec": [
									"pm.test(\"Unter Kategorie\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{unterKategorieCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/unterKategorie",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"unterKategorie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorbild",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6009a20-5f8a-4db8-a0e5-c2cdb64594cf",
								"exec": [
									"pm.test(\"Vorbild\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{vorbildCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/vorbild",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"vorbild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94cc1fc3-56a2-4b12-9873-116d71594a92",
								"exec": [
									"pm.test(\"Decoder Typ\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTyp",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTyp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f70752d1-a2d2-40a9-8432-327694b59e12",
								"exec": [
									"pm.test(\"Decoder Typ Adress\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypAdressCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ce02a50-e2a0-4746-aea8-4d23ced8718d",
								"exec": [
									"pm.test(\"Decoder Typ Cv\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypCvCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Typ Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0660bb8a-236c-4ad6-9f2c-e0dbb8072549",
								"exec": [
									"pm.test(\"Decoder Typ Funktion\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderTypFunktionCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderTypFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderTypFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "361e22a3-08fb-4e71-aa64-4f074b86df25",
								"exec": [
									"pm.test(\"Produkt\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{produktCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/produkt",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"produkt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Produkt Teil",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e673cf2-d80a-42cf-a291-031f718245f6",
								"exec": [
									"pm.test(\"Produkt Teil\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{teilCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/teil",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"teil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b234dc42-b8ef-4dbf-ad02-4431b4f4c41b",
								"exec": [
									"pm.test(\"Decoder\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoder",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef895027-df0a-45d4-9d86-a42a36a34036",
								"exec": [
									"pm.test(\"Decoder Adress\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderAdressCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderAdress",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderAdress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Cv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55a7af35-ebd3-41e2-8285-312a0cc2261c",
								"exec": [
									"pm.test(\"Decoder Cv\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderCvCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderCv",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderCv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decoder Funktion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3105821a-8536-4083-88ac-7470cc0bd29a",
								"exec": [
									"pm.test(\"Decoder Funktion\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{decoderFunktionCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/decoderFunktion",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"decoderFunktion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Artikel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7204976a-6f8d-40af-8dd0-9ce0a917a5eb",
								"exec": [
									"pm.test(\"Artikel\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{artikelCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/artikel",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"artikel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anderung",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f53e4776-696a-4ac6-ad88-d44edcef59b0",
								"exec": [
									"pm.test(\"Anderung\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{anderungCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/anderung",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"anderung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c8c551c-e80e-4d42-8146-4c9e69d106f1",
								"exec": [
									"pm.test(\"Zug\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{zugCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/zug",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"zug"
							]
						}
					},
					"response": []
				},
				{
					"name": "Zug Consist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e38e48b4-9f56-48a4-ad48-5be93b5a0e2a",
								"exec": [
									"pm.test(\"Zug Consist\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "{{language}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"type": "file",
									"src": "{{consistCsv}}"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{api}}/data/consist",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"consist"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "username",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "68228e7d-4d5b-476b-b4be-b93822626539",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c124d9c4-e8e2-4999-8e60-5653888198dc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dab237a4-2a2e-4157-a5b1-992f64372cf0",
			"key": "host",
			"value": "127.0.0.1"
		},
		{
			"id": "36e54087-723b-40e3-b2f6-69ade55c2911",
			"key": "port",
			"value": ":8086"
		},
		{
			"id": "fc401ebb-a8f6-4a6d-a78b-4ace892b4085",
			"key": "server",
			"value": "http://{{host}}{{port}}"
		},
		{
			"id": "d72138de-5721-4151-b3c1-0ad6fd67b74b",
			"key": "root",
			"value": "{{server}}/ModellBahn"
		},
		{
			"id": "f70532d9-f7a1-4878-9c3e-d865c9620d1c",
			"key": "api",
			"value": "{{root}}/api"
		},
		{
			"id": "6ac40dc1-f9a0-40aa-bb49-4a38cc64381d",
			"key": "language",
			"value": "de"
		},
		{
			"id": "51f529df-6858-4860-8805-240b70c50558",
			"key": "achsfolgAdd",
			"value": "1C1H2T"
		},
		{
			"id": "c1476b9a-87ba-495b-8c54-1da092108e6b",
			"key": "achsfolgUpdate",
			"value": "COCO"
		},
		{
			"id": "ef9f6f47-b4df-4872-b7dc-26cbb4bb8645",
			"key": "adIndexAdd",
			"value": "1"
		},
		{
			"id": "aba16811-e984-4c95-9192-bf969de5228f",
			"key": "adIndexUpdate",
			"value": "1"
		},
		{
			"id": "93f03f4d-cbec-4396-ad84-07c4ed2aad65",
			"key": "adSpanAdd",
			"value": "2"
		},
		{
			"id": "4639edb8-63d9-4a71-85e9-577958e5ad31",
			"key": "adSpanUpdate",
			"value": "16"
		},
		{
			"id": "35697b0c-5d7a-40ac-b193-4617491aec51",
			"key": "adTypAdd",
			"value": "DIGITAL"
		},
		{
			"id": "b2aab47b-7e7a-45c0-bb7d-b10a7d5fb648",
			"key": "adTypUpdate",
			"value": "DELTA"
		},
		{
			"id": "5cedc991-46af-45be-b148-51c62d8f3df7",
			"key": "adAdd",
			"value": "10"
		},
		{
			"id": "c21daa8c-fa65-49a0-9028-ae333c02146e",
			"key": "adUpdate",
			"value": "80"
		},
		{
			"id": "af9f70e8-12ab-4f2b-bc56-a44000b48fe8",
			"key": "anderungAdd",
			"value": "1"
		},
		{
			"id": "c1daf3b0-3504-45ca-9717-4449aefd13f1",
			"key": "anderungUpdate",
			"value": "1"
		},
		{
			"id": "4e079951-de12-4e88-8ae0-7e467077d2e1",
			"key": "antriebAdd",
			"value": "DAMPF"
		},
		{
			"id": "ed9232ea-34f4-4f27-a58f-ff04e45ec07f",
			"key": "antriebUpdate",
			"value": "ELEKTRO"
		},
		{
			"id": "bcad1d4f-2ccd-47d3-85fd-f361136b967a",
			"key": "artikelAdd",
			"value": "00001"
		},
		{
			"id": "eb4f0b3d-e5d5-4070-87a4-e2aae819abca",
			"key": "artikelUpdate",
			"value": "00001"
		},
		{
			"id": "54071ca8-4f6c-4486-ae56-1ad1d47ba3f3",
			"key": "aufbauAdd",
			"value": "LK"
		},
		{
			"id": "5450cea7-aa0b-446d-9d8e-699ab8c0e8d3",
			"key": "aufbauUpdate",
			"value": "LK"
		},
		{
			"id": "ca189017-f546-4109-a924-95b97f3ceb1a",
			"key": "bestellNrAdd",
			"value": "3000"
		},
		{
			"id": "605b4e32-8c83-4164-b250-be4a4b68973b",
			"key": "bestellNrUpdate",
			"value": "3003"
		},
		{
			"id": "002ddaff-e8bc-42b4-9e0a-06ab0e7c5c67",
			"key": "bahnverwaltungAdd",
			"value": "DB"
		},
		{
			"id": "17e6fc83-5b09-4c26-94d5-1c1dc96e7475",
			"key": "bahnverwaltungUpdate",
			"value": "DBAG"
		},
		{
			"id": "6a4f8b18-fea3-4fbd-8cd6-8c359d26d34e",
			"key": "cvAdd",
			"value": "8"
		},
		{
			"id": "7cbbe50e-585f-40f6-8ad6-730780ee6f46",
			"key": "cvUpdate",
			"value": "120"
		},
		{
			"id": "592a58bd-637a-4172-8194-b6eb0337774f",
			"key": "cvMaxAdd",
			"value": "63"
		},
		{
			"id": "afc462e9-7ed1-484a-8934-7a427edf7fbe",
			"key": "cvMaxUpdate",
			"value": "80"
		},
		{
			"id": "ba3824df-1069-4c1d-8c4d-bd338b2b4b6a",
			"key": "cvMinAdd",
			"value": "0"
		},
		{
			"id": "e6f0d63e-e58c-4a8b-b29d-0296112204a6",
			"key": "cvMinUpdate",
			"value": "1"
		},
		{
			"id": "db6eb5be-c596-4d04-b5be-90a55632da0f",
			"key": "cvValueAdd",
			"value": "30"
		},
		{
			"id": "8a44ed0b-8ccd-4a10-8fb7-deacb6686719",
			"key": "cvValueUpdate",
			"value": "50"
		},
		{
			"id": "51848cc3-7def-46b9-8fff-ba6e999fb470",
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"id": "0a972ab2-e67b-4a3c-af92-75a9668fe363",
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"id": "bbbbb344-3c34-4b8f-98b6-8019ccd23d72",
			"key": "decoderAdd",
			"value": "00001"
		},
		{
			"id": "15aa1e18-2939-4473-80bb-27b1ac5e2521",
			"key": "decoderUpdate",
			"value": "00001"
		},
		{
			"id": "342b5909-5492-4b02-b518-ced6e696e2db",
			"key": "decoderHerstellerAdd",
			"value": "ESU"
		},
		{
			"id": "b0dbcc61-387b-4fef-8b82-38c4c753320b",
			"key": "decoderHerstellerUpdate",
			"value": "ESU"
		},
		{
			"id": "7b82f642-f228-47ba-9953-2bbf5c3c87bc",
			"key": "decoderBestellNrAdd",
			"value": "62400"
		},
		{
			"id": "97949919-8848-4e0e-b9b7-00641d02409b",
			"key": "decoderBestellNrUpdate",
			"value": "62499"
		},
		{
			"id": "7b44ccd6-8723-419c-9877-1783c9c33fe5",
			"key": "decoderBezeichnungAdd",
			"value": "LokSound M4"
		},
		{
			"id": "f95f6246-a237-4c81-a873-e087c8da50c0",
			"key": "epochAdd",
			"value": "IV"
		},
		{
			"id": "ca00e858-4aeb-468d-9c47-434000830974",
			"key": "epochUpdate",
			"value": "IV"
		},
		{
			"id": "3718bc66-6b78-42c0-aaec-822049e8403c",
			"key": "fahrstufeAdd",
			"value": "27"
		},
		{
			"id": "a28fb9f7-370b-442d-9dfb-0afdb2e9070e",
			"key": "fahrstufeUpdate",
			"value": "128"
		},
		{
			"id": "0a933290-056d-4acc-9131-72e036dcce25",
			"key": "fnFuntionAdd",
			"value": "F0"
		},
		{
			"id": "fec54101-46eb-4c2e-9133-eee4902e7af6",
			"key": "fnFuntionUpdate",
			"value": "F0"
		},
		{
			"id": "47acd624-3390-46b7-a115-13c0407c01d2",
			"key": "fnReiheAdd",
			"value": "1"
		},
		{
			"id": "9ef4dab9-dd02-4214-bc4f-5c30925a0dfa",
			"key": "fnReiheUpdate",
			"value": "1"
		},
		{
			"id": "ce1cbcc6-92ac-4085-b808-54b6e9f5297c",
			"key": "gattungAdd",
			"value": "BR89.0"
		},
		{
			"id": "ea8e0de7-98a8-4b1f-9313-edf77c67045f",
			"key": "gattungUpdate",
			"value": "BR89.0"
		},
		{
			"id": "6f4084bf-3b92-41fb-990d-998c807bcce3",
			"key": "herstellerAdd",
			"value": "MARKLIN"
		},
		{
			"id": "77bf648c-6ea9-47d3-97be-803d976b05f5",
			"key": "herstellerUpdate",
			"value": "MARKLIN"
		},
		{
			"id": "fe3f14aa-0168-45ad-8c4e-c896e4173c95",
			"key": "iMaxAdd",
			"value": "1.5"
		},
		{
			"id": "2f9f4ca6-9783-41d7-b9ab-76a6a15eb871",
			"key": "iMaxUpdate",
			"value": "2.0"
		},
		{
			"id": "395553b3-6f10-487a-807a-dd20d3c69773",
			"key": "kategorieAdd",
			"value": "LOKOMOTIV"
		},
		{
			"id": "7611e4d5-155f-4ee1-82fd-48e170ac1157",
			"key": "kategorieUpdate",
			"value": "AUSGESTALTUNG"
		},
		{
			"id": "ca69dd46-4389-4dca-90d3-de201e921722",
			"key": "kupplungAdd",
			"value": "RELEX"
		},
		{
			"id": "e2d4a5b7-ee67-4bd8-b722-538c4c4e32f6",
			"key": "kupplungUpdate",
			"value": "RELEX"
		},
		{
			"id": "c5e03f46-b610-4c66-8a9f-efad2ae1526f",
			"key": "konfigurationAdd",
			"value": "CV"
		},
		{
			"id": "00b9dc18-cdcd-4515-9744-9e08ae92a511",
			"key": "konfigurationUpdate",
			"value": "STECKER"
		},
		{
			"id": "2256b129-ce95-48dc-aeef-f27adcc1c8cd",
			"key": "leistungsubertragungAdd",
			"value": "MECHANISH"
		},
		{
			"id": "7ef49cc8-b627-49f8-9d73-5c0c38d83203",
			"key": "leistungsubertragungUpdate",
			"value": "ELEKTRISH"
		},
		{
			"id": "f5460ca3-ce00-4020-8d00-0f2aeeed3eaf",
			"key": "lichtAdd",
			"value": "L1V"
		},
		{
			"id": "68274f73-e62a-4ba8-bc84-70143bedab2f",
			"key": "lichtUpdate",
			"value": "L1V"
		},
		{
			"id": "c6dc4174-3da8-4391-b812-13ee1999ea42",
			"key": "massstabAdd",
			"value": "H0"
		},
		{
			"id": "4342221a-e133-43f0-8fa2-44dd6237338a",
			"key": "massstabUpdate",
			"value": "H0"
		},
		{
			"id": "71d0eaf8-9cfe-4eac-ae6f-a1b8367fd3e4",
			"key": "motorTypAdd",
			"value": "CSINUS"
		},
		{
			"id": "70b8e264-5043-40cd-ba1e-28df789c48c1",
			"key": "motorTypUpdate",
			"value": "CSINUS"
		},
		{
			"id": "225b07f1-bdb8-40b2-a68f-f3b252362ed2",
			"key": "protokollAdd",
			"value": "MFX"
		},
		{
			"id": "173c24cb-dde3-49d2-aed4-1c897333071f",
			"key": "protokollUpdate",
			"value": "DELTA"
		},
		{
			"id": "0792f6ac-ae2e-49f4-af2d-4062d47f2c55",
			"key": "sondermodellAdd",
			"value": "MM"
		},
		{
			"id": "149cd77c-6bf7-44c8-bc48-ff5caa0ffe37",
			"key": "sondermodellUpdate",
			"value": "MM"
		},
		{
			"id": "172fdd20-8728-4a5b-b3cc-5ff773e55bf5",
			"key": "spurweiteAdd",
			"value": "H0"
		},
		{
			"id": "9dd62620-6e8c-47c9-90b3-35868c034ec9",
			"key": "spurweiteUpdate",
			"value": "H0"
		},
		{
			"id": "b11afeb7-e14e-4a6f-9bb5-35118703a7b9",
			"key": "steckerAdd",
			"value": "NEM651"
		},
		{
			"id": "09b57162-77db-460e-a2ad-469db0efe7c6",
			"key": "steckerUpdate",
			"value": "NEM652"
		},
		{
			"id": "f095c5dd-f523-4803-9c05-68ec3c3f938f",
			"key": "steuerungAdd",
			"value": "DIGITAL"
		},
		{
			"id": "134b4342-094e-4ce5-8ddf-399af1746769",
			"key": "steuerungUpdate",
			"value": "DIGITAL"
		},
		{
			"id": "ed574cb2-da36-448c-949c-7232bbd1f64e",
			"key": "teilHerstellerAdd",
			"value": "MARKLIN"
		},
		{
			"id": "911e6721-2499-44a5-9836-f929f1ff1440",
			"key": "teilBestellNrAdd",
			"value": "600300"
		},
		{
			"id": "dbd9dd16-dc96-4f79-89fc-8db81d7c3ee8",
			"key": "teilKategorieAdd",
			"value": "ERSATZTEIL"
		},
		{
			"id": "130c32e9-f288-4cfd-8e44-e7a726c4ef8a",
			"key": "teilUnterKategorieAdd",
			"value": "BURSTEN"
		},
		{
			"id": "803a0095-05d5-4fcd-9a8f-7b48d69db595",
			"key": "unterKategorieAdd",
			"value": "DAMPF"
		},
		{
			"id": "fed71b40-0025-4106-8243-278359862384",
			"key": "unterKategorieUpdate",
			"value": "HECKEN"
		},
		{
			"id": "926f0f9f-a513-4c36-840e-a238dc40ed60",
			"key": "teilBezeichnungAdd",
			"value": "Bürsten"
		},
		{
			"id": "e47f02fe-b04f-4b8b-a72d-cd519b8f4601",
			"key": "vorbildAdd",
			"value": "HECKEN"
		},
		{
			"id": "bb103f68-544c-4146-9225-fda4a559c04e",
			"key": "vorbildUpdate",
			"value": "HECKEN"
		},
		{
			"id": "01d629c5-68c5-4327-a3d7-6b87e078f091",
			"key": "zugAdd",
			"value": "BAVARIA"
		},
		{
			"id": "a8f16e77-5abd-4337-a93c-dc80ae3ce463",
			"key": "zugUpdate",
			"value": "BAVARIA"
		},
		{
			"id": "e887a9aa-862b-4c2b-a304-a58141b4f33f",
			"key": "zugTypAdd",
			"value": "TEE"
		},
		{
			"id": "eaaac2e8-49a9-49de-9016-c6e682815184",
			"key": "zugTypUpdate",
			"value": "TEE"
		},
		{
			"id": "5450c59d-2ebc-43ca-bcab-0633f5d9052f",
			"key": "imageFile",
			"value": "3000.jpg"
		},
		{
			"id": "d261eeb9-d256-42ea-9858-fc6c32fd79c0",
			"key": "anleitungFile",
			"value": "3000_betrieb.pdf"
		},
		{
			"id": "24a95a99-56a5-48cf-bc11-369fce91ba30",
			"key": "explosionszeichnungFile",
			"value": "3000_explo.pdf"
		},
		{
			"id": "f70d97be-c739-41db-af96-c86ea0ddd265",
			"key": "xlFile",
			"value": "3000.jpg"
		},
		{
			"id": "5b28c440-ede7-4ec7-a545-eb10c8c655f5",
			"key": "landAdd",
			"value": "DE"
		},
		{
			"id": "19d71cb8-e6e0-4bed-9dc8-27176dde3b36",
			"key": "landUpdate",
			"value": "NL"
		},
		{
			"id": "37946fe7-e1cc-4ea7-924e-66d39698bfd9",
			"key": "telefonAdd",
			"value": "+497161608222"
		},
		{
			"id": "77632210-db46-4c37-8c27-8a87d0ed773d",
			"key": "telefonUpdate",
			"value": "030 2341347"
		},
		{
			"id": "a52ecbb8-5373-47d4-9146-321f3500da8f",
			"key": "abbildungCsv",
			"value": "abbildungCsv.csv"
		},
		{
			"id": "7872dee1-6d94-43fc-9025-8b3e781d4aab",
			"key": "anderungCsv",
			"value": "anderungCsv.csv"
		},
		{
			"id": "831873a5-542a-47ea-9f1d-e4c4956e99a3",
			"key": "artikelCsv",
			"value": "artikelCsv.csv"
		},
		{
			"id": "722f4144-b069-4f56-910c-1c75ff7e6167",
			"key": "bahnverwaltungCsv",
			"value": "bahnverwaltungCsv.csv"
		},
		{
			"id": "ba917e80-a7c7-4951-bc83-dcc52f7f38f7",
			"key": "consistCsv",
			"value": "consistCsv.csv"
		},
		{
			"id": "b4267669-c4d7-4f21-8770-d9e7ca24ccd1",
			"key": "decoderCsv",
			"value": "decoderCsv.csv"
		},
		{
			"id": "89aff981-a590-4116-972c-3000ade6ba6c",
			"key": "decoderAdressCsv",
			"value": "decoderAdressCsv.csv"
		},
		{
			"id": "9e9ca907-4b26-48ad-bf07-82eefd472942",
			"key": "decoderCvCsv",
			"value": "decoderCvCsv.csv"
		},
		{
			"id": "7001b320-b8ca-44eb-8068-45b7cb4d2f4c",
			"key": "decoderFunktionCsv",
			"value": "decoderFunktionCsv.csv"
		},
		{
			"id": "ac802374-f500-4953-bcb6-9a062780f503",
			"key": "decoderTypCsv",
			"value": "decoderTypCsv.csv"
		},
		{
			"id": "ef8eb52c-fe83-4efa-8cda-aeb7a1cd1fe9",
			"key": "decoderTypAdressCsv",
			"value": "decoderTypAdressCsv.csv"
		},
		{
			"id": "8efb2be5-ecac-42a9-901c-b12c0c0dcd16",
			"key": "decoderTypCvCsv",
			"value": "decoderTypCvCsv.csv"
		},
		{
			"id": "bdebe508-502c-417a-bd55-1f17995fad87",
			"key": "decoderTypFunktionCsv",
			"value": "decoderTypFunktionCsv.csv"
		},
		{
			"id": "6521b0d3-015c-4a02-a259-3d321d86a585",
			"key": "herstellerCsv",
			"value": "herstellerCsv.csv"
		},
		{
			"id": "73efb1ec-5cd6-4618-96ae-48198c99db45",
			"key": "namedCsv",
			"value": "namedCsv.csv"
		},
		{
			"id": "2db032cd-6f7a-407a-8fb9-ac5f32298036",
			"key": "produktCsv",
			"value": "produktCsv.csv"
		},
		{
			"id": "3a9a2037-455c-48ba-a445-ebe31140689d",
			"key": "teilCsv",
			"value": "teilCsv.csv"
		},
		{
			"id": "25f3d215-be31-4d07-8a13-3c1e2505d274",
			"key": "unterKategorieCsv",
			"value": "unterKategorieCsv.csv"
		},
		{
			"id": "b531d797-d116-4c57-9d23-ce8dadef9c91",
			"key": "vorbildCsv",
			"value": "vorbildCsv.csv"
		},
		{
			"id": "72977687-a123-4927-bf27-c65e2089cd4d",
			"key": "zugCsv",
			"value": "zugCsv.csv"
		}
	],
	"protocolProfileBehavior": {}
}